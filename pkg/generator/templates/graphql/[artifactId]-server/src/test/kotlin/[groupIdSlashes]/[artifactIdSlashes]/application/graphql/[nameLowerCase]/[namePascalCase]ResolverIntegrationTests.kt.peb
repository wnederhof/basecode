package {{ groupId }}.{{ artifactId }}.application.graphql.{{ nameLowerCase }}

import com.netflix.graphql.dgs.DgsQueryExecutor
import com.netflix.graphql.dgs.autoconfig.DgsAutoConfiguration
import com.netflix.graphql.dgs.autoconfig.DgsExtendedScalarsAutoConfiguration
import com.nhaarman.mockitokotlin2.any
import com.nhaarman.mockitokotlin2.verify
import com.nhaarman.mockitokotlin2.whenever{%for field in fields%}{%if field.isFieldRelational%}
import {{ groupId }}.{{ artifactId }}.application.graphql.{{ field.fieldTypeLowerCase }}.{{ field.fieldTypePascalCase }}DataLoader
import {{ groupId }}.{{ artifactId }}.application.graphql.{{ field.fieldTypeLowerCase }}.{{ field.fieldTypePascalCase }}Resolver
import {{ groupId }}.{{ artifactId }}.domain.{{ field.fieldTypeLowerCase }}.{{ field.fieldTypePascalCase }}Fixtures.{{ field.fieldTypeScreamingSnakeCase }}_FIXTURE_WITH_ID_1
import {{ groupId }}.{{ artifactId }}.domain.{{ field.fieldTypeLowerCase }}.{{ field.fieldTypePascalCase }}Service{%endif%}{%endfor%}
import {{ groupId }}.{{ artifactId }}.domain.{{ nameLowerCase }}.{{ namePascalCase }}Fixtures.{{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1
import {{ groupId }}.{{ artifactId }}.domain.{{ nameLowerCase }}.{{ namePascalCase }}Service
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.boot.test.context.SpringBootTest
import org.springframework.boot.test.mock.mockito.MockBean

@SpringBootTest(
    classes = [
        DgsAutoConfiguration::class,
        DgsExtendedScalarsAutoConfiguration::class,{%for field in fields%}{%if field.isFieldRelational%}
        {{ field.fieldTypePascalCase }}Resolver::class,
        {{ field.fieldTypePascalCase }}DataLoader::class,{%endif%}{%endfor%}
        {{ namePascalCase }}Resolver::class,
        {{ namePascalCase }}DataLoader::class,
    ]
)
class {{ namePascalCase }}ResolverIntegrationTests {

    @Autowired
    private lateinit var dgsQueryExecutor: DgsQueryExecutor
{%for field in fields%}{%if field.isFieldRelational%}
    @MockBean
    private lateinit var {{ field.fieldTypeCamelCase }}Service: {{ field.fieldTypePascalCase }}Service
{%endif%}{%endfor%}
    @MockBean
    private lateinit var {{ nameCamelCase }}Service: {{ namePascalCase }}Service

    @Test
    fun {{ namePluralCamelCase }}() {
        whenever({{ nameCamelCase }}Service.findAll())
            .thenReturn(listOf({{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1))

        val ids = dgsQueryExecutor.executeAndExtractJsonPath<List<String>>(
            "{ {{ namePluralCamelCase }} { id } }",
            "data.{{ namePluralCamelCase }}[*].id"
        )

        assertThat(ids).contains({{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1.id.toString())
    }

    @Test
    fun `create{{ namePascalCase }} delegates the call to the service's create`() {
        whenever({{ nameCamelCase }}Service.create(any()))
            .thenReturn({{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1)

        val create{{ namePascalCase }}Input = mapOf({%for field in fields%}
            "{{ field.fieldNameCamelCase }}" to {{ field.fieldKotlinTestDummyValue }},{%endfor%}
        )

        val result = dgsQueryExecutor.executeAndExtractJsonPath<String>(
            "mutation create{{ namePascalCase }}(\$input: Create{{ namePascalCase }}Input!) { create{{ namePascalCase }}(input: \$input) { id } }",
            "data.create{{ namePascalCase }}.id",
            mapOf("input" to create{{ namePascalCase }}Input)
        )

        assertThat(result).isEqualTo({{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1.id.toString())

        verify({{ nameCamelCase }}Service).create(CREATE_{{ nameScreamingSnakeCase }}_FIXTURE_1)
    }

    @Test
    fun `update{{ namePascalCase }} delegates the call to the service's update`() {
        whenever({{ nameCamelCase }}Service.update(anyInt(), any()))
            .thenReturn({{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1)

        val update{{ namePascalCase }}Input = mapOf({%for field in fields%}
            "{{ field.fieldNameCamelCase }}" to {{ field.fieldKotlinTestDummyValue }},{%endfor%}
        )

        val result = dgsQueryExecutor.executeAndExtractJsonPath<String>(
            "mutation update{{ namePascalCase }}(\$id: ID!, \$input: Update{{ namePascalCase }}Input!) { update{{ namePascalCase }}(id: \$id, input: \$input) { id } }",
            "data.update{{ namePascalCase }}.id",
            mapOf("id" to {{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1.id, "input" to update{{ namePascalCase }}Input)
        )

        assertThat(result).isEqualTo({{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1.id.toString())

        verify({{ nameCamelCase }}Service).update({{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1.id!!, UPDATE_{{ nameScreamingSnakeCase }}_FIXTURE_1)
    }

    @Test
    fun delete{{ namePascalCase }}() {
        whenever({{ nameCamelCase }}Service.deleteById(any()))
            .thenReturn(true)

        val result = dgsQueryExecutor.executeAndExtractJsonPath<Boolean>(
            "mutation delete{{ namePascalCase }}(\$id: ID!) { delete{{ namePascalCase }}(id: \$id) }",
            "data.delete{{ namePascalCase }}",
            mapOf("id" to 1)
        )

        assertThat(result).isEqualTo(true)

        verify({{ nameCamelCase }}Service).deleteById(1)
    }
{%for field in fields%}{%if field.isFieldRelational%}
    @Test
    fun {{ namePluralCamelCase }}_{{ field.fieldTypeCamelCase }}() {
        whenever({{ nameCamelCase }}Service.findAll())
            .thenReturn(listOf({{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1))

        whenever({{ field.fieldTypeCamelCase }}Service.findByIds(setOf({{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1.{{ field.fieldNameCamelCase }})))
            .thenReturn(listOf({{ field.fieldTypeScreamingSnakeCase }}_FIXTURE_WITH_ID_1.copy(id = {{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1.{{ field.fieldNameCamelCase }})))

        val ids = dgsQueryExecutor.executeAndExtractJsonPath<List<String>>(
            "{ {{ namePluralCamelCase }} { {{ field.fieldTypeCamelCase }} { id } } }",
            "data.{{ namePluralCamelCase }}[*].{{ field.fieldTypeCamelCase }}.id"
        )

        assertThat(ids).contains({{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1.{{ field.fieldNameCamelCase }}.toString())
    }

    @Test
    fun {{ field.fieldTypePluralCamelCase }}_{{ namePluralCamelCase }}() {
        whenever({{ field.fieldTypeCamelCase }}Service.findAll())
            .thenReturn(listOf({{ field.fieldTypeScreamingSnakeCase }}_FIXTURE_WITH_ID_1.copy(id = {{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1.{{ field.fieldNameCamelCase }})))

        whenever({{ nameCamelCase }}Service.findBy{{ field.fieldTypePascalCase }}Ids(setOf({{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1.{{ field.fieldNameCamelCase }})))
            .thenReturn(listOf({{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1))

        val ids = dgsQueryExecutor.executeAndExtractJsonPath<List<String>>(
            "{ {{ field.fieldTypePluralCamelCase }} { {{ namePluralCamelCase }} { id } } }",
            "data.{{ field.fieldTypePluralCamelCase }}[*].{{ namePluralCamelCase }}[*].id"
        )

        assertThat(ids).contains({{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1.id.toString())
    }
{%endif%}{%endfor%}
}