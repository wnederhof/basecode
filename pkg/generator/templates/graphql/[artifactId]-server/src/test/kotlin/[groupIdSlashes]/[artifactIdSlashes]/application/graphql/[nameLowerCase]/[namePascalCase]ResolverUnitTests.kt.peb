package {{ groupId }}.{{ artifactId }}.application.graphql.{{ nameLowerCase }}

{%if hasRelations%}import com.netflix.graphql.dgs.DgsDataFetchingEnvironment
import com.nhaarman.mockitokotlin2.mock
import org.dataloader.DataLoader
import {{ groupId }}.{{ artifactId }}.domain.{{ nameLowerCase }}.{{ namePascalCase }}
import java.util.concurrent.CompletableFuture.completedFuture
{%endif%}import {{ groupId }}.{{ artifactId }}.domain.{{ nameLowerCase }}.{{ namePascalCase }}Service
import {{ groupId }}.{{ artifactId }}.domain.{{ nameLowerCase }}.{{ namePascalCase }}Fixtures.CREATE_{{ nameScreamingSnakeCase }}_FIXTURE_1
import {{ groupId }}.{{ artifactId }}.domain.{{ nameLowerCase }}.{{ namePascalCase }}Fixtures.UPDATE_{{ nameScreamingSnakeCase }}_FIXTURE_1
import {{ groupId }}.{{ artifactId }}.domain.{{ nameLowerCase }}.{{ namePascalCase }}Fixtures.{{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1
{%for field in fields%}{%if field.isFieldRelational%}import {{ groupId }}.{{ artifactId }}.domain.{{ field.fieldTypeLowerCase }}.{{ field.fieldTypePascalCase }}Fixtures.{{ field.fieldTypeScreamingSnakeCase }}_FIXTURE_WITH_ID_1
import {{ groupId }}.{{ artifactId }}.domain.{{ field.fieldTypeLowerCase }}.{{ field.fieldTypePascalCase }}
{%endif%}{%endfor%}import com.nhaarman.mockitokotlin2.verify
import com.nhaarman.mockitokotlin2.whenever
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Nested
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.extension.ExtendWith
import org.mockito.InjectMocks
import org.mockito.Mock
import org.mockito.junit.jupiter.MockitoExtension

@ExtendWith(MockitoExtension::class)
class {{ namePascalCase }}ResolverUnitTests {

    @Mock
    private lateinit var {{ nameCamelCase }}Service: {{ namePascalCase }}Service

    @InjectMocks
    private lateinit var {{ nameCamelCase }}Resolver: {{ namePascalCase }}Resolver

    @Test
    fun `{{ nameCamelCase }} delegates the call to the {{ namePascalCase }}Service`() {
        whenever({{ nameCamelCase }}Service.findById(1))
            .thenReturn({{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1)

        assertThat({{ nameCamelCase }}Resolver.{{ nameCamelCase }}(1))
            .isEqualTo({{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1)
    }

    @Test
    fun `{{ namePluralCamelCase }} delegates the call to the {{ namePascalCase }}Service`() {
        {%if hasRelations%}val any{{ namePascalCase }}Filter = {{ namePascalCase }}Service.{{ namePascalCase }}FilterInput()

        {%endif%}whenever({{ nameCamelCase }}Service.findAll({%if hasRelations%}any{{ namePascalCase }}Filter{%endif%}))
            .thenReturn(listOf({{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1))

        assertThat({{ nameCamelCase }}Resolver.{{ namePluralCamelCase }}({%if hasRelations%}any{{ namePascalCase }}Filter{%endif%}))
            .isEqualTo(listOf({{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1))
    }

    @Test
    fun `create{{ namePascalCase }} delegates the call to the {{ namePascalCase }}Service`() {
        whenever({{ nameCamelCase }}Service.create(CREATE_{{ nameScreamingSnakeCase }}_FIXTURE_1))
            .thenReturn({{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1)

        assertThat({{ nameCamelCase }}Resolver.create{{ namePascalCase }}(CREATE_{{ nameScreamingSnakeCase }}_FIXTURE_1))
            .isEqualTo({{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1)
    }

    @Test
    fun `update{{ namePascalCase }} delegates the call to the {{ namePascalCase }}Service`() {
        whenever({{ nameCamelCase }}Service.update(1, UPDATE_{{ nameScreamingSnakeCase }}_FIXTURE_1))
            .thenReturn({{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1)

        assertThat({{ nameCamelCase }}Resolver.update{{ namePascalCase }}(1, UPDATE_{{ nameScreamingSnakeCase }}_FIXTURE_1))
            .isEqualTo({{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1)
    }

    @Test
    fun `delete{{ namePascalCase }} delegates the call to the {{ namePascalCase }}Service`() {
        {{ nameCamelCase }}Resolver.delete{{ namePascalCase }}(1)

        verify({{ nameCamelCase }}Service).deleteById(1)
    }
{%if hasRelations%}
    @Nested
    inner class {{ namePascalCase }}QueryResolverUnitTests {

        @InjectMocks
        private lateinit var {{ nameCamelCase }}QueryResolver: {{ namePascalCase }}Resolver.{{ namePascalCase }}QueryResolver
{%for field in fields%}{%if field.isFieldRelational%}
        @Test
        fun `{{ field.fieldTypeCamelCase }} delegates the call to the {{ field.fieldTypeCamelCase }}ById dataloader`() {
            val dfe = mock<DgsDataFetchingEnvironment>()
            val dataLoader = mock<DataLoader<Int, {{ field.fieldTypePascalCase }}?>>()

            whenever(dfe.getArgument<{{ namePascalCase }}>("{{ nameCamelCase }}"))
                .thenReturn({{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1)

            whenever(dfe.getDataLoader<Int, {{ field.fieldTypePascalCase }}?>("{{ field.fieldTypeCamelCase }}ById"))
                .thenReturn(dataLoader)

            whenever(dataLoader.load({{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1.{{ field.fieldNameCamelCase }}))
                .thenReturn(completedFuture({{ field.fieldTypeScreamingSnakeCase }}_FIXTURE_WITH_ID_1))

            assertThat({{ nameCamelCase }}QueryResolver.{{ field.fieldTypeCamelCase }}(dfe).get())
                .isEqualTo({{ field.fieldTypeScreamingSnakeCase }}_FIXTURE_WITH_ID_1)
        }{%endif%}{%endfor%}
    }
{%endif%}{%for field in fields%}{%if field.isFieldRelational%}
    @Nested
    @ExtendWith(MockitoExtension::class)
    inner class {{ field.fieldTypePascalCase }}FieldResolverUnitTests {

        @InjectMocks
        private lateinit var {{ field.fieldTypeCamelCase }}FieldResolver: {{ namePascalCase }}Resolver.{{ field.fieldTypePascalCase }}FieldResolver

        @Test
        fun `{{ nameCamelCase }} delegates the call to the {{ nameCamelCase }}Service`() {
            val dfe = mock<DgsDataFetchingEnvironment>()
            val dataLoader = mock<DataLoader<Int, List<{{ namePascalCase }}>>>()

            val {{ field.fieldTypeCamelCase }} = {{ field.fieldTypeScreamingSnakeCase }}_FIXTURE_WITH_ID_1
                .copy(id = {{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1.{{ field.fieldNameCamelCase }})

            whenever(dfe.getArgument<{{ field.fieldTypePascalCase }}>("{{ field.fieldTypeCamelCase }}"))
                .thenReturn({{ field.fieldTypeCamelCase }})

            whenever(dfe.getDataLoader<Int, List<{{ namePascalCase }}>>("{{ namePluralCamelCase }}By{{ field.fieldNamePascalCase }}"))
                .thenReturn(dataLoader)

            whenever(dataLoader.load({{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1.{{ field.fieldNameCamelCase }}))
                .thenReturn(completedFuture(listOf({{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1)))

            assertThat({{ field.fieldTypeCamelCase }}FieldResolver.{{ namePluralCamelCase }}(dfe).get())
                .isEqualTo(listOf({{ field.fieldTypeScreamingSnakeCase }}_ITEM_FIXTURE_WITH_ID_1))
        }

    }
{%endif%}{%endfor%}
}
