package {{ groupId }}.{{ artifactId }}.domain.{{ nameLowerCase }}

import java.time.LocalDateTime
import java.time.OffsetDateTime
import java.time.ZoneId

object {{ namePascalCase }}Fixtures {

    val LOCAL_DATE_TIME_FIXTURE = LocalDateTime.now()
    val OFFSET_DATE_TIME_FIXTURE = LOCAL_DATE_TIME_FIXTURE
        .atZone(ZoneId.systemDefault())
        .toOffsetDateTime()

    val {{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1 = {{ namePascalCase }}(
        id = 1{%for field in fields%},
        {{ field.fieldNameCamelCase }} = {{ field.fieldKotlinTestDummyValue }}{%endfor%},
        createdAt = OFFSET_DATE_TIME_FIXTURE,
    )

    val {{ nameScreamingSnakeCase }}_ENTITY_FIXTURE_1 = {{ namePascalCase }}Entity(
        id = null{%for field in fields%},
        {{ field.fieldNameCamelCase }} = {{ field.fieldKotlinTestDummyValue }}{%endfor%}
    )

    val CREATE_{{ nameScreamingSnakeCase }}_FIXTURE_1 = {{ namePascalCase }}Service.Create{{ namePascalCase }}Input({%for field in fields%}
        {{ field.fieldNameCamelCase }} = {{ field.fieldKotlinTestDummyValue }},{%endfor%}
    )

    val UPDATE_{{ nameScreamingSnakeCase }}_FIXTURE_1 = {{ namePascalCase }}Service.Update{{ namePascalCase }}Input({%for field in fields%}
        {{ field.fieldNameCamelCase }} = {{ field.fieldKotlinTestDummyValue }},{%endfor%}
    )

    val {{ nameScreamingSnakeCase }}_ENTITY_FIXTURE_WITH_ID_1 = {{ nameScreamingSnakeCase }}_ENTITY_FIXTURE_1.copy(
        id = 1,
        createdAt = LOCAL_DATE_TIME_FIXTURE,
    )

}
