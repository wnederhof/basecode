package {{ groupId }}.{{ artifactId }}.application.security

import {{ groupId }}.{{ artifactId }}.domain.{{ nameLowerCase }}.{{ namePascalCase }}
import {{ groupId }}.{{ artifactId }}.domain.{{ nameLowerCase }}.{{ namePascalCase }}Service
import org.springframework.security.core.context.SecurityContextHolder
import org.springframework.security.core.userdetails.UserDetails
import org.springframework.security.core.userdetails.UserDetailsService
import org.springframework.security.core.userdetails.UsernameNotFoundException
import org.springframework.stereotype.Service
import org.springframework.transaction.annotation.Transactional

@Service
@Transactional
class UserAuthenticationService(
    private val {{ nameCamelCase }}Service: {{ namePascalCase }}Service,
) : UserDetailsService {

    fun currentUser(): {{ namePascalCase }}? {
        val context = SecurityContextHolder.getContext()
        val username = context.authentication?.name ?: return null
        return {{ nameCamelCase }}Service.findByUsername(username)
    }

    override fun loadUserByUsername(username: String): UserDetails {
        return {{ nameCamelCase }}Service.findUserDetailsByUsername(username)
            ?: throw UsernameNotFoundException("Username not found: $username")
    }

    fun logout() {
        SecurityContextHolder.getContext().authentication = null
    }

}
