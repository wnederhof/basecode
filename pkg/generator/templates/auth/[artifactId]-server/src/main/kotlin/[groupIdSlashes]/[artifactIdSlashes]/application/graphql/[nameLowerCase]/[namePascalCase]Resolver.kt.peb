package {{ groupId }}.{{ artifactId }}.application.graphql.{{ nameLowerCase }}

import {{ groupId }}.{{ artifactId }}.domain.{{ nameLowerCase }}.{{ namePascalCase }}
import {{ groupId }}.{{ artifactId }}.domain.{{ nameLowerCase }}.{{ namePascalCase }}Service
import {{ groupId }}.{{ artifactId }}.domain.{{ nameLowerCase }}.{{ namePascalCase }}Service.Update{{ namePascalCase }}Input
import {{ groupId }}.{{ artifactId }}.domain.{{ nameLowerCase }}.{{ namePascalCase }}Service.Register{{ namePascalCase }}Input{%if hasRelations%}
import {{ groupId }}.{{ artifactId }}.domain.{{ nameLowerCase }}.{{ namePascalCase }}Service.{{ namePascalCase }}FilterInput{%endif%}
{%for field in fields%}{%if field.isFieldRelational%}import {{ groupId }}.{{ artifactId }}.domain.{{ field.fieldTypeLowerCase }}.{{ field.fieldTypePascalCase }}
{%endif%}{%endfor%}import com.netflix.graphql.dgs.DgsComponent{%if hasRelations%}
import com.netflix.graphql.dgs.DgsData{%endif%}
import com.netflix.graphql.dgs.DgsQuery
import com.netflix.graphql.dgs.DgsMutation{%if hasRelations%}
import java.util.concurrent.CompletableFuture
import com.netflix.graphql.dgs.DgsDataFetchingEnvironment{%endif%}

@DgsComponent
class {{ namePascalCase }}Resolver(
    private val {{ nameCamelCase }}Service: {{ namePascalCase }}Service
) {

    @DgsQuery
    fun {{ nameCamelCase }}(id: Long): {{ namePascalCase }}? {
        return {{ nameCamelCase }}Service.findById(id)
    }

    @DgsQuery
    fun {{ namePluralCamelCase }}({%if hasRelations%}filter: {{ namePascalCase }}FilterInput?{%endif%}): Iterable<{{ namePascalCase }}> {
        return {{ nameCamelCase }}Service.findAll({%if hasRelations%}filter{%endif%})
    }

    @DgsMutation
    fun register{{ namePascalCase }}(input: Register{{ namePascalCase }}Input): {{ namePascalCase }} {
        return {{ nameCamelCase }}Service.register(input)
    }

    @DgsMutation
    fun update{{ namePascalCase }}(id: Long, input: Update{{ namePascalCase }}Input): {{ namePascalCase }}? {
        return {{ nameCamelCase }}Service.update(id, input)
    }

    @DgsMutation
    fun delete{{ namePascalCase }}(id: Long): Boolean {
        return {{ nameCamelCase }}Service.deleteById(id)
    }
{%for field in fields%}{%if field.isFieldRelational%}
    @DgsData(parentType = "{{ namePascalCase }}")
    fun {{ field.fieldTypeCamelCase }}(dfe: DgsDataFetchingEnvironment): CompletableFuture<{{ field.fieldTypePascalCase }}?> {
        val {{ nameCamelCase }} = dfe.getSource<{{ namePascalCase }}>()
        return dfe.getDataLoader<Long, {{ field.fieldTypePascalCase }}?>("{{ field.fieldTypeCamelCase }}ById")
            .load({{ nameCamelCase }}.{{ field.fieldNameCamelCase }})
    }

    @DgsData(parentType = "{{ field.fieldTypePascalCase }}", field = "{{ namePluralCamelCase }}")
    fun {{ namePluralCamelCase }}By{{ field.fieldTypePascalCase }}(dfe: DgsDataFetchingEnvironment): CompletableFuture<Iterable<{{ namePascalCase }}>> {
        val {{ field.fieldTypeCamelCase }} = dfe.getSource<{{ field.fieldTypePascalCase }}>()
        val {{ field.fieldNameCamelCase }} = {{ field.fieldTypeCamelCase }}.id ?: error("Expected id to be provided.")
        return dfe.getDataLoader<Long, Iterable<{{ namePascalCase }}>>("{{ namePluralCamelCase }}By{{ field.fieldNamePascalCase }}")
            .load({{ field.fieldNameCamelCase }})
            .thenApply { it ?: listOf() }
    }
{%endif%}{%endfor%}
}
