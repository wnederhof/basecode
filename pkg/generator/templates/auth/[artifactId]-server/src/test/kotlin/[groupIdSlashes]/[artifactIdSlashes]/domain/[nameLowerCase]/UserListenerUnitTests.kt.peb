{%if hasRelations%}package {{ groupId }}.{{ artifactId }}.domain.user

{%for field in fields%}{%if field.isFieldRelational%}import {{ groupId }}.{{ artifactId }}.domain.{{ field.fieldTypeLowerCase }}.{{ field.fieldTypePascalCase }}Event.{{ field.fieldTypePluralPascalCase }}DeletedEvent
{%endif%}{%endfor%}import org.mockito.kotlin.verify
import org.junit.jupiter.api.Test
{%for field in fields%}{%if field.isFieldRelational%}import {{ groupId }}.{{ artifactId }}.domain.{{ field.fieldTypeLowerCase }}.{{ field.fieldTypePascalCase }}Fixtures.{{ field.fieldTypeScreamingSnakeCase }}_FIXTURE_WITH_ID_1
{%endif%}{%endfor%}import org.junit.jupiter.api.extension.ExtendWith
import org.mockito.InjectMocks{%if hasRelations%}
import org.mockito.Mock{%endif%}
import org.mockito.junit.jupiter.MockitoExtension

@ExtendWith(MockitoExtension::class)
internal class UserListenerUnitTests{%if hasRelations%}{

    @Mock
    private lateinit var userService: UserService

    @InjectMocks
    private lateinit var userListener: UserListener
{%for field in fields%}{%if field.isFieldRelational%}
    @Test
    fun `When {{ field.fieldTypePluralPascalCase }}DeletedEvent is triggered, related Users are deleted`() {
        userListener.onEvent({{ field.fieldTypePluralPascalCase }}DeletedEvent(this, listOf({{ field.fieldTypeScreamingSnakeCase }}_FIXTURE_WITH_ID_1)))

        verify(userService).deleteBy{{ field.fieldNamePluralPascalCase }}(listOf({{ field.fieldTypeScreamingSnakeCase }}_FIXTURE_WITH_ID_1.id))
    }
{%endif%}{%endfor%}
}{%endif%}{%endif%}
