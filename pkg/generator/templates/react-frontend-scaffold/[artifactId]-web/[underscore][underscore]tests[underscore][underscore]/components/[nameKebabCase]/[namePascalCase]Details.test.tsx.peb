import { fireEvent, render, screen } from '@testing-library/react'
import { {{ namePascalCase }}Details } from '../../../src/components/app/{{ nameKebabCase }}/{{ namePascalCase }}Details'
import { Provider } from 'urql'
import { fromValue, never } from 'wonka'

describe('{{ namePascalCase }}Details', () => {
  const {{ nameCamelCase }} = {
    id: '1'{%for field in fields%},
    {{field.fieldNameCamelCase}}: {{field.fieldVueTypescriptTestValue}}{%endfor%}
  }

  it('renders details when data is fetched', () => {
    const mockClient: any = {
      executeQuery: () =>
        fromValue({
          data: { {{ nameCamelCase }} },
        }),
      executeMutation: jest.fn(),
      executeSubscription: jest.fn(),
    }
    render(
      <Provider value={mockClient}>
        <{{ namePascalCase }}Details id="1" />
      </Provider>
    ){%for field in fields%}
    expect(screen.getAllByText('' + {{ nameCamelCase }}.{{ field.fieldNameCamelCase }}).length).not.toBe(0){%endfor%}
  })

  it('calls history.back when Back is pressed', () => {
    const mockClient: any = {
      executeQuery: () =>
        fromValue({
          data: { {{ nameCamelCase }} },
        }),
      executeMutation: jest.fn(),
      executeSubscription: jest.fn(),
    }
    render(
      <Provider value={mockClient}>
        <{{ namePascalCase }}Details id="1" showBack />
      </Provider>
    )
    const backFn = jest.spyOn(history, 'back' as any).mockReturnValue(undefined)
    fireEvent(
      screen.queryByText('Back'),
      new MouseEvent('click', {
        bubbles: true,
        cancelable: true,
      })
    )
    expect(backFn).toBeCalled()
  })

  it('opens the edit modal when edit is clicked', () => {
    const mockClient: any = {
      executeQuery: () =>
        fromValue({
          data: { {{ nameCamelCase }} },
        }),
      executeMutation: jest.fn(),
      executeSubscription: jest.fn(),
    }
    render(
      <Provider value={mockClient}>
        <{{ namePascalCase }}Details id="1" showEdit />
      </Provider>
    )
    expect(screen.queryByText('Edit {{ namePascalCase }}')).toBeNull()
    fireEvent(
      screen.queryByText('Edit'),
      new MouseEvent('click', {
        bubbles: true,
        cancelable: true,
      })
    )
    expect(screen.queryByText('Edit {{ namePascalCase }}')).not.toBeNull()
  })
})
