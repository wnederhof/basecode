import { gql, OperationResult, useMutation, useQuery } from 'urql'
import { useMemo } from 'react'
import { Mutation, Query{%for field in fields%}{%if field.isFieldRelational%}, {{ field.fieldTypePascalCase }}{%endif%}{%endfor%} } from '@generated/graphql'
import { useFormik } from 'formik'
import { LoadingIndicator } from '@components/LoadingIndicator'

export interface {{ namePascalCase }}FormProps {
  id?: string | number{%for field in fields%}{%if field.isFieldRelational%}
  {{ field.fieldNameCamelCase }}?: string{%endif%}{%endfor%}
  onSave: () => void
  onCancel: () => void
}

interface {{ namePascalCase }}FormData {{ "{" }}{%for field in fields%}
  {{ field.fieldNameCamelCase }}: {%if field.fieldType == "INT" or field.fieldType == "NULL_INT"%}number{%elif field.fieldType == "BOOLEAN" or field.fieldType == "NULL_BOOLEAN"%}boolean{%elif field.fieldType == "RELATIONAL"%}number | string{%else%}string{%endif%} | undefined{%endfor%}
}

export function {{ namePascalCase }}Form(props: {{ namePascalCase }}FormProps) {
  const [, executeCreateMutation] = useMutation<Mutation>(gql`
    mutation create{{namePascalCase}}($input: Create{{namePascalCase}}Input!) {
      create{{namePascalCase}}(input: $input) {
        id
      }
    }
  `)

  const [, executeUpdateMutation] = useMutation<Mutation>(gql`
    mutation update{{namePascalCase}}($id: ID!, $input: Update{{namePascalCase}}Input!) {
      update{{namePascalCase}}(id: $id, input: $input) {
        id
      }
    }
  `)

  function handleMutationResult(result: OperationResult<Mutation>) {
    if (result.error) {
      alert(`An error occurred: ${result.error.message}`)
    }
    return !result.error
  }

  const doSubmit = (
    formData: {{ namePascalCase }}FormData
  ) => {
    if (props.id) {
      executeUpdateMutation({ id: props.id, input: formData })
        .then(result => handleMutationResult(result) && props.onSave())
        .catch((reason) => alert(`Updating {{ nameCamelCase }} failed. Reason: ${reason}`))
    } else {{ "{" }}{%if hasRelations%}
      const formDataWithRelations = { ...formData }{%endif%}{%for field in fields%}{%if field.isFieldRelational%}
      if (props.{{ field.fieldNameCamelCase }}) {
        formData{%if hasRelations%}WithRelations{%endif%}.{{  field.fieldNameCamelCase }} = props.{{ field.fieldNameCamelCase }}
      }{%endif%}{%endfor%}
      executeCreateMutation({ input: formData{%if hasRelations%}WithRelations{%endif%} })
        .then(result => handleMutationResult(result) && props.onSave())
        .catch((reason) => alert(`Creating {{ nameCamelCase }} failed. Reason: ${reason}`))
    }
  }

  const [{ data, error, fetching }] = useQuery<Query>({
    query: gql`
      query {{nameCamelCase}}Form($id: ID!) {
        {{nameCamelCase}}(id: $id) {
          id{%for field in fields%}
          {{field.fieldNameCamelCase}}{%endfor%}
        }
      }
    `,
    pause: !props.id,
    variables: { id: props.id },
    context: useMemo(
      () => ({
        additionalTypenames: ['{{namePascalCase}}'],
      }),
      []
    ),
  })
{%for field in fields%}{%if field.isFieldRelational%}
  const [{{ field.fieldTypePluralCamelCase }}QueryResult] = useQuery<Query>({
    query: gql`
      query {{field.fieldTypePluralCamelCase}}For{{ namePascalCase }}Options {
        {{field.fieldTypePluralCamelCase}} {
          id
        }
      }
    `,
    context: useMemo(
      () => ({
        additionalTypenames: ['{{field.fieldTypePascalCase}}'],
      }),
      []
    ),
  })
{%endif%}{%endfor%}
  if (fetching{%for field in fields%}{%if field.isFieldRelational%} || {{ field.fieldTypePluralCamelCase }}QueryResult.fetching{%endif%}{%endfor%}) {
    return <LoadingIndicator />
  }

  const errorMessage = error?.message{%for field in fields%}{%if field.isFieldRelational%} || {{ field.fieldTypePluralCamelCase }}QueryResult.error?.message{%endif%}{%endfor%}

  if (errorMessage) {
    return <div>{errorMessage}</div>
  }

  const formik = useFormik({
    initialValues: {{ "{" }}{%for field in fields%}
      {{ field.fieldNameCamelCase }}: data?.{{ nameCamelCase }}?.{{ field.fieldNameCamelCase }}{%if field.fieldType == "BOOLEAN" or field.fieldType == "NULL_BOOLEAN"%} || false{%endif%}{%if field.fieldType == "STRING" or field.fieldType == "NULL_STRING" or field.fieldType == "TEXT" or field.fieldType == "NULL_TEXT"%} || ''{%endif%},{%endfor%}
    },
    onSubmit: doSubmit
  })

  return (
    <form role="form" onSubmit={formik.handleSubmit}>{%for field in fields%}
      <div>
        <label htmlFor="{{ field.fieldNameCamelCase }}">{{ field.fieldNamePascalCase }}</label>{%if field.fieldType == "STRING" or field.fieldType == "NULL_STRING" %}
        <input name="{{ field.fieldNameCamelCase }}" type="text" onChange={formik.handleChange} value={formik.values.{{ field.fieldNameCamelCase }}{{ "}" }} />
{%elif field.fieldType == "INT" or field.fieldType == "NULL_INT" %}
        <input name="{{ field.fieldNameCamelCase }}" type="number" onChange={formik.handleChange} value={formik.values.{{ field.fieldNameCamelCase }}{{ "}" }} />
{%elif field.fieldType == "TEXT" or field.fieldType == "NULL_TEXT" %}
        <textarea name="{{ field.fieldNameCamelCase }}" onChange={formik.handleChange} value={formik.values.{{ field.fieldNameCamelCase }}{{ "}" }}  />
{%elif field.fieldType == "INT" or field.fieldType == "NULL_INT" %}
        <input name="{{ field.fieldNameCamelCase }}" type="number" />
{%elif field.fieldType == "DATE" or field.fieldType == "NULL_DATE" %}
        <input name="{{ field.fieldNameCamelCase }}" type="date"  onChange={formik.handleChange} value={formik.values.{{ field.fieldNameCamelCase }}{{ "}" }} />
{%elif field.fieldType == "BOOLEAN" or field.fieldType == "NULL_BOOLEAN" %}
        <input name="{{ field.fieldNameCamelCase }}" type="checkbox" onChange={formik.handleChange} value={formik.values.{{ field.fieldNameCamelCase }}{{ "}" }} />
{%elif field.fieldType == "RELATIONAL" %}
        {props.{{ field.fieldNameCamelCase }} ? <></> : <select name="{{ field.fieldNameCamelCase }}" onChange={formik.handleChange} value={formik.values.{{ field.fieldNameCamelCase }}{{ "}" }}>
          <option />
          {{ "{" }}{{ field.fieldTypePluralCamelCase }}QueryResult?.data?.{{ field.fieldTypePluralCamelCase }}?.map(({{ field.fieldTypeCamelCase }}: {{ field.fieldTypePascalCase }}) =>
            <option key={{ "{" }}{{ field.fieldTypeCamelCase }}.id} value={{ "{" }}{{ field.fieldTypeCamelCase }}.id}>{{ "{" }}{{ field.fieldTypeCamelCase }}.id}</option>
          )}
        </select>}
{%endif%}      </div>{%endfor%}
      <button type="submit">Save</button>
      <button type="button" onClick={props.onCancel}>Cancel</button>
    </form>
  )
}
