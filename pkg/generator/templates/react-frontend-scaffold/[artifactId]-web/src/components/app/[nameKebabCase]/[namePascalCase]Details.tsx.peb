import { gql, useQuery } from 'urql'
import { useMemo } from 'react'
import { Query } from '@generated/graphql'
import { LoadingIndicator } from '@components/LoadingIndicator'

export interface {{ namePascalCase }}DetailsProps {
  id: string | number
}

export function {{ namePascalCase }}Details(props: {{ namePascalCase }}DetailsProps) {
  const [{ data, error, fetching }] = useQuery<Query>({
    query: gql`query {{nameCamelCase}}Details($id: ID!) {
      {{nameCamelCase}}(id: $id) {
        id{%for field in fields%}
        {{field.fieldNameCamelCase}}{%endfor%}
        createdAt
        updatedAt
      }
    }`,
    variables: { id: props.id },
    context: useMemo(
      () => ({
        additionalTypenames: ['{{namePascalCase}}'],
      }),
      []
    ),
  })

  if (error?.message) {
    return <div>{error?.message}</div>
  }

  if (fetching || !data) {
    return <LoadingIndicator />
  }

  return (
    <table>
      <tbody>{%for field in fields%}{%if field.isFieldRelational%}{!props.{{ field.fieldNameCamelCase }} &&{%endif%}
        <tr>
          <td>{{ field.fieldNamePascalCase }}</td>
          <td>{{ "{" }}data?.{{ nameCamelCase }}?.{{ field.fieldNameCamelCase }}{%if field.fieldType == "BOOLEAN" or field.fieldType == "NULL_BOOLEAN"%} ? 'Yes' : 'No'{%endif%}{{ "}" }}</td>
        </tr>{%if field.isFieldRelational%}{{ "}" }}{%endif%}{%endfor%}
        <tr>
          <td>CreatedAt</td>
          <td>{{ "{" }}data?.{{ nameCamelCase }}?.createdAt{{ "}" }}</td>
        </tr>
        <tr>
          <td>UpdatedAt</td>
          <td>{{ "{" }}data?.{{ nameCamelCase }}?.updatedAt{{ "}" }}</td>
        </tr>
      </tbody>
    </table>
  )
}
