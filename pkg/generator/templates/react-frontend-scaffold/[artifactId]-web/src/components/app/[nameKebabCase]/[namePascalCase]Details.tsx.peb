import { Modal } from '@components/common/Modal'
import { DataDetails } from '@components/common/DataDetails'
import { gql, useQuery } from 'urql'
import { Section } from '@components/common/Section'
import { ReactNode, useMemo, useState } from 'react'
import { {{ namePascalCase }}Editor } from '@components/app/{{ nameKebabCase }}/{{ namePascalCase }}Editor'
import { Query, {{ namePascalCase }} } from '@generated/graphql'

export interface {{ namePascalCase }}DetailsProps {
  id: string | number{%for field in fields%}{%if field.isFieldRelational%}
  {{ field.fieldNameCamelCase }}?: string{%endif%}{%endfor%}
  showHeader?: boolean
  showEdit?: boolean
  showBack?: boolean
  children?: ReactNode
}

export function {{ namePascalCase }}Details(props: {{ namePascalCase }}DetailsProps) {
  const [showEditor, setShowEditor] = useState(false)
  const [{ data, error, fetching }] = useQuery<Query>({
    query: gql`query {{nameCamelCase}}Details($id: ID!) {
      {{nameCamelCase}}(id: $id) {
        id{%for field in fields%}
        {{field.fieldNameCamelCase}}{%endfor%}
      }
    }`,
    variables: { id: props.id },
    context: useMemo(
      () => ({
        additionalTypenames: ['{{namePascalCase}}'],
      }),
      []
    ),
  })
  return (
    <>
      <Section
        header={props.showHeader ? "{{namePascalCase}} Details" : undefined}
        onEdit={props.showEdit ? () => setShowEditor(true) : undefined}
        onBack={props.showBack ? () => history.back() : undefined}
      >
        <DataDetails
          fetching={fetching}
          errorMessage={error?.message}
          fields={[{%for field in fields%}
            {
              key: '{{ field.fieldNameCamelCase }}',
              label: '{{ field.fieldNamePascalCase }}',
              value: (data: {{ namePascalCase }}) => data.{{ field.fieldNameCamelCase }}{%if field.isFieldRelational%},
              hidden: !!props.{{ field.fieldNameCamelCase }}{%endif%}
            },{%endfor%}
          ]}
          value={data?.{{ nameCamelCase }}{{ "}" }}
        />
        {props.children}
      </Section>
      <Modal title="Edit {{namePascalCase}}" visible={{ "{" }}showEditor{{ "}" }}>
        <{{namePascalCase}}Editor
          id={props.id}{%for field in fields%}{%if field.isFieldRelational%}
          {{ field.fieldNameCamelCase }}={props.{{ field.fieldNameCamelCase }}{{ "}" }}{%endif%}{%endfor%}
          onSave={() => setShowEditor(false)}
          onCancel={() => setShowEditor(false)}
        />
      </Modal>
    </>
  )
}