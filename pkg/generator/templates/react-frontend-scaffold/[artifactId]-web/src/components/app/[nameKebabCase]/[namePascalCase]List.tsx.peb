import { askConfirmation, showError, showInfo } from '@lib/notifications'
import { Header } from '@components/Header'
import { gql, useMutation, useQuery } from 'urql'
import { useMemo } from 'react'
import { Mutation, Query } from '@generated/graphql'
import { Error } from '@components/Error'
import { Loader } from '@components/Loader'
import { List } from '@components/List'
{%if hasRelations%}
export interface {{ namePascalCase }}ListProps {{ "{" }}{%for field in fields%}{%if field.isFieldRelational%}
  {{ field.fieldNameCamelCase }}?: string{%endif%}{%endfor%}
}
{%endif%}
export function {{ namePascalCase }}List({%if hasRelations%}props: {{ namePascalCase }}ListProps{%endif%}) {
  const [, executeDeleteMutation] = useMutation<Mutation>(gql`
    mutation delete{{ namePascalCase }}($id: ID!) {
      delete{{ namePascalCase }}(id: $id)
    }
  `)

  const handleDelete = async (id: string) => {
    if (await askConfirmation('Are you sure you want to delete {{ namePascalCase }}?')) {
      try {
        await executeDeleteMutation(
          { id },
          { additionalTypenames: ['{{ namePascalCase }}'] }
        )
        showInfo('{{ namePascalCase }} deleted.')
      } catch(error) {
        showError(error)
      }
    }
  }

  const [{ data, error, fetching }] = useQuery<Query>({
    query: gql`
      query {{nameCamelCase}}List{%if hasRelations%}($filter: {{namePascalCase}}Filter){%endif%} {
        {{namePluralCamelCase}}{%if hasRelations%}(filter: $filter){%endif%} {
          id{%for field in fields%}
          {{field.fieldNameCamelCase}}{%endfor%}
        }
      }
    `,{%if hasRelations%}
    variables: {
      filter: {{ "{" }}{%for field in fields%}{%if field.isFieldRelational%}
        {{field.fieldNameCamelCase}}: props.{{field.fieldNameCamelCase}},{%endif%}{%endfor%}
      }
    },{%endif%}
    context: useMemo(
      () => ({
        additionalTypenames: ['{{namePascalCase}}'],
      }),
      []
    ),
  })

  if (fetching) {
    return <Loader />
  }

  if (error) {
    return <Error value={error} />
  }

  return (
    <>
      <Header level={1}>List of {{ namePluralPascalCase }}</Header>
      <List
        fields={[{%for field in fields%}
          {%if field.isFieldRelational%}!props.{{ field.fieldNameCamelCase }} ? {%endif%}{ render: values => values.{{ field.fieldNameCamelCase }}, label: '{{ field.fieldNamePascalCase }}' }{%if field.isFieldRelational%} : undefined {%endif%},{%endfor%}
        ]}
        data={data?.{{namePluralCamelCase}}{{ "}" }}
        actions={values => ({
          showHref: `/{{ namePluralKebabCase }}/${values.id}`,
          editHref: `/{{ namePluralKebabCase }}/${values.id}/edit`,
          onDeleteClick: () => handleDelete(values.id),
        })}
      />
    </>
  )
}
