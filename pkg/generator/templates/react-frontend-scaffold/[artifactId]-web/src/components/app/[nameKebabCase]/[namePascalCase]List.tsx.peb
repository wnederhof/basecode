import { DataList } from '@components/shared/DataList'
import { gql, useMutation, useQuery } from 'urql'
import { ActionSection } from '@components/shared/ActionSection'
import { Modal } from '@components/shared/Modal'
import { ReactNode, useMemo, useState } from 'react'
import { {{namePascalCase}}Editor } from '@components/app/{{ nameKebabCase }}/{{namePascalCase}}Editor'
import { Mutation, Query, {{ namePascalCase }} } from '@generated/graphql'

export interface {{ namePascalCase }}EditorState {
  show: boolean
  id?: string
}

export interface {{ namePascalCase }}ListProps {
  showHeader?: boolean{%for field in fields%}{%if field.isFieldRelational%}
  {{ field.fieldNameCamelCase }}?: string{%endif%}{%endfor%}
  children?: ReactNode
}

export function {{ namePascalCase }}List(props: {{ namePascalCase }}ListProps) {
  const [, executeDeleteMutation] = useMutation<Mutation>(gql`
    mutation delete{{ namePascalCase }}($id: ID!) {
      delete{{ namePascalCase }}(id: $id)
    }
  `)
  const delete{{ namePascalCase }} = (id: string) => {
    executeDeleteMutation(
      { id },
      { additionalTypenames: ['{{ namePascalCase }}'] }
    ).catch((reason) => alert(`Deleting {{ namePascalCase }} failed. Reason: ${reason}`))
  }
  const [editorState, setEditorState] = useState<{{ namePascalCase }}EditorState>({
    show: false
  })
  const [{ data, error, fetching }] = useQuery<Query>({
    query: gql`
      {%if hasRelations%}query {{nameCamelCase}}List($filter: {{namePascalCase}}Filter) {%endif%}{
        {{namePluralCamelCase}}{%if hasRelations%}(filter: $filter){%endif%} {
          id{%for field in fields%}
          {{field.fieldNameCamelCase}}{%endfor%}
        }
      }
    `,{%if hasRelations%}
    variables: {
      filter: {{ "{" }}{%for field in fields%}{%if field.isFieldRelational%}
        {{field.fieldNameCamelCase}}: props.{{field.fieldNameCamelCase}},{%endif%}{%endfor%}
      }
    },{%endif%}
    context: useMemo(
      () => ({
        additionalTypenames: ['{{namePascalCase}}'],
      }),
      []
    ),
  })
  return (
    <ActionSection
      header={props.showHeader ? '{{namePascalCase}} Overview' : undefined}
      onNew={() => setEditorState({ show: true })}
    >
      <DataList
        primaryKey={row => row.id}
        fields={[{%for field in fields%}
          {
            key: '{{ field.fieldNameCamelCase }}',
            label: '{{ field.fieldNamePascalCase }}',
            value: (data: {{ namePascalCase }}) => data.{{ field.fieldNameCamelCase }}{%if field.isFieldRelational%},
            hidden: !!props.{{ field.fieldNameCamelCase }}{%endif%}
          },{%endfor%}
        ]}
        errorMessage={error?.message}
        fetching={fetching}
        rows={data?.{{namePluralCamelCase}}{{ "}" }}
        showUrl={(row: {{ namePascalCase }}) => `/{{ namePluralKebabCase }}/${row.id}`}
        onEdit={(row: {{ namePascalCase }}) => setEditorState({ show: true, id: row.id })}
        onDelete={(row: {{ namePascalCase }}) => delete{{namePascalCase}}(row.id)}
      />
      {props.children}
      <Modal
        title={editorState.id ? "Edit {{namePascalCase}}" : "New {{namePascalCase}}"}
        visible={{ "{" }}editorState.show{{ "}" }}
      >
        <{{namePascalCase}}Editor
          key={editorState.id}
          id={editorState.id}{%for field in fields%}{%if field.isFieldRelational%}
          {{ field.fieldNameCamelCase }}={props.{{ field.fieldNameCamelCase }}{{ "}" }}{%endif%}{%endfor%}
          onSave={() => setEditorState({ show: false })}
          onCancel={() => setEditorState({ show: false })}
        />
      </Modal>
    </ActionSection>
  )
}