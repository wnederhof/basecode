import Link from 'next/link'
import { gql, useMutation, useQuery } from 'urql'
import { useMemo } from 'react'
import { Mutation, Query } from '@generated/graphql'
import { LoadingIndicator } from '@components/common/LoadingIndicator'
import { ErrorMessage } from '@components/common/ErrorMessage'

export interface {{ namePascalCase }}ListProps {{ "{" }}{%for field in fields%}{%if field.isFieldRelational%}
  {{ field.fieldNameCamelCase }}?: string{%endif%}{%endfor%}
}

export function {{ namePascalCase }}List(props: {{ namePascalCase }}ListProps) {
  const [, executeDeleteMutation] = useMutation<Mutation>(gql`
    mutation delete{{ namePascalCase }}($id: ID!) {
      delete{{ namePascalCase }}(id: $id)
    }
  `)

  const handleDelete = (id: string) => {
    confirm("Are you sure you want to delete {{ namePascalCase }}?") &&
      executeDeleteMutation(
        { id },
        { additionalTypenames: ['{{ namePascalCase }}'] }
      ).catch((reason) => alert(`Deleting {{ namePascalCase }} failed. Reason: ${reason}`))
  }

  const [{ data, error, fetching }] = useQuery<Query>({
    query: gql`
      {%if hasRelations%}query {{nameCamelCase}}List($filter: {{namePascalCase}}Filter) {%endif%}{
        {{namePluralCamelCase}}{%if hasRelations%}(filter: $filter){%endif%} {
          id{%for field in fields%}
          {{field.fieldNameCamelCase}}{%endfor%}
        }
      }
    `,{%if hasRelations%}
    variables: {
      filter: {{ "{" }}{%for field in fields%}{%if field.isFieldRelational%}
        {{field.fieldNameCamelCase}}: props.{{field.fieldNameCamelCase}},{%endif%}{%endfor%}
      }
    },{%endif%}
    context: useMemo(
      () => ({
        additionalTypenames: ['{{namePascalCase}}'],
      }),
      []
    ),
  })

  if (fetching) {
    return <LoadingIndicator />
  }

  if (error?.message) {
    return <ErrorMessage message={error?.message} />
  }

  return (
    <>
      <div>
        <Link href={`/{{ namePluralKebabCase }}/new`}>New</Link>
      </div>
      <table>
        <thead>
        <tr>{%for field in fields%}{%if field.isFieldRelational%}{ !props.{{ field.fieldNameCamelCase }} &&{%endif%}
          <th>{{ field.fieldNamePascalCase }}</th>{%if field.isFieldRelational%}{{ "}" }}{%endif%}{%endfor%}
          <th>Action</th>
        </tr>
        </thead>
        <tbody>{data?.{{ namePluralCamelCase }}?.map(row =>
          <tr key={row.id}>{%for field in fields%}{%if field.isFieldRelational%}{!props.{{ field.fieldNameCamelCase }} &&{%endif%}
            <td>{row.{{ field.fieldNameCamelCase }}}</td>{%if field.isFieldRelational%}{{ "}" }}{%endif%}{%endfor%}
            <td>
              <Link href={`/{{ namePluralKebabCase }}/${row.id}`}>Show</Link>
              <Link href={`/{{ namePluralKebabCase }}/${row.id}/edit`}>Edit</Link>
              <button onClick={() => handleDelete(row.id)}>Delete</button>
            </td>
          </tr>)
        }</tbody>
      </table>
    </>
  )
}