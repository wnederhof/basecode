import { DataForm, DataFormFieldType } from '@components/shared/DataForm'
import { gql, useMutation, useQuery } from 'urql'
import { useMemo } from 'react'
import { ActionSection } from '@components/shared/ActionSection'
import { Mutation, Query } from '@generated/graphql'

export interface {{ namePascalCase }}EditorProps {
  id?: string{%for field in fields%}{%if field.isFieldRelational%}
  {{ field.fieldNameCamelCase }}?: string{%endif%}{%endfor%}
  showHeader?: boolean
  onSave: () => void
  onCancel: () => void
}

export function {{ namePascalCase }}Editor(props: {{ namePascalCase }}EditorProps) {
  const [, executeCreateMutation] = useMutation<Mutation>(gql`
    mutation create{{namePascalCase}}($input: Create{{namePascalCase}}Input!) {
      create{{namePascalCase}}(input: $input) {
        id
      }
    }
  `)
  const [, executeUpdateMutation] = useMutation<Mutation>(gql`
    mutation update{{namePascalCase}}($id: ID!, $input: Update{{namePascalCase}}Input!) {
      update{{namePascalCase}}(id: $id, input: $input) {
        id
      }
    }
  `)
  const doSubmit = (formData: any) => {
    if (props.id) {
      executeUpdateMutation({ id: props.id, input: formData })
        .then(() => props.onSave())
        .catch((reason) => alert(`Updating {{ nameCamelCase }} failed. Reason: ${reason}`))
    } else {
      {%if hasRelations%}const formDataWithRelations = {
        {%for field in fields%}{%if field.isFieldRelational%}{{ field.fieldNameCamelCase }}: props.{{ field.fieldNameCamelCase }},
        {%endif%}{%endfor%}...formData
      }
      {%endif%}executeCreateMutation({ input: formData{%if hasRelations%}WithRelations{%endif%} })
        .then(() => props.onSave())
        .catch((reason) => alert(`Creating {{ nameCamelCase }} failed. Reason: ${reason}`))
    }
  }
  const [{ data, error, fetching }] = useQuery<Query>({
    query: gql`
      query {{nameCamelCase}}($id: ID!) {
        {{nameCamelCase}}(id: $id) {
          id{%for field in fields%}
          {{field.fieldNameCamelCase}}{%endfor%}
        }
      }
    `,
    pause: !props.id,
    variables: { id: props.id },
    context: useMemo(
      () => ({
        additionalTypenames: ['{{namePascalCase}}'],
      }),
      []
    ),
  }){%for field in fields%}{%if field.isFieldRelational%}
  const [{{ field.fieldTypePluralCamelCase }}QueryResult] = useQuery<Query>({
    query: gql`
      query {{field.fieldTypePluralCamelCase}}For{{ namePascalCase }}Options {
        {{field.fieldTypePluralCamelCase}} {
          id
        }
      }
    `,
    context: useMemo(
      () => ({
        additionalTypenames: ['{{field.fieldTypePascalCase}}'],
      }),
      []
    ),
  }){%endif%}{%endfor%}
  return (
    <ActionSection header={props.showHeader ? "{{namePascalCase}} Details" : undefined}>
      <DataForm
        errorMessage={error?.message{%for field in fields%}{%if field.isFieldRelational%} || {{ field.fieldTypePluralCamelCase }}QueryResult.error?.message{%endif%}{%endfor%}}
        fetching={fetching{%for field in fields%}{%if field.isFieldRelational%} || {{ field.fieldTypePluralCamelCase }}QueryResult.fetching{%endif%}{%endfor%}}
        fields={[{%for field in fields%}
          {
            name: '{{ field.fieldNameCamelCase }}',
            label: '{{ field.fieldNamePascalCase }}',
            type: DataFormFieldType.{{ field.fieldInputType }}{% if field.isFieldRelational %},
            hidden: props.{{ field.fieldNameCamelCase }}
            options: {{ field.fieldTypePluralCamelCase }}QueryResult?.data?.{{ field.fieldTypePluralCamelCase }}?.map(({{ field.fieldTypeCamelCase }}: any) => {
              return {label: {{ field.fieldTypeCamelCase }}.id, value: {{ field.fieldTypeCamelCase }}.id}
            }){%endif%}
          },{%endfor%}
        ]
        value={data?.{{ nameCamelCase }}{{ "}" }}
        onSubmit={doSubmit}
        onCancel={props.onCancel}
      />
    </ActionSection>
  )
}
