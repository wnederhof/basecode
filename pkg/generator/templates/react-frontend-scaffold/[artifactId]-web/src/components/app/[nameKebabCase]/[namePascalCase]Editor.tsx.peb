import { DataForm, DataFormField, DataFormFieldType } from '@components/shared/DataForm'
import { ErrorMessage } from '@components/shared/ErrorMessage'
import { gql, useQuery, useMutation } from 'urql'
import { useMemo } from "react";
import { ActionSection } from '@components/shared/ActionSection'
import { LoadingIndicator } from '@components/shared/LoadingIndicator'

export interface {{ namePascalCase }}EditorProps {
  id?: string{%for field in fields%}{%if field.isFieldRelational%}
  {{ field.fieldNameCamelCase }}?: string{%endif%}{%endfor%}
  showHeader?: boolean
  onSave: () => void
  onCancel: () => void
}

export function {{ namePascalCase }}Editor(props: {{ namePascalCase }}EditorProps) {
  const [, executeCreateMutation] = useMutation(gql`
    mutation create{{namePascalCase}}($input: Create{{namePascalCase}}Input!) {
      create{{namePascalCase}}(input: $input) {
        id
      }
    }`
  )
  const [, executeUpdateMutation] = useMutation(gql`
    mutation update{{namePascalCase}}($id: ID!, $input: Update{{namePascalCase}}Input!) {
      update{{namePascalCase}}(id: $id, input: $input) {
        id
      }
    }`
  )
  const doSubmit = (formData: any) => {
    if (props.id) {
      executeUpdateMutation({id: props.id, input: formData})
        .then(() => props.onSave())
        .catch(_reason => alert('Update failed.'))
    } else {
      executeCreateMutation({input: formData})
        .then(() => props.onSave())
        .catch(_reason => alert('Create failed.'))
    }
  }
  const [{ data, error, fetching }] = useQuery({
    query: gql`query {{nameCamelCase}}($id: ID!) {
      {{nameCamelCase}}(id: $id) {
        id{%for field in fields%}
        {{field.fieldNameCamelCase}}{%endfor%}
      }
    }`,
    pause: !props.id,
    variables: { id: props.id },
    context: useMemo(() => ({
      additionalTypenames: ['{{namePascalCase}}'],
    }), []),
  })
  if (error) {
    return (
      <ErrorMessage message={`Unable to load {{ namePluralCamelCase }}. Cause: ${error.message}`} />
    )
  }
  if (fetching) {
    return <LoadingIndicator />
  }{%for field in fields%}{%if field.isFieldRelational%}
  const [{{ field.fieldTypePluralCamelCase }}QueryResult] = useQuery({
    query: gql`query {{field.fieldTypePluralCamelCase}} {
      {{field.fieldTypePluralCamelCase}} {
        id
      }
    }`,
    context: useMemo(() => ({
      additionalTypenames: ['{{field.fieldTypePascalCase}}'],
    }), []),
  })
  if ({{ field.fieldTypePluralCamelCase }}QueryResult.error) {
    return (
      <ErrorMessage message={`Unable to load {{ field.fieldTypePluralCamelCase }}. Cause: ${{{ field.fieldTypePluralCamelCase }}QueryResult.error.message}`} />
    )
  }
  if ({{ field.fieldTypePluralCamelCase }}QueryResult.fetching) {
    return <LoadingIndicator />
  }{%endif%}{%endfor%}
  const fields: DataFormField[] = [{%for field in fields%}
    {
      name: '{{ field.fieldNameCamelCase }}',
      label: '{{ field.fieldNamePascalCase }}',
      type: DataFormFieldType.{{ field.fieldInputType }}{% if field.isFieldRelational %},
      options: {{ field.fieldTypePluralCamelCase }}QueryResult.data.{{ field.fieldTypePluralCamelCase }}.map(({{ field.fieldTypeCamelCase }}: any) => {
        return {label: {{ field.fieldTypeCamelCase }}.id, value: {{ field.fieldTypeCamelCase }}.id}
      }){%endif%}
    },{%endfor%}
  ].filter(elem => !(props as any)[elem.name])
  if (props.id && !data) return <></>
  return (
    <ActionSection
      header={props.showHeader ? "{{namePascalCase}} Details" : undefined}
    >
      <DataForm
        fields={fields}
        value={data?.{{ nameCamelCase }}{{ "}" }}
        onSubmit={doSubmit}
        onCancel={props.onCancel}
      />
    </ActionSection>
  )
}
