import { DataForm } from '@components/common/DataForm'
import { ErrorMessage } from '@components/common/ErrorMessage'
import { gql, useQuery, useMemo } from 'urql'
import { ActionSection } from "@components/common/ActionSection";

function doSubmit() {
  // TODO
}

export function {{ namePascalCase }}Editor(props: any) {
  const [showEditor, setShowEditor] = useState(false)
  const [{ data, error }] = useQuery({
    query: gql`query {{nameCamelCase}}($id: ID!) {
      {{nameCamelCase}}: {{nameCamelCase}}(id: $id) {
        id{%for field in fields%}
        {{field.fieldNameCamelCase}}{%endfor%}
      }
    }`,
    pause: !props.id,
    context: useMemo(() => ({
      additionalTypeNames: ['{{namePascalCase}}'],
    }), []),
  })
  if (error) {
    return (
      <ErrorMessage message={`Unable to load {{ namePluralCamelCase }}. Cause: ${error.message}`} />
    )
  }

  const fields = [
    {
      name: 'id',
      type: DataFormFieldType.ID,
    },{%for field in fields%}
    {
      name: '{{ field.fieldNameCamelCase }}',
      label: '{{ field.fieldNamePascalCase }}',
      type: DataFormFieldType.{{ field.fieldInputType }}{% if field.isFieldRelational %},
      options: this.{{ field.fieldTypePluralCamelCase }}.map(({{ field.fieldTypeCamelCase }}: any) => {
        return {label: {{ field.fieldTypeCamelCase }}.id, value: {{ field.fieldTypeCamelCase }}.id}
      }){%endif%}
    },{%endfor%}
  ].filter((elem) => !props[elem.name])

  return (
    <ActionSection
      header={props.showHeader ? "{{namePascalCase}} Details" : undefined}
      onEdit={() => setShowEditor(true)}
    >
      <DataForm
        fields={fields}
        value={data}
        onSubmit={doSubmit}
        onCancel={props.onCancel}
      />

      <Modal
        title="Edit {{namePascalCase}}"
        visible={showEditor}
      >
        <{{ namePascalCase }}Editor
          id={props.id}
          onSave={() => setShowEditor(false)}
          onCancel={() => setShowEditor(false)}
        />
      </Modal>
    </ActionSection>
  )
}
