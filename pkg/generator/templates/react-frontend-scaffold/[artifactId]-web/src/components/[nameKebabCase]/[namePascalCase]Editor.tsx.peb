import { DataForm, DataFormField, DataFormFieldType } from '@components/common/DataForm'
import { ErrorMessage } from '@components/common/ErrorMessage'
import { gql, useQuery, useMemo } from 'urql'
import { useMemo } from "react";
import { ActionSection } from "@components/common/ActionSection";

export interface {{ namePascalCase }}EditorProps {
  id?: string
  showHeader?: boolean
  onSave: () => void
  onCancel: () => void
}

export function {{ namePascalCase }}Editor(props: {{ namePascalCase }}EditorProps) {
  const doSubmit = () => {
    // TODO
    props.onSave()
  }
  const [{ data, error }] = useQuery({
    query: gql`query {{nameCamelCase}}($id: ID!) {
      {{nameCamelCase}}: {{nameCamelCase}}(id: $id) {
        id{%for field in fields%}
        {{field.fieldNameCamelCase}}{%endfor%}
      }
    }`,
    pause: !props.id,
    context: useMemo(() => ({
      additionalTypeNames: ['{{namePascalCase}}'],
    }), []),
  })
  if (error) {
    return (
      <ErrorMessage message={`Unable to load {{ namePluralCamelCase }}. Cause: ${error.message}`} />
    )
  }
  const field: DataFormField[]s = [
    {
      name: 'id',
      type: DataFormFieldType.ID,
    },{%for field in fields%}
    {
      name: '{{ field.fieldNameCamelCase }}',
      label: '{{ field.fieldNamePascalCase }}',
      type: DataFormFieldType.{{ field.fieldInputType }}{% if field.isFieldRelational %},
      options: this.{{ field.fieldTypePluralCamelCase }}.map(({{ field.fieldTypeCamelCase }}: any) => {
        return {label: {{ field.fieldTypeCamelCase }}.id, value: {{ field.fieldTypeCamelCase }}.id}
      }){%endif%}
    },{%endfor%}
  ].filter((elem) => !props[elem.name])
  return (
    <ActionSection
      header={props.showHeader ? "{{namePascalCase}} Details" : undefined}
    >
      <DataForm
        fields={fields}
        value={data}
        onSubmit={doSubmit}
        onCancel={props.onCancel}
      />
    </ActionSection>
  )
}
