import { Modal } from '@components/common/Modal'
import { DataDetails, DataDetailsField } from '@components/common/DataDetails'
import { ErrorMessage } from '@components/common/ErrorMessage'
import { gql, useQuery } from 'urql'
import { ActionSection } from "@components/common/ActionSection";
import { useState, useMemo, ReactNode } from 'react'
import { {{ namePascalCase }}Editor } from '@components/{{ nameCamelCase }}/{{ namePascalCase }}Editor'
import { LoadingIndicator } from '@components/common/LoadingIndicator'

const fields: DataDetailsField[] = [{%for field in fields%}
  {
    key: '{{ field.fieldNameCamelCase }}',
    label: '{{ field.fieldNamePascalCase }}',
    value: (data: any) => data.{{ field.fieldNameCamelCase }}
  },{%endfor%}
]

export interface {{ namePascalCase }}DetailsProps {
  id: string
  showHeader?: boolean
  showEdit?: boolean
  showBack?: boolean
  children?: ReactNode
}

export function {{ namePascalCase }}Details(props: {{ namePascalCase }}DetailsProps) {
  const [showEditor, setShowEditor] = useState(false)
  const [{ data, error, fetching }] = useQuery({
    query: gql`query {{nameCamelCase}}($id: ID!) {
      {{nameCamelCase}}: {{nameCamelCase}}(id: $id) {
        id{%for field in fields%}
        {{field.fieldNameCamelCase}}{%endfor%}
      }
    }`,
    variables: { id: props.id },
    context: useMemo(() => ({
      additionalTypenames: ['{{namePascalCase}}'],
    }), []),
  })
  if (error) {
    return (
      <ErrorMessage message={`Unable to load {{ namePluralCamelCase }}. Cause: ${error.message}`} />
    )
  }
  if (fetching) {
    return <LoadingIndicator />
  }
  return (
    <ActionSection
      header={props.showHeader ? "{{namePascalCase}} Details" : undefined}
      onEdit={props.showEdit && () => setShowEditor(true)}
      onBack={props.showBack && () => history.back()}
    >
      <DataDetails
        fields={fields}
        value={data.{{ nameCamelCase }}{{ "}" }}
      />
      {props.children}
      <Modal
        title="Edit {{namePascalCase}}"
        visible={{ "{" }}showEditor{{ "}" }}
      >
        <{{namePascalCase}}Editor
          id={props.id}{%for field in fields%}{%if field.isFieldRelational%}
          {{ field.fieldNameKebabCase }}={props.{{ field.fieldNameCamelCase }}{{ "}" }}{%endif%}{%endfor%}
          onSave={() => setShowEditor(false)}
          onCancel={() => setShowEditor(false)}
        />
      </Modal>
    </ActionSection>
  )
}