import { DataList } from '@components/common/DataList'
import { ErrorMessage } from '@components/common/ErrorMessage'
import { gql, useQuery, useMutation } from 'urql'
import { ActionSection } from '@components/common/ActionSection'
import { Modal } from '@components/common/Modal'
import { useState, useMemo, ReactNode } from 'react'
import { {{namePascalCase}}Editor } from '@components/{{ nameCamelCase }}/{{namePascalCase}}Editor'

export interface {{ namePascalCase }}EditorState {
  show: boolean
  id?: string
}

export interface {{ namePascalCase }}ListProps {
  showHeader?: boolean
  children?: ReactNode
}

export function {{ namePascalCase }}List(props: {{ namePascalCase }}ListProps) {
  const [, executeDeleteMutation] = useMutation(gql`
    mutation delete{{ namePascalCase }}($id: ID!) {
      delete{{ namePascalCase }}(id: $id)
    }`
  )
  const delete{{ namePascalCase }} = (id: string) => {
    executeDeleteMutation({id}, {additionalTypenames: ['{{ namePascalCase }}']})
      .catch(_reason => alert('Update failed.'))
  }
  const [editorState, setEditorState] = useState<{{ namePascalCase }}EditorState>({ show: false })
  const [{ data, error }] = useQuery({
    query: gql`{
      {{namePluralCamelCase}} {
        id{%for field in fields%}
        {{field.fieldNameCamelCase}}{%endfor%}
      }
    }`,
    context: useMemo(() => ({
      additionalTypenames: ['{{namePascalCase}}'],
    }), []),
  })
  if (error) {
    return (
      <ErrorMessage message={`Unable to load {{ namePluralCamelCase }}. Cause: ${error.message}`} />
    )
  }
  if (!data) {
    return null
  }
  const fields = [{%for field in fields%}
    {
      key: '{{ field.fieldNameCamelCase }}',
      label: '{{ field.fieldNamePascalCase }}',
      value: (data: any) => data.{{ field.fieldNameCamelCase }}
    },{%endfor%}
  ].filter((elem) => !(props as any)[elem.key])
  return (
    <ActionSection
      header={props.showHeader ? '{{namePascalCase}} Details' : undefined}
      onNew={() => setEditorState({ show: true })}
    >
      <DataList
        primaryKey="id"
        fields={fields}
        rows={data.{{namePluralCamelCase}}{{ "}" }}
        showUrl={(row: any) => '/{{ namePluralKebabCase }}/' + row.id}
        onEdit={(row: any) => setEditorState({ show: true, id: row.id })}
        onDelete={(row: any) => delete{{namePascalCase}}(row.id)}
      />
      {props.children}
      <Modal
        title="Edit {{namePascalCase}}"
        visible={{ "{" }}editorState.show{{ "}" }}
      >
        <{{namePascalCase}}Editor
          key={editorState.id}
          id={editorState.id}{%for field in fields%}{%if field.isFieldRelational%}
          {{ field.fieldNameKebabCase }}={props.{{ field.fieldNameCamelCase }}{{ "}" }}{%endif%}{%endfor%}
          onSave={() => setEditorState({ show: false })}
          onCancel={() => setEditorState({ show: false })}
        />
      </Modal>
    </ActionSection>
  )
}