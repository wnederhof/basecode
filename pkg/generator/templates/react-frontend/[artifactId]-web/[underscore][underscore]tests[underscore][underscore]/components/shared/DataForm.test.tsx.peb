import { fireEvent, render, screen } from '@testing-library/react'
import {
  DataForm,
  DataFormField,
  DataFormFieldType,
} from '@components/shared/DataForm'

const allTypes = [
  DataFormFieldType.RELATIONAL,
  DataFormFieldType.RELATIONAL_OPTIONAL,
  DataFormFieldType.STRING,
  DataFormFieldType.STRING_OPTIONAL,
  DataFormFieldType.TEXT,
  DataFormFieldType.TEXT_OPTIONAL,
  DataFormFieldType.DATE,
  DataFormFieldType.DATE_OPTIONAL,
  DataFormFieldType.DATETIME,
  DataFormFieldType.DATETIME_OPTIONAL,
  DataFormFieldType.INT,
  DataFormFieldType.INT_OPTIONAL,
]

interface ExampleType {
  name: string
}

const exampleFields: DataFormField<ExampleType>[] = [
  {
    name: 'name',
    type: DataFormFieldType.STRING,
    label: 'Name',
    value: (row: ExampleType) => row.name,
  },
]

const exampleValue: ExampleType = {
  name: 'John Doe',
}

describe('DataForm', () => {
  it('shows loading indicator if fetching is true', () => {
    const example: ExampleType = {
      name: 'John Doe',
    }
    render(
      <DataForm
        fields={exampleFields}
        defaultValue={example}
        fetching={true}
        onSubmit={jest.fn()}
        onCancel={jest.fn()}
      />
    )
    expect(screen.getByTestId('loadingIndicator')).not.toBeNull()
  })

  it('shows error message if errorMessage is provided', () => {
    const example: ExampleType = {
      name: 'John Doe',
    }
    render(
      <DataForm
        fields={exampleFields}
        defaultValue={example}
        errorMessage={'Some Error Message'}
        onSubmit={jest.fn()}
        onCancel={jest.fn()}
      />
    )
    expect(screen.getByText('Some Error Message')).not.toBeNull()
  })

  it('renders exampleFields with values', () => {
    render(
      <DataForm
        fields={exampleFields}
        defaultValue={exampleValue}
        onSubmit={jest.fn()}
        onCancel={jest.fn()}
      />
    )
    expect(screen.queryByText('Name')).not.toBeNull()
    expect(screen.queryByRole('textbox')).toContainHTML('John Doe')
  })

  allTypes.forEach((type) => {
    it('renders for this type of field', () => {
      expect(() =>
        render(
          <DataForm
            fields={[
              {
                name: 'name',
                type,
                label: 'Name',
                value: (row: ExampleType) => row.name,
              },
            ]}
            defaultValue={exampleValue}
            onSubmit={jest.fn()}
            onCancel={jest.fn()}
          />
        )
      ).not.toThrow()
    })
  })

  it('submits when Submit is clicked', () => {
    const example: ExampleType = {
      name: 'John Doe',
    }
    const submitFn = jest.fn()
    render(
      <DataForm
        fields={exampleFields}
        defaultValue={example}
        onSubmit={submitFn}
        onCancel={jest.fn()}
      />
    )
    fireEvent(screen.getByText('Save'), new MouseEvent('click'))
    expect(submitFn).toBeCalledWith({
      name: 'John Doe',
    })
  })

  it('cancels when Cancel is clicked', () => {
    const example: ExampleType = {
      name: 'John Doe',
    }
    const cancelFn = jest.fn()
    render(
      <DataForm
        fields={exampleFields}
        defaultValue={example}
        onSubmit={jest.fn()}
        onCancel={cancelFn}
      />
    )
    fireEvent(
      screen.getByText('Cancel'),
      new MouseEvent('click', {
        bubbles: true,
        cancelable: true,
      })
    )
    expect(cancelFn).toBeCalled()
  })
})
