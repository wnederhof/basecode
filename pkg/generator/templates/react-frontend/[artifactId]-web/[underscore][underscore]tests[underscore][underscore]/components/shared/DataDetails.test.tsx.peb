import { render, screen } from '@testing-library/react'
import {
  DataDetails,
  DataDetailsField,
} from '@components/shared/DataDetails'

interface ExampleType {
  name: string
}

const fields: DataDetailsField<ExampleType>[] = [
  {
    key: 'name',
    label: 'Name',
    value: (data) => data.name,
  },
]

describe('DataDetails', () => {
  it('shows loading indicator if fetching is true', () => {
    const example = {
      id: 1,
      name: 'John Doe',
    }
    render(<DataDetails fields={fields} value={example} fetching={true} />)
    expect(screen.getByTestId('loadingIndicator')).not.toBeNull()
  })

  it('shows error message if errorMessage is provided', () => {
    const example = {
      name: 'John Doe',
    }
    render(
      <DataDetails
        fields={fields}
        value={example}
        errorMessage={'Some Error Message'}
      />
    )
    expect(screen.getByText('Some Error Message')).not.toBeNull()
  })

  it('renders fields', () => {
    const example = {
      name: 'John Doe',
    }
    render(<DataDetails fields={fields} value={example} />)
    expect(screen.queryByText('Name')).not.toBeNull()
    expect(screen.queryByText('John Doe')).not.toBeNull()
  })

  it('utilizes the value transformation function', () => {
    const example = {
      name: 'John Doe',
    }
    const fields: DataDetailsField<ExampleType>[] = [
      {
        key: 'name',
        label: 'Name',
        value: (value) => 'Someone named ' + value.name,
      },
    ]
    render(<DataDetails fields={fields} value={example} />)
    expect(screen.queryByText('Name')).not.toBeNull()
    expect(screen.queryByText('Someone named John Doe')).not.toBeNull()
  })
})
