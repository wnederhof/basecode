import { createContext, ReactNode, useContext } from 'react'

export interface CommonActionsProps {
  showBack?: boolean
  showNew?: boolean
  showEdit?: boolean
  onBack?: () => void
  onNew?: () => void
  onEdit?: () => void
}

export interface SectionRootProps {
  header?: string
  actionBar?: ReactNode
  children: ReactNode
}

const LevelContext = createContext({ layoutLevel: 0 })

function CommonActions(props: CommonActionsProps) {
  return <>{props.showNew && props.onNew && (
    <button type="button" onClick={props.onNew}>
      New
    </button>
  )}
  {props.showEdit && props.onEdit && (
    <button type="button" onClick={props.onEdit}>
      Edit
    </button>
  )}
  {props.showBack && props.onBack && (
    <button type="button" onClick={props.onBack}>
      Back
    </button>
  )}
</>
}

function SectionRoot(props: SectionRootProps) {
  const layoutLevel = useContext(LevelContext)?.layoutLevel || 0
  let header: ReactNode
  switch (layoutLevel) {
    case 0:
      header = props.header && <h1>{props.header}</h1>
      break
    case 1:
      header = props.header && <h2>{props.header}</h2>
      break
    default:
      header = props.header && <h3>{props.header}</h3>
      break
  }
  return (
    <LevelContext.Provider value={{ "{{" }} layoutLevel: layoutLevel + 1 {{ "}}" }}>
      {header}
      {props.actionBar}
      {props.children}
    </LevelContext.Provider>
  )
}

export let Section = Object.assign(SectionRoot, { CommonActions })