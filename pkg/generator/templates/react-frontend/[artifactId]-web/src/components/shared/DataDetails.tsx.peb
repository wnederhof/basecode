import { LoadingIndicator } from '@components/shared/LoadingIndicator'
import { ErrorMessage } from '@components/shared/ErrorMessage'

export interface DataDetailsField<T> {
  key: string
  label: string
  value: (data: T) => string | number
  hidden?: boolean
}

export interface DataDetailsProps<T> {
  fields: DataDetailsField<T>[]
  errorMessage?: string
  fetching?: boolean
  value: T | null | undefined
}

function extractValue<T>(field: DataDetailsField<T>, value: T) {
  return value && field.value(value)
}

export function DataDetails<T>(props: DataDetailsProps<T>) {
  if (props.fetching) {
    return <LoadingIndicator />
  }
  if (props.errorMessage) {
    return <ErrorMessage message={props.errorMessage} />
  }
  if (!props.value) {
    return <div>No record found.</div>
  }
  return (
    <table>
      <tbody>
        {props.fields.filter((field) => !field.hidden).map((field) => (
          <tr key={field.key}>
            <td>{field.label}</td>
            <td>{props.value && extractValue(field, props.value)}</td>
          </tr>
        ))}
      </tbody>
    </table>
  )
}
