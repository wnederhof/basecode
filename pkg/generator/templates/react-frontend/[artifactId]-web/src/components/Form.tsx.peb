export interface FieldProps {
  htmlFor: string
  label: string
  children?: React.ReactNode
}

export const Form = ({
  children,
  ...props
}: React.FormHTMLAttributes<HTMLFormElement>) => {
  return <form {...props}>{children}</form>
}

Form.Field = (props: FieldProps) => {
  return (
    <div>
      <label htmlFor={props.htmlFor}>{props.label}</label>
      {props.children}
    </div>
  )
}

Form.Text = (props: React.InputHTMLAttributes<HTMLInputElement>) => {
  return (
    <input type="text" {...props} />
  )
}

Form.Integer = (props: React.InputHTMLAttributes<HTMLInputElement>) => {
  return (
    <input type="number" {...props} />
  )
}

Form.Date = (props: React.InputHTMLAttributes<HTMLInputElement>) => {
  return (
    <input type="date" {...props} />
  )
}

Form.Checkbox = (props: React.InputHTMLAttributes<HTMLInputElement>) => {
  return (
    <input type="checkbox" {...props} />
  )
}

Form.Select = ({
  children,
  ...props
}: React.SelectHTMLAttributes<HTMLSelectElement>) => {
  return <select {...props}>{children}</select>
}

Form.Option = ({
  children,
  ...props
}: React.OptionHTMLAttributes<HTMLOptionElement>) => {
  return <option {...props}>{children}</option>
}

Form.TextArea = ({
  children,
  ...props
}: React.TextareaHTMLAttributes<HTMLTextAreaElement>) => {
  return <textarea {...props}>{children}</textarea>
}

Form.SubmitButton = ({
  children,
  ...props
}: React.ButtonHTMLAttributes<HTMLButtonElement>) => {
  return (
    <button type="submit" {...props}>
      {children}
    </button>
  )
}

Form.CancelButton = ({
  children,
  ...props
}: React.ButtonHTMLAttributes<HTMLButtonElement>) => {
  return (
    <button type="button" {...props}>
      {children}
    </button>
  )
}
