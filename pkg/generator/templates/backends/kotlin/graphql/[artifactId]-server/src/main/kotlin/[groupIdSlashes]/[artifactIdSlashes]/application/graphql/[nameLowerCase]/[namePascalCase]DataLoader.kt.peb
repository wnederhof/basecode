package {{ groupId }}.{{ artifactId }}.application.graphql.{{ nameLowerCase }}

import com.netflix.graphql.dgs.DgsComponent
import com.netflix.graphql.dgs.DgsDataLoader
import {{ groupId }}.{{ artifactId }}.domain.{{ nameLowerCase }}.{{ namePascalCase }}
import {{ groupId }}.{{ artifactId }}.domain.{{ nameLowerCase }}.{{ namePascalCase }}Service
import org.dataloader.MappedBatchLoader
import java.util.concurrent.CompletableFuture.supplyAsync

@DgsComponent
class {{ namePascalCase }}DataLoader(
    private val {{ nameCamelCase }}Service: {{ namePascalCase }}Service
) {

    @DgsDataLoader(name = "{{ nameCamelCase }}ById")
    val {{ nameCamelCase }}ById = MappedBatchLoader<Int, {{ namePascalCase }}?> {
        supplyAsync {
            {{ nameCamelCase }}Service.findByIds(it).associateBy { it.id }
        }
    }
{%for field in fields%}{%if field.isFieldRelational%}
    @DgsDataLoader(name = "{{ namePluralCamelCase }}By{{ field.fieldNamePascalCase }}")
    val {{ namePluralCamelCase }}By{{ field.fieldNamePascalCase }} = MappedBatchLoader<Int, List<{{ namePascalCase }}>> {
        supplyAsync {
            {{ nameCamelCase }}Service.findBy{{ field.fieldNamePluralPascalCase }}(it).groupBy { it.{{ field.fieldNameCamelCase }} }
        }
    }
{%endif%}{%endfor%}
}
