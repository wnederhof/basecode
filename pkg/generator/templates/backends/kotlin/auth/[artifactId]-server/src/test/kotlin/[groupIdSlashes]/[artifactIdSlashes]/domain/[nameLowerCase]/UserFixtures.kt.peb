package {{ groupId }}.{{ artifactId }}.domain.user

import java.time.LocalDateTime
import java.time.ZoneId

object UserFixtures {

    private val LOCAL_DATE_TIME_FIXTURE = LocalDateTime.now()
    private val OFFSET_DATE_TIME_FIXTURE = LOCAL_DATE_TIME_FIXTURE
        .atZone(ZoneId.systemDefault())
        .toOffsetDateTime()

    val USER_FIXTURE_WITH_ID_1 = User(
        id = 1{%for field in fields%},
        {{ field.fieldNameCamelCase }} = {{ field.fieldKotlinTestDummyValue }}{%endfor%},
        createdAt = OFFSET_DATE_TIME_FIXTURE,
    )

    val USER_ENTITY_FIXTURE_1 = UserEntity(
        id = null{%for field in fields%},
        {{ field.fieldNameCamelCase }} = {{ field.fieldKotlinTestDummyValue }}{%endfor%}
    )

    val REGISTER_USER_FIXTURE_1 = UserService.RegisterInput({%for field in fields%}
        {{ field.fieldNameCamelCase }} = {{ field.fieldKotlinTestDummyValue }},{%endfor%}
    )

    val UPDATE_USER_FIXTURE_1 = UserService.UpdateUserInput({%for field in fields%}{%if field.fieldNameCamelCase != "username"%}
        {{ field.fieldNameCamelCase }} = {{ field.fieldKotlinTestDummyValue }},{%endif%}{%endfor%}
    )

    val USER_ENTITY_FIXTURE_WITH_ID_1 = USER_ENTITY_FIXTURE_1.copy(
        id = 1,
        createdAt = LOCAL_DATE_TIME_FIXTURE,
    )

}
