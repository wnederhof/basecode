package {{ groupId }}.{{ artifactId }}.application.security

import org.springframework.boot.autoconfigure.security.SecurityProperties
import org.springframework.boot.context.properties.EnableConfigurationProperties
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration
import org.springframework.security.authentication.AuthenticationProvider
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity
import org.springframework.security.config.annotation.web.builders.HttpSecurity
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity
import org.springframework.security.config.http.SessionCreationPolicy.IF_REQUIRED
import org.springframework.security.web.SecurityFilterChain

@Configuration
@EnableWebSecurity
@EnableMethodSecurity(prePostEnabled = true)
@EnableConfigurationProperties(SecurityProperties::class)
class WebSecurityConfig(
    private val authenticationProvider: AuthenticationProvider,
) {
    @Bean
    fun filterChain(http: HttpSecurity): SecurityFilterChain {
        return http
            .authenticationProvider(authenticationProvider)
            .cors { it.disable() }
            .csrf { it.disable() }
            .authorizeHttpRequests {
                it
                    .requestMatchers("/graphql").permitAll()
                    .requestMatchers("/actuator/health").permitAll()
                    .requestMatchers("/subscriptions").permitAll()
                    .requestMatchers("/graphiql/**").permitAll()
                    .requestMatchers("/api/**").permitAll()
            }
            .sessionManagement { it.sessionCreationPolicy(IF_REQUIRED) }
            .securityContext { it.requireExplicitSave(false) }
            .build()
    }
}
