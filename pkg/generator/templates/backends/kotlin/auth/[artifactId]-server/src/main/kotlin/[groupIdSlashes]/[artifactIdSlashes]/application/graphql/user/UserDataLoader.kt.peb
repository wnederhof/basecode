package {{ groupId }}.{{ artifactId }}.application.graphql.user

import com.netflix.graphql.dgs.DgsComponent
import com.netflix.graphql.dgs.DgsDataLoader
import {{ groupId }}.{{ artifactId }}.domain.user.User
import {{ groupId }}.{{ artifactId }}.domain.user.UserService
import org.dataloader.MappedBatchLoader
import java.util.concurrent.CompletableFuture.supplyAsync
import java.util.concurrent.Executor

@DgsComponent
class UserDataLoader(
    private val userService: UserService,
    private val executor: Executor
) {

    @DgsDataLoader(name = "userById")
    val userById = MappedBatchLoader<Int, User?> {
        supplyAsync({
            userService.findByIds(it).associateBy { it.id }
        }, executor)
    }
{%for field in fields%}{%if field.isFieldRelational%}
    @DgsDataLoader(name = "usersBy{{ field.fieldNamePascalCase }}")
    val usersBy{{ field.fieldNamePascalCase }} = MappedBatchLoader<Int, List<User>> {
        supplyAsync {
            userService.findBy{{ field.fieldNamePluralPascalCase }}(it).groupBy { it.{{ field.fieldNameCamelCase }} }
        }
    }
{%endif%}{%endfor%}
}
