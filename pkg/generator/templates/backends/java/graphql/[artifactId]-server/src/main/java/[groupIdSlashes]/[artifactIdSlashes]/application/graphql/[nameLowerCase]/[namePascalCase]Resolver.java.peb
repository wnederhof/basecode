package {{ groupId }}.{{ artifactId }}.application.graphql.{{ nameLowerCase }};

import {{ groupId }}.{{ artifactId }}.domain.{{ nameLowerCase }}.{{ namePascalCase }};
import {{ groupId }}.{{ artifactId }}.domain.{{ nameLowerCase }}.{{ namePascalCase }}Service;
import {{ groupId }}.{{ artifactId }}.domain.{{ nameLowerCase }}.{{ namePascalCase }}Service.Update{{ namePascalCase }}Input;
import {{ groupId }}.{{ artifactId }}.domain.{{ nameLowerCase }}.{{ namePascalCase }}Service.Create{{ namePascalCase }}Input;{%if hasRelations%}
import {{ groupId }}.{{ artifactId }}.domain.{{ nameLowerCase }}.{{ namePascalCase }}Service.{{ namePascalCase }}FilterInput;{%endif%}
{%for field in fields%}{%if field.isFieldRelational%}import {{ groupId }}.{{ artifactId }}.domain.{{ field.fieldTypeLowerCase }}.{{ field.fieldTypePascalCase }};
{%endif%}{%endfor%}import com.netflix.graphql.dgs.DgsComponent;{%if hasRelations%}
import com.netflix.graphql.dgs.DgsData;{%endif%}
import com.netflix.graphql.dgs.DgsQuery;
import com.netflix.graphql.dgs.DgsMutation;{%if hasRelations%}
import com.netflix.graphql.dgs.DgsDataFetchingEnvironment;{%endif%}
import lombok.AllArgsConstructor;
{%if hasRelations%}
import java.util.Objects;{%endif%}
import java.util.Optional;{%if hasRelations%}
import java.util.concurrent.CompletableFuture;

import static java.util.Collections.emptyList;{%endif%}

@DgsComponent
@AllArgsConstructor
class {{ namePascalCase }}Resolver {
    private {{ namePascalCase }}Service {{ nameCamelCase }}Service;

    @DgsQuery
    Optional<{{ namePascalCase }}> {{ nameCamelCase }}(int id) {
        return {{ nameCamelCase }}Service.findById(id);
    }

    @DgsQuery
    Iterable<{{ namePascalCase }}> {{ namePluralCamelCase }}({%if hasRelations%}{{ namePascalCase }}FilterInput filter{%endif%}) {
        return {{ nameCamelCase }}Service.findAll({%if hasRelations%}filter{%endif%});
    }

    @DgsMutation
    {{ namePascalCase }} create{{ namePascalCase }}(Create{{ namePascalCase }}Input input) {
        return {{ nameCamelCase }}Service.create(input);
    }

    @DgsMutation
    Optional<{{ namePascalCase }}> update{{ namePascalCase }}(int id, Update{{ namePascalCase }}Input input) {
        return {{ nameCamelCase }}Service.update(id, input);
    }

    @DgsMutation
    boolean delete{{ namePascalCase }}(int id) {
        return {{ nameCamelCase }}Service.deleteById(id);
    }
{%for field in fields%}{%if field.isFieldRelational%}
    @DgsData(parentType = "{{ namePascalCase }}")
    CompletableFuture<{{ field.fieldTypePascalCase }}> {{ field.fieldTypeCamelCase }}(DgsDataFetchingEnvironment dfe) {
        var {{ nameCamelCase }} = dfe.<{{ namePascalCase }}>getSource();
        return dfe.<Integer, {{ namePascalCase }}>getDataLoader("{{ field.fieldTypeCamelCase }}ById")
            .load({{ nameCamelCase }}.{{ field.fieldNameCamelCase }})
    }

    @DgsData(parentType = "{{ field.fieldTypePascalCase }}", field = "{{ namePluralCamelCase }}")
    CompletableFuture<{{ field.fieldTypePascalCase }}> {{ namePluralCamelCase }}By{{ field.fieldTypePascalCase }}(DgsDataFetchingEnvironment dfe) {
        var {{ field.fieldTypeCamelCase }} = dfe.<{{ namePascalCase }}>getSource<{{ field.fieldTypePascalCase }}>();
        var {{ field.fieldNameCamelCase }} = Objects.requireNonNull({{ field.fieldTypeCamelCase }}).getId();
        return dfe.<Integer, Iterable<{{ namePascalCase }}>>getDataLoader("{{ namePluralCamelCase }}By{{ field.fieldNamePascalCase }}")
            .load({{ field.fieldNameCamelCase }})
            .thenApply(it -> it == null ? emptyList() : it);
    }
{%endif%}{%endfor%}
}
