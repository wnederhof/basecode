import { fireEvent, render, screen, waitFor } from '@testing-library/react'
import { Register } from '@components/app/auth/Register'
import { Client, Provider } from 'urql'
import { fromValue } from 'wonka'

describe('Register', () => {
  const user = {
    id: '1'{%for field in fields%},
    {{field.fieldNameCamelCase}}: {{field.fieldFrontendTestValue}}{%endfor%}
  }

  it('has a header', () => {
    const mockClient: Partial<Client> = {
      executeQuery: jest.fn(),
      executeMutation: jest.fn(),
      executeSubscription: jest.fn(),
    }
    render(
      <Provider value={mockClient as Client}>
        <Register />
      </Provider>
    )
    expect(screen.queryAllByText('Registration Form')).toHaveLength(1)
  })

  it('renders form containing the necessary fields', () => {
    const mockClient: Partial<Client> = {
      executeQuery: jest.fn(),
      executeMutation: jest.fn(),
      executeSubscription: jest.fn(),
    }
    render(
      <Provider value={mockClient as Client}>
        <Register onRegister={jest.fn()} onCancel={jest.fn()} />
      </Provider>
    ){%for field in fields%}
    expect(screen.queryByText('{{ field.fieldNamePascalCase }}')).not.toBeNull(){%endfor%}
  })

  it('calls a mutation if Register is clicked', async () => {
    const executeMutation = jest.fn()
    executeMutation.mockReturnValue(
      fromValue({
        data: {}
      })
    )
    const mockClient: Partial<Client> = {
      executeQuery: jest.fn(),
      executeMutation,
      executeSubscription: jest.fn(),
    }
    const registerFn = jest.fn()
    render(
      <Provider value={mockClient as Client}>
        <Register onRegister={registerFn} onCancel={jest.fn()} />
      </Provider>
    )
    fireEvent.click(screen.getByText('Register'))
    await waitFor(() => expect(mockClient.executeMutation).toHaveBeenCalled())
    await waitFor(() => expect(registerFn).toHaveBeenCalled())
  })
})
