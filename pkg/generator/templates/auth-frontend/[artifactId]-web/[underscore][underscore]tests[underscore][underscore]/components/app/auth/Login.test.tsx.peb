import { fireEvent, render, screen, waitFor } from '@testing-library/react'
import { Login } from '@components/app/auth/Login'
import { Client, Provider } from 'urql'
import { fromValue } from 'wonka'

describe('Login', () => {
  const user = {
    id: '1'{%for field in fields%},
    {{field.fieldNameCamelCase}}: {{field.fieldFrontendTestValue}}{%endfor%}
  }

  it('has a header', () => {
    const mockClient: Partial<Client> = {
      executeQuery: jest.fn(),
      executeMutation: jest.fn(),
      executeSubscription: jest.fn(),
    }
    render(
      <Provider value={mockClient as Client}>
        <Login />
      </Provider>
    )
    expect(screen.queryAllByText('Login Form')).toHaveLength(1)
  })

  it('renders form containing the necessary fields', () => {
    const mockClient: Partial<Client> = {
      executeQuery: jest.fn(),
      executeMutation: jest.fn(),
      executeSubscription: jest.fn(),
    }
    render(
      <Provider value={mockClient as Client}>
        <Login onLogin={jest.fn()} onCancel={jest.fn()} />
      </Provider>
    ){%for field in fields%}
    expect(screen.queryByText('{{ field.fieldNamePascalCase }}')).not.toBeNull(){%endfor%}
  })

  it('calls a mutation if Login is clicked', async () => {
    const executeMutation = jest.fn()
    executeMutation.mockReturnValue(
      fromValue({
        data: {
          login: {
            id: 1
          }
        }
      })
    )
    const mockClient: Partial<Client> = {
      executeQuery: jest.fn(),
      executeMutation,
      executeSubscription: jest.fn(),
    }
    const loginFn = jest.fn()
    render(
      <Provider value={mockClient as Client}>
        <Login onLogin={loginFn} onCancel={jest.fn()} />
      </Provider>
    )
    fireEvent.click(screen.getByText('Login'))
    await waitFor(() => expect(mockClient.executeMutation).toBeCalled())
    await waitFor(() => expect(loginFn).toBeCalled())
  })
})
