import Link from 'next/link'
import { useRouter } from 'next/router'
import { useState } from 'react'
import { ResetUrqlClientContext } from '@lib/reset-urql-client-context'
import { gql, useMutation } from 'urql'

export const Login = () => {
  const router = useRouter()
  const [username, setUsername] = useState('')
  const [password, setPassword] = useState('')
  const [, executeLoginMutation] = useMutation(gql`
    mutation login($username: String!, $password: String!) {
      login(username: $username, password: $password) {
        id
      }
    }
  `)
  const doLogin = (resetUrqlClient: any) => {
    executeLoginMutation({ username, password }).then((loginResult) => {
      if (loginResult?.data?.login) {
        router.push('/')
        resetUrqlClient()
      } else {
        alert(
          'Could not login. Please check your username and password and try again.'
        )
      }
    })
  }
  return (
    <ResetUrqlClientContext.Consumer>
      {(resetUrqlClient) => (
        <form
          onSubmit={(e) => {
            doLogin(resetUrqlClient)
            e.preventDefault()
          }}
        >
          <>
            <div>
              Username
              <input
                autoFocus
                type="text"
                defaultValue={username}
                placeholder="Username"
                onChange={(e) => setUsername(e.target.value)}
              />
            </div>
            <div>
              <input
                type="password"
                defaultValue={password}
                placeholder="Password"
                onChange={(e) => setPassword(e.target.value)}
              />
            </div>
            <div>
              <button type="submit">Login</button>
              <Link href="/auth/register">Register</Link>
            </div>
          </>
        </form>
      )}
    </ResetUrqlClientContext.Consumer>
  )
}
