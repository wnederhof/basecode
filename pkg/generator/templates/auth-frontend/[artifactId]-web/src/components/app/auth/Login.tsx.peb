import { Header } from '@components/Header'
import { gql, OperationResult, useMutation } from 'urql'
import { Mutation } from '@generated/graphql'
import { useFormik } from 'formik'
import { Form } from '@components/Form'

export interface LoginProps {
  onLogin?: () => void
  onCancel?: () => void
}

interface LoginFormData {
  username: string | undefined,
  password: string | undefined
}

export function Login(props: LoginProps) {
  const [, executeLoginMutation] = useMutation<Mutation>(gql`
    mutation login($input: LoginInput!) {
      login(input: $input) {
        id
      }
    }
  `)

  function handleMutationResult(result: OperationResult<Mutation>) {
    if (result.error) {
      alert(`An error occurred: ${result.error.message}`)
    }
    if (!result.data?.login) {
      alert('Could not login.')
      return false
    }
    return !result.error
  }

  const doSubmit = (
    formData: LoginFormData,
  ) => {
    executeLoginMutation({ input: formData })
      .then(result => handleMutationResult(result) && props.onLogin?.())
      .catch((reason) => alert(`Logging in failed. Reason: ${reason}`))
  }
  const formik = useFormik({
    initialValues:
      username: '',
      password: ''
    },
    enableReinitialize: true,
    onSubmit: doSubmit
  })

  return (
    <>
      <Header level={1}>Login Form</Header>
      <Form role="form" onSubmit={formik.handleSubmit}>
        <Form.Field htmlFor="username" label="Username">
          <Form.Text name="username" onChange={formik.handleChange} value={formik.values.username} }} />
        </Form.Field>
        <Form.Field htmlFor="password" label="Password">
          <Form.Password name="password" onChange={formik.handleChange} value={formik.values.password} }} />
        </Form.Field>
        <Form.SubmitButton>Login</Form.SubmitButton>
        {props.onCancel && <Form.CancelButton onClick={() => props.onCancel?.()}>Cancel</Form.CancelButton>}
      </Form>
    </>
  )
}
