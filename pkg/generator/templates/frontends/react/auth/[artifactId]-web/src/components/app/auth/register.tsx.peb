import { showError } from '@lib/notifications'
import { Header } from '@components/ui/header'
import { gql, OperationResult, useMutation{%if hasRelations%}, useQuery{%endif%} } from 'urql'{%if hasRelations%}
import { useMemo } from 'react'{%endif%}
import { Mutation{%if hasRelations%}, Query{%endif%}{%for field in fields%}{%if field.isFieldRelational%}, {{ field.fieldTypePascalCase }}{%endif%}{%endfor%} } from '@generated/graphql'
import { useFormik } from 'formik'
import { Form } from '@components/ui/form'
import { showInfo } from '@lib/notifications'

export interface RegisterProps { {%for field in fields%}{%if field.isFieldRelational%}
  {{ field.fieldNameCamelCase }}?: string{%endif%}{%endfor%}
  onRegister?: () => void
  onCancel?: () => void
}

interface RegisterFormData {{ "{" }}{%for field in fields%}
  {{ field.fieldNameCamelCase }}: {%if field.fieldType == "INT" or field.fieldType == "NULL_INT"%}number{%elif field.fieldType == "BOOLEAN" or field.fieldType == "NULL_BOOLEAN"%}boolean{%elif field.fieldType == "RELATIONAL"%}number | string{%else%}string{%endif%} | undefined{%endfor%}
}

export function Register(props: RegisterProps) {
  const [, executeRegisterMutation] = useMutation<Mutation>(gql`
    mutation register($input: RegisterInput!) {
      register(input: $input) {
        id
      }
    }
  `)

  function handleMutationResult(result: OperationResult<Mutation>) {
    if (result.error) {
      throw result.error.message
    }
  }

  const doSubmit = async (
    formData: RegisterFormData
  ) => {
    try { {%if hasRelations%}
      const formDataWithRelations = { ...formData }{%endif%}{%for field in fields%}{%if field.isFieldRelational%}
      if (props.{{ field.fieldNameCamelCase }}) {
        formData{%if hasRelations%}WithRelations{%endif%}.{{  field.fieldNameCamelCase }} = props.{{ field.fieldNameCamelCase }}
      }{%endif%}{%endfor%}
      const result = executeRegisterMutation({ input: formData{%if hasRelations%}WithRelations{%endif%} })
      handleMutationResult(result)
      showInfo('Registration successful.')
      props.onRegister?.()
    } catch(error) {
      showError(error)
    }
  }
{%for field in fields%}{%if field.isFieldRelational%}
  const [{{ field.fieldTypePluralCamelCase }}QueryResult] = useQuery<Query>({
    query: gql`
      query {{field.fieldTypePluralCamelCase}}ForUserOptions {
        {{field.fieldTypePluralCamelCase}} {
          id
        }
      }
    `,
    context: useMemo(
      () => ({
        additionalTypenames: ['{{field.fieldTypePascalCase}}'],
      }),
      []
    ),
  })
{%endif%}{%endfor%}
  const formik = useFormik({
    initialValues: {{ "{" }}{%for field in fields%}
{{ field.fieldNameCamelCase }}: {%if field.fieldType == "BOOLEAN" or field.fieldType == "NULL_BOOLEAN"%}false{%endif%}{%if field.fieldType == "STRING" or field.fieldType == "NULL_STRING" or field.fieldType == "TEXT" or field.fieldType == "NULL_TEXT"%}''{%endif%},{%endfor%}
    },
    enableReinitialize: true,
    onSubmit: doSubmit
  })

  return (
    <>
      <Header level={1}>Registration Form</Header>
      <Form role="form" onSubmit={formik.handleSubmit}>{%for field in fields%}
{%if field.fieldType == "RELATIONAL" %}{props.{{ field.fieldNameCamelCase }} ? <></> : {%endif%}<Form.Field htmlFor="{{ field.fieldNameCamelCase }}" label="{{ field.fieldNamePascalCase }}">{%if field.fieldType == "STRING" or field.fieldType == "NULL_STRING" %}
        <Form.Text name="{{ field.fieldNameCamelCase }}" onChange={formik.handleChange} value={formik.values.{{ field.fieldNameCamelCase }}{{ "}" }} />
{%elif field.fieldType == "INT" or field.fieldType == "NULL_INT" %}
        <Form.Text name="{{ field.fieldNameCamelCase }}" onChange={formik.handleChange} value={formik.values.{{ field.fieldNameCamelCase }}{{ "}" }} />
{%elif field.fieldType == "TEXT" or field.fieldType == "NULL_TEXT" %}
        <Form.TextArea name="{{ field.fieldNameCamelCase }}" onChange={formik.handleChange} value={formik.values.{{ field.fieldNameCamelCase }}{{ "}" }}  />
{%elif field.fieldType == "INT" or field.fieldType == "NULL_INT" %}
        <Form.Integer name="{{ field.fieldNameCamelCase }}" />
{%elif field.fieldType == "DATE" or field.fieldType == "NULL_DATE" %}
        <Form.Date name="{{ field.fieldNameCamelCase }}" onChange={formik.handleChange} value={formik.values.{{ field.fieldNameCamelCase }}{{ "}" }} />
{%elif field.fieldType == "BOOLEAN" or field.fieldType == "NULL_BOOLEAN" %}
        <Form.Checkbox name="{{ field.fieldNameCamelCase }}" onChange={formik.handleChange} value={formik.values.{{ field.fieldNameCamelCase }}{{ "}" }} />
{%elif field.fieldType == "RELATIONAL" %}
        <Form.Select name="{{ field.fieldNameCamelCase }}" onChange={formik.handleChange} value={formik.values.{{ field.fieldNameCamelCase }}{{ "}" }}>
          <Form.Option />
          {{ "{" }}{{ field.fieldTypePluralCamelCase }}QueryResult?.data?.{{ field.fieldTypePluralCamelCase }}?.map(({{ field.fieldTypeCamelCase }}: {{ field.fieldTypePascalCase }}) =>
            <Form.Option key={{ "{" }}{{ field.fieldTypeCamelCase }}.id} value={{ "{" }}{{ field.fieldTypeCamelCase }}.id}>{{ "{" }}{{ field.fieldTypeCamelCase }}.id}</Form.Option>
          )}
        </Form.Select>
{%endif%}      </Form.Field>{%if field.fieldType == "RELATIONAL" %}{{ "}" }}{%endif%}{%endfor%}
        <Form.SubmitButton>Register</Form.SubmitButton>
        {props.onCancel && <Form.CancelButton onClick={() => props.onCancel?.()}>Cancel</Form.CancelButton>}
      </Form>
    </>
  )
}
