import { Header } from '@components/ui/header'
import { gql, useQuery } from 'urql'
import { useMemo } from 'react'
import { Query } from '@generated/graphql'
import { Error } from '@components/ui/error'
import { Loader } from '@components/ui/loader'
import { Details } from '@components/ui/details'

export interface {{ namePascalCase }}DetailsProps {
  id: string | number
}

export function {{ namePascalCase }}Details(props: {{ namePascalCase }}DetailsProps) {
  const [{ data, error, fetching }] = useQuery<Query>({
    query: gql`query {{nameCamelCase}}Details($id: ID!) {
      {{nameCamelCase}}(id: $id) {
        id{%for field in fields%}
        {{field.fieldNameCamelCase}}{%endfor%}
        createdAt
        updatedAt
      }
    }`,
    variables: { id: props.id },
    context: useMemo(
      () => ({
        additionalTypenames: ['{{namePascalCase}}'],
      }),
      []
    ),
  })

  if (error) {
    return <Error value={error} />
  }

  if (fetching || !data) {
    return <Loader />
  }

  return (
    <>
      <Header level={1}>{{ namePascalCase }} Details</Header>
      <Details>{%for field in fields%}
        <Details.Field label="{{ field.fieldNamePascalCase }}">
          {{ "{" }}data.{{ nameCamelCase }}?.{{ field.fieldNameCamelCase }}{%if field.fieldType == "BOOLEAN" or field.fieldType == "NULL_BOOLEAN"%} ? 'Yes' : 'No'{%endif%}{{ "}" }}
        </Details.Field>{%endfor%}
        <Details.Field label="Created At">
          {{ "{" }}data.{{ nameCamelCase }}?.createdAt{{ "}" }}
        </Details.Field>
        <Details.Field label="Updated At">
          {{ "{" }}data.{{ nameCamelCase }}?.updatedAt{{ "}" }}
        </Details.Field>
      </Details>
    </>
  )
}
