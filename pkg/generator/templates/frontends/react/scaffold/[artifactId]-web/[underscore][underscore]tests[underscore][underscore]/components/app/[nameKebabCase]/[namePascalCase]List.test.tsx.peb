import { fireEvent, render, screen, waitFor } from '@testing-library/react'
import { {{ namePascalCase }}List } from '@components/app/{{ nameKebabCase }}/{{ namePascalCase }}List'
import { Client, Provider } from 'urql'
import { act } from 'react-dom/test-utils'
import { fromValue } from 'wonka'
import { {{ namePascalCase }}ListQuery } from '@generated/graphql'
import * as notifications from '@lib/notifications'

jest.mock('@lib/notifications', () => ({
  showError: jest.fn(),
  showInfo: jest.fn(),
  askConfirmation: jest.fn(),
}))

describe('{{ namePascalCase }}List', () => {
  const {{ nameCamelCase }} = {
    id: '1'{%for field in fields%},
    {{field.fieldNameCamelCase}}: {{field.fieldFrontendTestValue}}{%endfor%}
  }

  beforeEach(() => {
    jest.clearAllMocks();
  })

  it('forwards to {{ nameCamelCase }} page on Show', () => {
    const executeQuery = jest.fn()
    executeQuery.mockReturnValue(
      fromValue<{ data: {{ namePascalCase }}ListQuery }>({
        data: {
          {{ namePluralCamelCase }}: [{{ nameCamelCase }}],
        },
      })
    )
    const mockClient: Partial<Client> = {
      executeQuery,
      executeMutation: jest.fn(),
      executeSubscription: jest.fn(),
    }
    act(() => {
      render(
        <Provider value={mockClient as Client}>
          <{{ namePascalCase }}List />
        </Provider>
      )
    })
    expect(screen.getByText('Show')).toHaveAttribute('href', '/{{ namePluralKebabCase }}/1')
  })

  it('renders entries when data is fetched', () => {
    const executeQuery = jest.fn()
    executeQuery.mockReturnValue(
      fromValue<{ data: {{ namePascalCase }}ListQuery }>({
        data: {
          {{ namePluralCamelCase }}: [{{ nameCamelCase }}],
        },
      }),
    )
    const mockClient: Partial<Client> = {
      executeQuery,
      executeMutation: jest.fn(),
      executeSubscription: jest.fn(),
    }
    act(() => {
      render(
        <Provider value={mockClient as Client}>
          <{{ namePascalCase }}List />
        </Provider>
      )
    }){%for field in fields%}
    expect(screen.queryAllByText({{ nameCamelCase }}.{{ field.fieldNameCamelCase }}{%if field.fieldType == "BOOLEAN" or field.fieldType == "NULL_BOOLEAN"%} ? 'Yes' : 'No'{%endif%})).not.toHaveLength(0){%endfor%}
  })

  it('calls mutation when Delete is clicked and confirmed', async () => {
    jest.spyOn(notifications, 'askConfirmation').mockReturnValueOnce(Promise.resolve(true))
    const executeQuery = jest.fn()
    const executeMutation = jest.fn()
    executeQuery.mockReturnValue(
      fromValue<{ data: {{ namePascalCase }}ListQuery }>({
        data: {
          {{ namePluralCamelCase }}: [{{ nameCamelCase }}],
        },
      }),
    )
    executeMutation.mockReturnValue(
      fromValue<{ data: {{ namePascalCase }}ListQuery }>({
        data: {},
      })
    )
    const mockClient: Partial<Client> = {
      executeQuery,
      executeMutation,
      executeSubscription: jest.fn(),
    }
    act(() => {
      render(
        <Provider value={mockClient as Client}>
          <{{ namePascalCase }}List />
        </Provider>
      )
    })
    await waitFor(() => {
      act(() => {
        fireEvent(
          screen.getByText('Delete'),
          new MouseEvent('click', {
            bubbles: true,
            cancelable: true,
          })
        )
      })
    })
    expect(mockClient.executeMutation).toHaveBeenCalled()
    expect(notifications.showInfo).toHaveBeenCalledWith('{{ namePascalCase }} deleted.')
  })

  it('does not call mutation when Delete is clicked and not confirmed', async () => {
    jest.spyOn(notifications, 'askConfirmation').mockReturnValueOnce(Promise.resolve(false))
    const executeQuery = jest.fn()
    const executeMutation = jest.fn()
    executeQuery.mockReturnValue(
      fromValue<{ data: {{ namePascalCase }}ListQuery }>({
        data: {
          {{ namePluralCamelCase }}: [{{ nameCamelCase }}],
        },
      })
    )
    executeMutation.mockReturnValue(
      fromValue<{ data: {{ namePascalCase }}ListQuery }>({
        data: {},
      })
    )
    const mockClient: Partial<Client> = {
      executeQuery,
      executeMutation,
      executeSubscription: jest.fn(),
    }
    act(() => {
      render(
        <Provider value={mockClient as Client}>
          <{{ namePascalCase }}List />
        </Provider>
      )
    })
    await waitFor(() => {
      act(() => {
        fireEvent(
          screen.getByText('Delete'),
          new MouseEvent('click', {
            bubbles: true,
            cancelable: true,
          })
        )
      })
    })
    expect(mockClient.executeMutation).not.toHaveBeenCalled()
    expect(notifications.showInfo).not.toHaveBeenCalled()
  })
})
