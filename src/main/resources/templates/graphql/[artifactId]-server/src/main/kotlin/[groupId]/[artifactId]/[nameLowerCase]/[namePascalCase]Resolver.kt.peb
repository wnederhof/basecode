package {{ groupId }}.{{ artifactId }}.{{ nameLowerCase }}

import {{ groupId }}.{{ artifactId }}.{{ nameLowerCase }}.{{ namePascalCase }}.Update{{ namePascalCase }}Input
import {{ groupId }}.{{ artifactId }}.{{ nameLowerCase }}.{{ namePascalCase }}.Create{{ namePascalCase }}Input{%if hasRelations%}
import {{ groupId }}.{{ artifactId }}.{{ nameLowerCase }}.{{ namePascalCase }}.{{ namePascalCase }}FilterInput{%endif%}
{%for field in fields%}{%if field.isFieldRelational%}import {{ groupId }}.{{ artifactId }}.{{ field.fieldTypeLowerCase }}.{{ field.fieldTypePascalCase }}
import {{ groupId }}.{{ artifactId }}.{{ field.fieldTypeLowerCase }}.{{ field.fieldTypePascalCase }}Service
{%endif%}{%endfor%}import graphql.kickstart.tools.GraphQLMutationResolver
import graphql.kickstart.tools.GraphQLQueryResolver{%if hasRelations%}
import graphql.kickstart.tools.GraphQLResolver{%endif%}
import org.springframework.stereotype.Component

@Component
class {{ namePascalCase }}Resolver(
    private val {{ nameCamelCase }}Service: {{ namePascalCase }}Service
) : GraphQLQueryResolver, GraphQLMutationResolver {

    fun {{ nameCamelCase }}(id: Int): {{ namePascalCase }}? {
        return {{ nameCamelCase }}Service.findById(id)
    }

    fun {{ namePluralCamelCase }}({%if hasRelations%}filter: {{ namePascalCase }}FilterInput?{%endif%}): Iterable<{{ namePascalCase }}> {
        return {{ nameCamelCase }}Service.findAll({%if hasRelations%}filter{%endif%})
    }

    fun create{{ namePascalCase }}(input: Create{{ namePascalCase }}Input): {{ namePascalCase }} {
        return {{ nameCamelCase }}Service.create(input)
    }

    fun update{{ namePascalCase }}(id: Int, input: Update{{ namePascalCase }}Input): {{ namePascalCase }}? {
        return {{ nameCamelCase }}Service.update(id, input)
    }

    fun delete{{ namePascalCase }}(id: Int): Boolean {
        return {{ nameCamelCase }}Service.deleteById(id)
    }
{%if hasRelations%}
    @Component
    class {{ namePascalCase }}QueryResolver({%for field in fields%}{%if field.isFieldRelational%}
        private val {{ field.fieldTypeCamelCase }}Service: {{ field.fieldTypePascalCase }}Service,{%endif%}{%endfor%}
    ) : GraphQLResolver<{{ namePascalCase }}> { {%for field in fields%}{%if field.isFieldRelational%}

        fun {{ field.fieldTypeCamelCase }}({{ nameCamelCase }}: {{ namePascalCase }}): {{ field.fieldTypePascalCase }}? {
            return {{ field.fieldTypeCamelCase }}Service.findById({{ nameCamelCase }}.{{ field.fieldNameCamelCase }})
        }
{%endif%}{%endfor%}
    }
{%for field in fields%}{%if field.isFieldRelational%}
    @Component
    class {{ field.fieldTypePascalCase }}FieldResolver(
        private val {{ nameCamelCase }}Service: {{ namePascalCase }}Service
    ) : GraphQLResolver<{{ field.fieldTypePascalCase }}> {

        fun {{ namePluralCamelCase }}({{ field.fieldTypeCamelCase }}: {{ field.fieldTypePascalCase }}): Iterable<{{ namePascalCase }}> {
            return {{ nameCamelCase }}Service.findBy{{ field.fieldNamePascalCase }}({{ field.fieldTypeCamelCase }}.id!!)
        }

    }
{%endif%}{%endfor%}{%endif%}
}
