package {{ groupId }}.{{ artifactId }}.{{ nameLowerCase }}

import {{ groupId }}.{{ artifactId }}.{{ nameLowerCase }}.{{ namePascalCase }}Fixtures.CREATE_{{ nameScreamingSnakeCase }}_FIXTURE_1
import {{ groupId }}.{{ artifactId }}.{{ nameLowerCase }}.{{ namePascalCase }}Fixtures.UPDATE_{{ nameScreamingSnakeCase }}_FIXTURE_1
import {{ groupId }}.{{ artifactId }}.{{ nameLowerCase }}.{{ namePascalCase }}Fixtures.{{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1
{%for field in fields%}{%if field.isFieldRelational%}import {{ groupId }}.{{ artifactId }}.{{ field.fieldTypeLowerCase }}.{{ field.fieldTypePascalCase }}Fixtures.{{ field.fieldTypeScreamingSnakeCase }}_FIXTURE_WITH_ID_1
import {{ groupId }}.{{ artifactId }}.{{ field.fieldTypeLowerCase }}.{{ field.fieldTypePascalCase }}Service
{%endif%}{%endfor%}import com.nhaarman.mockitokotlin2.verify
import com.nhaarman.mockitokotlin2.whenever
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Nested
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.extension.ExtendWith
import org.mockito.InjectMocks
import org.mockito.Mock
import org.mockito.junit.jupiter.MockitoExtension

class {{ namePascalCase }}ResolverUnitTests {

    @Nested
    @ExtendWith(MockitoExtension::class)
    inner class RootQueryResolverUnitTests {

        @Mock
        private lateinit var {{ nameCamelCase }}Service: {{ namePascalCase }}Service

        @InjectMocks
        private lateinit var rootQueryResolver: {{ namePascalCase }}Resolver.RootQueryResolver

        @Test
        fun `{{ nameCamelCase }} delegates the call to the {{ namePascalCase }}Service`() {
            whenever({{ nameCamelCase }}Service.findById(1))
                .thenReturn({{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1)

            assertThat(rootQueryResolver.{{ nameCamelCase }}(1))
                .isEqualTo({{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1)
        }

        @Test
        fun `{{ namePluralCamelCase }} delegates the call to the {{ namePascalCase }}Service`() {
            {%if hasRelations%}val any{{ namePascalCase }}Filter = {{ namePascalCase }}.{{ namePascalCase }}FilterInput()

            {%endif%}whenever({{ nameCamelCase }}Service.findAll({%if hasRelations%}any{{ namePascalCase }}Filter{%endif%}))
                .thenReturn(listOf({{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1))

            assertThat(rootQueryResolver.{{ namePluralCamelCase }}({%if hasRelations%}any{{ namePascalCase }}Filter{%endif%}))
                .isEqualTo(listOf({{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1))
        }

    }

    @Nested
    @ExtendWith(MockitoExtension::class)
    inner class MutationResolverUnitTests {

        @Mock
        private lateinit var {{ nameCamelCase }}Service: {{ namePascalCase }}Service

        @InjectMocks
        private lateinit var {{ nameCamelCase }}MutationResolver: {{ namePascalCase }}Resolver.MutationResolver

        @Test
        fun `createBook delegates the call to the {{ namePascalCase }}Service`() {
            whenever({{ nameCamelCase }}Service.create(CREATE_{{ nameScreamingSnakeCase }}_FIXTURE_1))
                .thenReturn({{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1)

            assertThat({{ nameCamelCase }}MutationResolver.create{{ namePascalCase }}(CREATE_{{ nameScreamingSnakeCase }}_FIXTURE_1))
                .isEqualTo({{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1)
        }

        @Test
        fun `updateBook delegates the call to the {{ namePascalCase }}Service`() {
            whenever({{ nameCamelCase }}Service.update(1, UPDATE_{{ nameScreamingSnakeCase }}_FIXTURE_1))
                .thenReturn({{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1)

            assertThat({{ nameCamelCase }}MutationResolver.update{{ namePascalCase }}(1, UPDATE_{{ nameScreamingSnakeCase }}_FIXTURE_1))
                .isEqualTo({{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1)
        }

        @Test
        fun `delete{{ namePascalCase }} delegates the call to the {{ namePascalCase }}Service`() {
            {{ nameCamelCase }}MutationResolver.delete{{ namePascalCase }}(1)

            verify({{ nameCamelCase }}Service).deleteById(1)
        }

    }
{%if hasRelations%}
    @Nested
    @ExtendWith(MockitoExtension::class)
    inner class {{ namePascalCase }}ResolverUnitTests { {%for field in fields%}{%if field.isFieldRelational%}

        @Mock
        private lateinit var {{ field.fieldTypeCamelCase }}Service: {{ field.fieldTypePascalCase }}Service{%endif%}{%endfor%}

        @InjectMocks
        private lateinit var {{ nameCamelCase }}QueryResolver: {{ namePascalCase }}Resolver.{{ namePascalCase }}QueryResolver
{%for field in fields%}{%if field.isFieldRelational%}
        @Test
        fun `{{ field.fieldTypeCamelCase }} delegates the call to the {{ field.fieldTypePascalCase }}Service`() {
            whenever({{ field.fieldTypeCamelCase }}Service.findById({{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1.{{ field.fieldNameCamelCase }}))
                .thenReturn({{ field.fieldTypeScreamingSnakeCase }}_FIXTURE_WITH_ID_1)

            assertThat({{ nameCamelCase }}QueryResolver.{{ field.fieldTypeCamelCase }}({{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1))
                .isEqualTo({{ field.fieldTypeScreamingSnakeCase }}_FIXTURE_WITH_ID_1)
        }{%endif%}{%endfor%}
    }
{%endif%}{%for field in fields%}{%if field.isFieldRelational%}
    @Nested
    @ExtendWith(MockitoExtension::class)
    inner class {{ field.fieldTypePascalCase }}ResolverUnitTests {

        @Mock
        private lateinit var {{ nameCamelCase }}Service: {{ namePascalCase }}Service

        @InjectMocks
        private lateinit var {{ field.fieldTypeCamelCase }}FieldResolver: {{ namePascalCase }}Resolver.{{ field.fieldTypePascalCase }}FieldResolver

        @Test
        fun `{{ nameCamelCase }} delegates the call to the {{ nameCamelCase }}Service`() {
            whenever({{ nameCamelCase }}Service.findBy{{ field.fieldNamePascalCase }}({{ field.fieldTypeScreamingSnakeCase }}_FIXTURE_WITH_ID_1.id!!))
                .thenReturn(listOf({{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1))

            assertThat({{ field.fieldTypeCamelCase }}FieldResolver.{{ namePluralCamelCase }}({{ field.fieldTypeScreamingSnakeCase }}_FIXTURE_WITH_ID_1))
                .isEqualTo(listOf({{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1))
        }

    }
{%endif%}{%endfor%}
}
