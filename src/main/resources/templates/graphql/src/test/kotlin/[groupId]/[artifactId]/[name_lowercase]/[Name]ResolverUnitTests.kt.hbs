package {{ groupId }}.{{ artifactId }}.{{ name_lowercase }}

import {{ groupId }}.{{ artifactId }}.{{ name_lowercase }}.{{ Name }}Fixtures.{{ NAME }}_FIXTURE_1
import {{ groupId }}.{{ artifactId }}.{{ name_lowercase }}.{{ Name }}Fixtures.CREATE_{{ NAME }}_FIXTURE_1
import {{ groupId }}.{{ artifactId }}.{{ name_lowercase }}.{{ Name }}Fixtures.{{ NAME }}_FIXTURE_WITH_ID_1
{{#each fields}}{{#if isFieldRelational}}import {{ groupId }}.{{ artifactId }}.{{ fieldTypeLowerCase }}.{{ fieldTypePascalCase }}Fixtures.{{ fieldTypeScreamingSnakeCase }}_FIXTURE_WITH_ID_1
import {{ groupId }}.{{ artifactId }}.{{ fieldTypeLowerCase }}.{{ fieldTypePascalCase }}Service
{{/if}}{{/each}}import com.nhaarman.mockitokotlin2.verify
import com.nhaarman.mockitokotlin2.whenever
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Nested
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.extension.ExtendWith
import org.mockito.InjectMocks
import org.mockito.Mock
import org.mockito.junit.jupiter.MockitoExtension

class {{ Name }}ResolverUnitTests {

    @Nested
    @ExtendWith(MockitoExtension::class)
    inner class RootQueryResolverUnitTests {

        @Mock
        private lateinit var {{ name }}Service: {{ Name }}Service

        @InjectMocks
        private lateinit var rootQueryResolver: {{ Name }}Resolver.RootQueryResolver

        @Test
        fun `{{ name }} delegates the call to the {{ Name }}Service`() {
            whenever({{ name }}Service.findById(1))
                .thenReturn({{ NAME }}_FIXTURE_WITH_ID_1)

            assertThat(rootQueryResolver.{{ name }}(1))
                .isEqualTo({{ NAME }}_FIXTURE_WITH_ID_1)
        }

        @Test
        fun `{{ names }} delegates the call to the {{ Name }}Service`() {
            {{#if hasRelations}}val any{{ Name }}Filter = {{ Name }}.{{ Name }}FilterInput()

            {{/if}}whenever({{ name }}Service.findAll({{#if hasRelations}}any{{ Name }}Filter{{/if}}))
                .thenReturn(listOf({{ NAME }}_FIXTURE_WITH_ID_1))

            assertThat(rootQueryResolver.{{ names }}({{#if hasRelations}}any{{ Name }}Filter{{/if}}))
                .isEqualTo(listOf({{ NAME }}_FIXTURE_WITH_ID_1))
        }

    }

    @Nested
    @ExtendWith(MockitoExtension::class)
    inner class MutationResolverUnitTests {

        @Mock
        private lateinit var {{ name }}Service: {{ Name }}Service

        @InjectMocks
        private lateinit var {{ name }}MutationResolver: {{ Name }}Resolver.MutationResolver

        @Test
        fun `create delegates the call to the {{ Name }}Service`() {
            whenever({{ name }}Service.create(CREATE_{{ NAME }}_FIXTURE_1))
                .thenReturn({{ NAME }}_FIXTURE_WITH_ID_1)

            assertThat({{ name }}MutationResolver.create{{ Name }}(CREATE_{{ NAME }}_FIXTURE_1))
                .isEqualTo({{ NAME }}_FIXTURE_WITH_ID_1)
        }

        @Test
        fun `delete{{ Name }} delegates the call to the {{ Name }}Service`() {
            {{ name }}MutationResolver.delete{{ Name }}(1)

            verify({{ name }}Service).deleteById(1)
        }

    }
{{#if hasRelations}}
    @Nested
    @ExtendWith(MockitoExtension::class)
    inner class {{ Name }}ResolverUnitTests { {{#each fields}}{{#if isFieldRelational}}

        @Mock
        private lateinit var {{ fieldTypeCamelCase }}Service: {{ fieldTypePascalCase }}Service{{/if}}{{/each}}

        @InjectMocks
        private lateinit var {{ name }}QueryResolver: {{ Name }}Resolver.{{ Name }}QueryResolver
{{#each fields}}{{#if isFieldRelational}}
        @Test
        fun `{{ fieldTypeCamelCase }} delegates the call to the {{ fieldTypePascalCase }}Service`() {
            whenever({{ fieldTypeCamelCase }}Service.findById({{ NAME }}_FIXTURE_WITH_ID_1.{{ fieldNameCamelCase }}))
                .thenReturn({{ fieldTypeScreamingSnakeCase }}_FIXTURE_WITH_ID_1)

            assertThat({{ name }}QueryResolver.{{ fieldTypeCamelCase }}({{ NAME }}_FIXTURE_WITH_ID_1))
                .isEqualTo({{ fieldTypeScreamingSnakeCase }}_FIXTURE_WITH_ID_1)
        }{{/if}}{{/each}}
    }
{{/if}}{{#each fields}}{{#if isFieldRelational}}
    @Nested
    @ExtendWith(MockitoExtension::class)
    inner class {{ fieldTypePascalCase }}ResolverUnitTests {

        @Mock
        private lateinit var {{ name }}Service: {{ Name }}Service

        @InjectMocks
        private lateinit var {{ fieldTypeCamelCase }}FieldResolver: {{ Name }}Resolver.{{ fieldTypePascalCase }}FieldResolver

        @Test
        fun `{{ name }} delegates the call to the {{ name }}Service`() {
            whenever({{ name }}Service.findBy{{ fieldNamePascalCase }}({{ fieldTypeScreamingSnakeCase }}_FIXTURE_WITH_ID_1.id!!))
                .thenReturn(listOf({{ NAME }}_FIXTURE_WITH_ID_1))

            assertThat({{ fieldTypeCamelCase }}FieldResolver.{{ names }}({{ fieldTypeScreamingSnakeCase }}_FIXTURE_WITH_ID_1))
                .isEqualTo(listOf({{ NAME }}_FIXTURE_WITH_ID_1))
        }

    }
{{/if}}{{/each}}
}
