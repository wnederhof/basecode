package {{ groupId }}.{{ artifactId }}.{{ nameLowerCase }}

import {{ groupId }}.{{ artifactId }}.{{ nameLowerCase }}.{{ namePascalCase }}Fixtures.{{ nameScreamingSnakeCase }}_FIXTURE_1
import {{ groupId }}.{{ artifactId }}.{{ nameLowerCase }}.{{ namePascalCase }}Fixtures.CREATE_{{ nameScreamingSnakeCase }}_FIXTURE_1
import {{ groupId }}.{{ artifactId }}.{{ nameLowerCase }}.{{ namePascalCase }}Fixtures.{{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1
{{#each fields}}{{#if isFieldRelational}}import {{ groupId }}.{{ artifactId }}.{{ fieldTypeLowerCase }}.{{ fieldTypePascalCase }}Fixtures.{{ fieldTypeScreamingSnakeCase }}_FIXTURE_WITH_ID_1
import {{ groupId }}.{{ artifactId }}.{{ fieldTypeLowerCase }}.{{ fieldTypePascalCase }}Service
{{/if}}{{/each}}import com.nhaarman.mockitokotlin2.verify
import com.nhaarman.mockitokotlin2.whenever
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Nested
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.extension.ExtendWith
import org.mockito.InjectMocks
import org.mockito.Mock
import org.mockito.junit.jupiter.MockitoExtension

class {{ namePascalCase }}ResolverUnitTests {

    @Nested
    @ExtendWith(MockitoExtension::class)
    inner class RootQueryResolverUnitTests {

        @Mock
        private lateinit var {{ nameCamelCase }}Service: {{ namePascalCase }}Service

        @InjectMocks
        private lateinit var rootQueryResolver: {{ namePascalCase }}Resolver.RootQueryResolver

        @Test
        fun `{{ nameCamelCase }} delegates the call to the {{ namePascalCase }}Service`() {
            whenever({{ nameCamelCase }}Service.findById(1))
                .thenReturn({{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1)

            assertThat(rootQueryResolver.{{ nameCamelCase }}(1))
                .isEqualTo({{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1)
        }

        @Test
        fun `{{ namePluralCamelCase }} delegates the call to the {{ namePascalCase }}Service`() {
            {{#if hasRelations}}val any{{ namePascalCase }}Filter = {{ namePascalCase }}.{{ namePascalCase }}FilterInput()

            {{/if}}whenever({{ nameCamelCase }}Service.findAll({{#if hasRelations}}any{{ namePascalCase }}Filter{{/if}}))
                .thenReturn(listOf({{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1))

            assertThat(rootQueryResolver.{{ namePluralCamelCase }}({{#if hasRelations}}any{{ namePascalCase }}Filter{{/if}}))
                .isEqualTo(listOf({{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1))
        }

    }

    @Nested
    @ExtendWith(MockitoExtension::class)
    inner class MutationResolverUnitTests {

        @Mock
        private lateinit var {{ nameCamelCase }}Service: {{ namePascalCase }}Service

        @InjectMocks
        private lateinit var {{ nameCamelCase }}MutationResolver: {{ namePascalCase }}Resolver.MutationResolver

        @Test
        fun `create delegates the call to the {{ namePascalCase }}Service`() {
            whenever({{ nameCamelCase }}Service.create(CREATE_{{ nameScreamingSnakeCase }}_FIXTURE_1))
                .thenReturn({{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1)

            assertThat({{ nameCamelCase }}MutationResolver.create{{ namePascalCase }}(CREATE_{{ nameScreamingSnakeCase }}_FIXTURE_1))
                .isEqualTo({{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1)
        }

        @Test
        fun `delete{{ namePascalCase }} delegates the call to the {{ namePascalCase }}Service`() {
            {{ nameCamelCase }}MutationResolver.delete{{ namePascalCase }}(1)

            verify({{ nameCamelCase }}Service).deleteById(1)
        }

    }
{{#if hasRelations}}
    @Nested
    @ExtendWith(MockitoExtension::class)
    inner class {{ namePascalCase }}ResolverUnitTests { {{#each fields}}{{#if isFieldRelational}}

        @Mock
        private lateinit var {{ fieldTypeCamelCase }}Service: {{ fieldTypePascalCase }}Service{{/if}}{{/each}}

        @InjectMocks
        private lateinit var {{ nameCamelCase }}QueryResolver: {{ namePascalCase }}Resolver.{{ namePascalCase }}QueryResolver
{{#each fields}}{{#if isFieldRelational}}
        @Test
        fun `{{ fieldTypeCamelCase }} delegates the call to the {{ fieldTypePascalCase }}Service`() {
            whenever({{ fieldTypeCamelCase }}Service.findById({{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1.{{ fieldNameCamelCase }}))
                .thenReturn({{ fieldTypeScreamingSnakeCase }}_FIXTURE_WITH_ID_1)

            assertThat({{ nameCamelCase }}QueryResolver.{{ fieldTypeCamelCase }}({{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1))
                .isEqualTo({{ fieldTypeScreamingSnakeCase }}_FIXTURE_WITH_ID_1)
        }{{/if}}{{/each}}
    }
{{/if}}{{#each fields}}{{#if isFieldRelational}}
    @Nested
    @ExtendWith(MockitoExtension::class)
    inner class {{ fieldTypePascalCase }}ResolverUnitTests {

        @Mock
        private lateinit var {{ nameCamelCase }}Service: {{ namePascalCase }}Service

        @InjectMocks
        private lateinit var {{ fieldTypeCamelCase }}FieldResolver: {{ namePascalCase }}Resolver.{{ fieldTypePascalCase }}FieldResolver

        @Test
        fun `{{ nameCamelCase }} delegates the call to the {{ nameCamelCase }}Service`() {
            whenever({{ nameCamelCase }}Service.findBy{{ fieldNamePascalCase }}({{ fieldTypeScreamingSnakeCase }}_FIXTURE_WITH_ID_1.id!!))
                .thenReturn(listOf({{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1))

            assertThat({{ fieldTypeCamelCase }}FieldResolver.{{ namePluralCamelCase }}({{ fieldTypeScreamingSnakeCase }}_FIXTURE_WITH_ID_1))
                .isEqualTo(listOf({{ nameScreamingSnakeCase }}_FIXTURE_WITH_ID_1))
        }

    }
{{/if}}{{/each}}
}
