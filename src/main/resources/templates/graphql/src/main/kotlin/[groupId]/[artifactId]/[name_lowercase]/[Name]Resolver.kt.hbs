package {{ groupId }}.{{ artifactId }}.{{ name_lowercase }}

{{#each fields}}{{#if isFieldRelational}}import {{ groupId }}.{{ artifactId }}.{{ fieldTypeLowerCase }}.{{ fieldTypePascalCase }}
import {{ groupId }}.{{ artifactId }}.{{ fieldTypeLowerCase }}.{{ fieldTypePascalCase }}Service
{{/if}}{{/each}}import graphql.kickstart.tools.GraphQLMutationResolver
import graphql.kickstart.tools.GraphQLQueryResolver{{#if hasRelations}}
import graphql.kickstart.tools.GraphQLResolver{{/if}}
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.stereotype.Component

sealed class {{ Name }}Resolver {

    @Autowired
    protected lateinit var {{ name }}Service: {{ Name }}Service
{{#each fields}}{{#if isFieldRelational}}
    @Autowired
    protected lateinit var {{ fieldTypeCamelCase }}Service: {{ fieldTypePascalCase }}Service
{{/if}}{{/each}}
    @Component
    class RootQueryResolver : GraphQLQueryResolver, {{ Name }}Resolver() {
        fun {{ name }}(id: Int): {{ Name }}? {
            return {{ name }}Service.findById(id)
        }

        fun {{ names }}({{#if hasRelations}}filter: {{ Name }}.{{ Name }}FilterInput?{{/if}}): Iterable<{{ Name }}> {
            return {{ name }}Service.findAll({{#if hasRelations}}filter{{/if}})
        }
    }

    @Component
    class MutationResolver : GraphQLMutationResolver, {{ Name }}Resolver() {
        fun create{{ Name }}(input: {{ Name }}.Create{{ Name }}Input): {{ Name }} {
            return {{ name }}Service.create(input)
        }

        fun update{{ Name }}(id: Int, input: {{ Name }}.Update{{ Name }}Input): {{ Name }}? {
            return {{ name }}Service.update(id, input)
        }

        fun delete{{ Name }}(id: Int) {
            {{ name }}Service.deleteById(id)
        }
    }
{{#if hasRelations}}
    @Component
    class {{ Name }}QueryResolver : GraphQLResolver<{{ Name }}>, {{ Name }}Resolver() { {{#each fields}}{{#if isFieldRelational}}
        fun {{ fieldTypeCamelCase }}({{ name }}: {{ Name }}): {{ fieldTypePascalCase }}? {
            return {{ fieldTypeCamelCase }}Service.findById({{ name }}.{{ fieldNameCamelCase }})
        }
{{/if}}{{/each}}    }
{{#each fields}}{{#if isFieldRelational}}
    @Component
    class {{ fieldTypePascalCase }}FieldResolver : GraphQLResolver<{{ fieldTypePascalCase }}>, {{ Name }}Resolver() {
        fun {{ names }}({{ fieldTypeCamelCase }}: {{ fieldTypePascalCase }}): List<{{ Name }}> {
            return {{ name }}Service.findBy{{ fieldNamePascalCase }}({{ fieldTypeCamelCase }}.id!!)
        }
    }
{{/if}}{{/each}}{{/if}}
}
