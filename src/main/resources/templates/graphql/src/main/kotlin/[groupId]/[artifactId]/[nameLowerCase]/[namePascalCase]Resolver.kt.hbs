package {{ groupId }}.{{ artifactId }}.{{ nameLowerCase }}

{{#each fields}}{{#if isFieldRelational}}import {{ groupId }}.{{ artifactId }}.{{ fieldTypeLowerCase }}.{{ fieldTypePascalCase }}
import {{ groupId }}.{{ artifactId }}.{{ fieldTypeLowerCase }}.{{ fieldTypePascalCase }}Service
{{/if}}{{/each}}import graphql.kickstart.tools.GraphQLMutationResolver
import graphql.kickstart.tools.GraphQLQueryResolver{{#if hasRelations}}
import graphql.kickstart.tools.GraphQLResolver{{/if}}
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.stereotype.Component

sealed class {{ namePascalCase }}Resolver {

    @Autowired
    protected lateinit var {{ nameCamelCase }}Service: {{ namePascalCase }}Service
{{#each fields}}{{#if isFieldRelational}}
    @Autowired
    protected lateinit var {{ fieldTypeCamelCase }}Service: {{ fieldTypePascalCase }}Service
{{/if}}{{/each}}
    @Component
    class RootQueryResolver : GraphQLQueryResolver, {{ namePascalCase }}Resolver() {
        fun {{ nameCamelCase }}(id: Int): {{ namePascalCase }}? {
            return {{ nameCamelCase }}Service.findById(id)
        }

        fun {{ namePluralCamelCase }}({{#if hasRelations}}filter: {{ namePascalCase }}.{{ namePascalCase }}FilterInput?{{/if}}): Iterable<{{ namePascalCase }}> {
            return {{ nameCamelCase }}Service.findAll({{#if hasRelations}}filter{{/if}})
        }
    }

    @Component
    class MutationResolver : GraphQLMutationResolver, {{ namePascalCase }}Resolver() {
        fun create{{ namePascalCase }}(input: {{ namePascalCase }}.Create{{ namePascalCase }}Input): {{ namePascalCase }} {
            return {{ nameCamelCase }}Service.create(input)
        }

        fun update{{ namePascalCase }}(id: Int, input: {{ namePascalCase }}.Update{{ namePascalCase }}Input): {{ namePascalCase }}? {
            return {{ nameCamelCase }}Service.update(id, input)
        }

        fun delete{{ namePascalCase }}(id: Int) {
            {{ nameCamelCase }}Service.deleteById(id)
        }
    }
{{#if hasRelations}}
    @Component
    class {{ namePascalCase }}QueryResolver : GraphQLResolver<{{ namePascalCase }}>, {{ namePascalCase }}Resolver() { {{#each fields}}{{#if isFieldRelational}}
        fun {{ fieldTypeCamelCase }}({{ nameCamelCase }}: {{ namePascalCase }}): {{ fieldTypePascalCase }}? {
            return {{ fieldTypeCamelCase }}Service.findById({{ nameCamelCase }}.{{ fieldNameCamelCase }})
        }
{{/if}}{{/each}}    }
{{#each fields}}{{#if isFieldRelational}}
    @Component
    class {{ fieldTypePascalCase }}FieldResolver : GraphQLResolver<{{ fieldTypePascalCase }}>, {{ namePascalCase }}Resolver() {
        fun {{ namePluralCamelCase }}({{ fieldTypeCamelCase }}: {{ fieldTypePascalCase }}): List<{{ namePascalCase }}> {
            return {{ nameCamelCase }}Service.findBy{{ fieldNamePascalCase }}({{ fieldTypeCamelCase }}.id!!)
        }
    }
{{/if}}{{/each}}{{/if}}
}
