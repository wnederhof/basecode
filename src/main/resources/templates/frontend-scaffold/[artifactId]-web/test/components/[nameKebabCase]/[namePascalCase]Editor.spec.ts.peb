import {createLocalVue, shallowMount, Wrapper} from '@vue/test-utils'
import {{namePascalCase}}Editor from '@/components/{{nameCamelCase}}/{{namePascalCase}}Editor.vue'
import gql from 'graphql-tag';
import anything = jasmine.anything;

const localVue = createLocalVue()

describe('{{namePascalCase}}Editor', () => {
  let wrapper: Wrapper<any>
  let mutate: jest.Mock

  const createComponent = (props: any) => {
    mutate = jest.fn()

    const {{nameCamelCase}} = {
      id: props.id,{%for field in fields%}
      {{field.fieldNameCamelCase}}: {{field.fieldVueTypescriptTestValue}}{%endfor%}
    }

    wrapper = shallowMount({{namePascalCase}}Editor, {
      localVue,
      apolloProvider,
      propsData: props,
      stubs: {
        VLoadingIndicator: true,
        VErrorMessage: true,
      },
      mocks: {
        $apollo: {
          mutate,
        }
      }
    })

    if (props.id) {
      wrapper.setData({ {{nameCamelCase}} })
    }
  }

  afterEach(() => {
    wrapper.destroy()
  })

  it('is a Vue instance', () => {
    createComponent({})
    expect(wrapper.vm).toBeTruthy()
  })

  it('updates {{nameCamelCase}} if id is set', async () => {
    createComponent({id: 1})
    await wrapper.vm.save{{namePascalCase}}()

    expect(mutate).toBeCalledTimes(1)

    expect(mutate).toBeCalledWith({
      mutation: gql`mutation update{{namePascalCase}}($id: ID!, $input: Update{{namePascalCase}}Input!) {
        update{{namePascalCase}}(id: $id, input: $input) {
          id
          description
          amount
        }
      }`,
      variables: anything(),
      update: anything()
    })
  })

  it('saves new {{nameCamelCase}} if id is not set', async () => {
    createComponent({})
    await wrapper.vm.save{{namePascalCase}}()

    expect(mutate).toBeCalledTimes(1)

    expect(mutate).toBeCalledWith({
      mutation: gql`mutation creat{{namePascalCase}}($input: Create{{namePascalCase}}Input!) {
        create{{namePascalCase}}(input: $input) { id }
      }`,
      variables: anything(),
      update: anything()
    })
  })

  it('emits a cancel event when cancel is called', () => {
    createComponent({})
    wrapper.vm.cancel()

    expect(wrapper.emitted()).toEqual({'cancel': [[]]})
  })
})
