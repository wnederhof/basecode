import { shallowMount, createLocalVue, Wrapper } from '@vue/test-utils'
import flushPromises from 'flush-promises'
import { createMockClient } from 'mock-apollo-client'
import VueApollo from 'vue-apollo'
import gql from 'graphql-tag'
import {{namePascalCase}}Editor from '@/components/{{nameKebabCase}}/{{namePascalCase}}Editor.vue'
import UniqueId from 'vue-unique-id'
import { MockApolloClient } from 'mock-apollo-client/dist/mockClient'

const localVue = createLocalVue()
localVue.use(UniqueId)
localVue.use(VueApollo)

describe('{{namePascalCase}}Editor', () => {
  let wrapper: Wrapper<any>
  let mockClient: MockApolloClient
  let apolloProvider: VueApollo

  const createComponent = (props: any) => {
    mockClient = createMockClient()
{%for field in fields%}{% if field.isFieldRelational %}
    mockClient.setRequestHandler(gql`query {{ field.fieldTypePluralCamelCase }} { {{ field.fieldTypePluralCamelCase }} { id } }`,
      jest.fn().mockResolvedValue({ data: { {{ field.fieldTypePluralCamelCase }}: [{ id: 1 }] } }))
{%endif%}{%endfor%}
    mockClient.setRequestHandler(gql`query {{nameCamelCase}}($id: Int) {
      {{nameCamelCase}}: {{nameCamelCase}}(id: $id) {
        id{%for field in fields%}
        {{field.fieldNameCamelCase}}{%endfor%}
      }
    }`, jest.fn().mockResolvedValue({
      data: {
        {{nameCamelCase}}: {
          id: 1{%for field in fields%},
          {{field.fieldNameCamelCase}}: {{field.fieldVueTypescriptTestValue}}{%endfor%}
        }
      }
    }))

    apolloProvider = new VueApollo({
      defaultClient: mockClient
    })

    wrapper = shallowMount({{namePascalCase}}Editor, {
      localVue,
      apolloProvider,
      propsData: props,
      stubs: {
        VLoadingIndicator: true,
        VErrorMessage: true,
      },
    })
  }

  afterEach(() => {
    wrapper.destroy()
  })

  it('contains {{nameCamelCase}} form with no data if id is not set', async () => {
    createComponent({ id: null })
    await flushPromises()
{%for field in fields%}
    expect((wrapper.findComponent({ ref: '{{field.fieldNameCamelCase}}Input' }).element as {% if field.isFieldRelational %}HTMLSelectElement).selectedIndex).toBe(-1){% else %}HTMLInputElement).value).toBe(''){%endif%}{%endfor%}
  })

  it('contains {{nameCamelCase}} form with data if id is set', async () => {
    createComponent({ id: 1 })
    await flushPromises()
{%for field in fields%}
    expect((wrapper.findComponent({ ref: '{{field.fieldNameCamelCase}}Input' }).element as HTMLInputElement).value).toContain({{field.fieldVueTypescriptTestValue}}){%endfor%}
  })

  it('emits cancel event when edit is clicked', async () => {
    createComponent({ id: null })
    await flushPromises()
    await wrapper.findComponent({ ref: 'cancelBtn' }).trigger('click')
    expect(wrapper.emitted()['cancel']).toBeTruthy()
  })

  it('runs a mutation on submit and emits save event', async () => {
    createComponent({ id: 1 })
    await flushPromises()
    const queryHandler = jest.fn().mockResolvedValue(true)
    mockClient.setRequestHandler(gql`mutation update{{namePascalCase}}($id: ID!, $input: Update{{namePascalCase}}Input!) {
      update{{namePascalCase}}(id: $id, input: $input) {
        id{%for field in fields%}
        {{field.fieldNameCamelCase}}{%endfor%}
      }
    }`, queryHandler)

    await wrapper.findComponent({ ref: '{{nameCamelCase}}Editor' }).trigger('submit.prevent')
    expect(queryHandler).toBeCalledTimes(1)

    await wrapper.vm.$nextTick()
    expect(wrapper.emitted()['save']).toBeTruthy()
  })
})
