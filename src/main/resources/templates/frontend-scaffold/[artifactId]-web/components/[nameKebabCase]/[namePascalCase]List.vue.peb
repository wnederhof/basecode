<template>
  <VLoadingIndicator v-if="$apollo.loading" />
  <VErrorMessage v-else-if="error" :message="error" />
  <VSectionLayout
    v-else
    header="{{namePluralPascalCase}}"
    :showHeader="showHeader"
    @new="new{{namePascalCase}}"
    showNew
  >
    <VDataList
      primaryKey="id"
      :fields="fields"
      :rows="{{namePluralCamelCase}}"
      :to="row => '/{{ namePluralKebabCase }}/' + row.id"
      @edit="row => edit{{namePascalCase}}(row.id)"
      @delete="row => delete{{namePascalCase}}(row.id)"
    />
    <VModal :title="modalTitle" :visible="{{ nameCamelCase }}EditorVisible">
      <{{namePascalCase}}Editor
        ref="{{nameCamelCase}}Editor"
        :key="selectedId"
        :id="selectedId"{%for field in fields%}{%if field.isFieldRelational%}
        :{{ field.fieldNameKebabCase }}="this.$props.{{ field.fieldNameCamelCase }}"{%endif%}{%endfor%}
        @save="closeEditor"
        @cancel="closeEditor"
      />
    </VModal>
  </VSectionLayout>
</template>

<script lang="ts">
import { Vue } from 'vue-property-decorator'
import { Component } from 'nuxt-property-decorator'
import gql from 'graphql-tag'
import VErrorMessage from '@/components/VErrorMessage.vue'
import VModal from '@/components/VModal.vue'
import VLoadingIndicator from '@/components/VLoadingIndicator.vue'
import VDataList from '@/components/VDataList.vue'
import VSectionLayout from '@/components/VSectionLayout.vue'
import {{ namePascalCase }}Editor from '@/components/{{ nameKebabCase }}/{{ namePascalCase }}Editor.vue'

@Component({
  name: '{{namePascalCase}}List',
  components: { VErrorMessage, VLoadingIndicator, {{ namePascalCase }}Editor, VModal, VDataList, VSectionLayout },
  apollo: {
    {{namePluralCamelCase}}: {
      query: gql`query {{namePluralCamelCase}}{%if hasRelations%}($filter: {{namePascalCase}}Filter){%endif%} {
        {{namePluralCamelCase}}: {{namePluralCamelCase}}{%if hasRelations%}(filter: $filter){%endif%} {
          id{%for field in fields%}
          {{field.fieldNameCamelCase}}{%endfor%}
        }
      }`,

      error (error) {
        this.error = error.message
      }{%if hasRelations%},

      variables () { {%for field in fields%}{%if field.isFieldRelational%}
        const {{field.fieldNameCamelCase}} = this.$props.{{field.fieldNameCamelCase}}{%endif%}{%endfor%}
        return { filter: { {%for field in fields%}{%if field.isFieldRelational%}{{field.fieldNameCamelCase}}, {%endif%}{%endfor%} } }
      }{%endif%}
    }
  },

  props: {
    id: [Number, String]{%for field in fields%}{%if field.isFieldRelational%},
    {{field.fieldNameCamelCase}}: [Number, String]{%endif%}{%endfor%},
    showHeader: [Boolean]
  }
})
export default class {{namePascalCase}}List extends Vue {
  {{namePluralCamelCase}} = null
  error = null
  {{nameCamelCase}}EditorVisible = false
  selectedId: number | null = null

  get modalTitle () {
    return this.selectedId ? 'Edit {{ namePascalCase }}' : 'New {{ namePascalCase }}'
  }

  fields = [{%for field in fields%}
    {
      key: '{{ field.fieldNameCamelCase }}',
      label: '{{ field.fieldNamePascalCase }}',
      value: (data: any) => data.{{ field.fieldNameCamelCase }},
      type: '{{ field.fieldInputType }}'
    },{%endfor%}
  ].filter((el) => !this.$props[el.key])

  new{{namePascalCase}} () {
    this.{{nameCamelCase}}EditorVisible = true
    this.selectedId = null
  }

  edit{{namePascalCase}} (id: number) {
    this.{{nameCamelCase}}EditorVisible = true
    this.selectedId = id
  }

  closeEditor () {
    this.{{nameCamelCase}}EditorVisible = false
    this.selectedId = null
  }

  async delete{{namePascalCase}} (id: number) {
    const mutation = gql`mutation delete{{namePascalCase}}($id: ID!) {
      delete{{namePascalCase}}(id: $id)
    }`

    if (confirm('Are you sure?')) {
      await this.$apollo.mutate({
        mutation,
        variables: { id },
        update: async () => {
          await this.$apollo.getClient().resetStore()
        }
      })
    }
  }
}
</script>
