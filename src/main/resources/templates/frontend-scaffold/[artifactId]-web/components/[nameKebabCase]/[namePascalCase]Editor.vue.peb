<template>
  <VLoadingIndicator v-if="$apollo.loading" />
  <VErrorMessage v-else-if="error" :message="error" />
  <VSectionLayout
    v-else
    header="Edit {{namePluralPascalCase}}"
    :showHeader="showHeader"
  >
    <VDataForm
      :fields="fields"
      :data="{{nameCamelCase}}"
      @submit="save{{namePascalCase}}"
      @cancel="cancel"
    />
  </VSectionLayout>
</template>

<script lang="ts">
import { Vue } from 'vue-property-decorator'
import { Component } from 'nuxt-property-decorator'
import gql from 'graphql-tag'
import VErrorMessage from '@/components/VErrorMessage.vue'
import VLoadingIndicator from '@/components/VLoadingIndicator.vue'
import VDataForm from '@/components/VDataForm.vue'
import VSectionLayout from '@/components/VSectionLayout.vue'

@Component({
  name: '{{namePascalCase}}Editor',
  components: { VErrorMessage, VLoadingIndicator, VDataForm, VSectionLayout },
  apollo: { {%for field in fields%}{% if field.isFieldRelational %}
    {{ field.fieldTypePluralCamelCase }}: {
      query: gql`query {{ field.fieldTypePluralCamelCase }} { {{ field.fieldTypePluralCamelCase }} { id } }`,

      skip () {
        return !!this.$props.fieldNameCamelCase
      },

      error (error) {
        this.error = error.message
      },

      result ({ data }) {
        this.{{ field.fieldTypePluralCamelCase }} = data.{{ field.fieldTypePluralCamelCase }}
      }
    },
{%endif%}{%endfor%}
    {{nameCamelCase}}: {
      query: gql`query {{nameCamelCase}}($id: ID!) {
        {{nameCamelCase}}: {{nameCamelCase}}(id: $id) {
          id{%for field in fields%}
          {{field.fieldNameCamelCase}}{%endfor%}
        }
      }`,

      error (error) {
        this.error = error.message
      },

      variables () {
        return {
          id: this.$props.id
        }
      },

      skip () {
        return !this.$props.id
      },

      result ({ data }) {
        this.{{nameCamelCase}} = Object.assign({}, data.{{nameCamelCase}})
      }
    }
  },

  props: {
    id: [Number, String]{%for field in fields%}{%if field.isFieldRelational%},
    {{field.fieldNameCamelCase}}: [Number, String]{%endif%}{%endfor%},
    showHeader: [Boolean]
  }
})
export default class {{namePascalCase}}Editor extends Vue {
  {{nameCamelCase}} = {
    id: null,{%for field in fields%}
    {{field.fieldNameCamelCase}}: {%if field.isFieldNullable%}''{%else%}null{%endif%},{%endfor%}
  }
  error = null{%for field in fields%}{% if field.isFieldRelational %}
  {{ field.fieldTypePluralCamelCase }} = []{%endif%}{%endfor%}

  get fields() {
    return [
      {
        name: 'id',
        type: 'Id',
      },{%for field in fields%}
      {
        name: '{{ field.fieldNameCamelCase }}',
        label: '{{ field.fieldNamePascalCase }}',
        type: '{{ field.fieldInputType }}'{% if field.isFieldRelational %},
        options: this.{{ field.fieldTypePluralCamelCase }}.map({{ field.fieldTypeCamelCase }} => {
          return {label: {{ field.fieldTypeCamelCase }}.id, value: {{ field.fieldTypeCamelCase }}.id}
        }){%endif%}
      },{%endfor%}
    ]
  }

  async save{{namePascalCase}} () {
    if (this.{{nameCamelCase}}.id) {
      await this.update{{namePascalCase}}()
    } else {
      await this.create{{namePascalCase}}()
    }
  }

  private async update{{namePascalCase}} () {
    const mutation = gql`mutation update{{namePascalCase}}($id: ID!, $input: Update{{namePascalCase}}Input!) {
      update{{namePascalCase}}(id: $id, input: $input) {
        id{%for field in fields%}
        {{field.fieldNameCamelCase}}{%endfor%}
      }
    }`

    const {{nameCamelCase}}Input: any = Object.assign({}, this.{{nameCamelCase}})
    delete {{nameCamelCase}}Input.__typename

    const { id, ...input } = {{nameCamelCase}}Input
{%for field in fields%}{%if field.isFieldRelational%}
    if (this.$props.{{field.fieldNameCamelCase}}) {
      input.{{field.fieldNameCamelCase}} = this.$props.{{field.fieldNameCamelCase}}
    }
{%endif%}{%endfor%}
    await this.$apollo.mutate({
      mutation,
      variables: { id, input },
      update: () => {
        this.$apollo.getClient().resetStore()
      }
    })

    this.$emit('save', this.{{nameCamelCase}})
  }

  private async create{{namePascalCase}} () {
    const mutation = gql`mutation create{{namePascalCase}}($input: Create{{namePascalCase}}Input!) {
      create{{namePascalCase}}(input: $input) { id }
    }`

    const input: any = Object.assign({}, this.{{nameCamelCase}})
    delete input.id
    delete input.__typename
{%for field in fields%}{%if field.isFieldRelational%}
    if (this.$props.{{field.fieldNameCamelCase}}) {
      input.{{field.fieldNameCamelCase}} = this.$props.{{field.fieldNameCamelCase}}
    }
{%endif%}{%endfor%}
    await this.$apollo.mutate({
      mutation,
      variables: { input },
      update: () => {
        this.$apollo.getClient().resetStore()
      }
    })

    this.$emit('save', this.{{nameCamelCase}})
  }

  cancel () {
    this.$emit('cancel')
  }
}
</script>
