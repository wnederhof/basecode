<template>
  <VLoadingIndicator v-if="$apollo.loading" />
  <VErrorMessage v-else-if="error" :message="error" />
  <div v-else>
    <NLink to="/{{namePluralKebabCase}}">
      List of {{namePluralPascalCase}}
    </NLink>
    <button ref="edit{{namePascalCase}}Btn" @click="toggleEditor">
      Edit {{namePascalCase}}
    </button>
    <table>
      <tbody>
        <tr>
          <td>Id</td>
          <td>{{ "{{" }} {{nameCamelCase}}.id {{ "}}" }}</td>
        </tr>{%for field in fields%}
        <tr>
          <td>{{field.fieldNamePascalCase}}</td>
          <td>{{ "{{" }} {{nameCamelCase}}.{{field.fieldNameCamelCase}} {{ "}}" }}</td>
        </tr>{%endfor%}
      </tbody>
    </table>
    <VModal title="Edit {{namePascalCase}}" :visible="{{namePascalCase}}EditorVisible">
      <{{namePascalCase}}Editor
        ref="{{nameCamelCase}}Editor"
        :id="$props.{{nameCamelCase}}Id"{%for field in fields%}{%if field.isFieldRelational%}
        :{{ field.fieldNameKebabCase }}="$props.{{ field.fieldNameCamelCase }}"{%endif%}{%endfor%}
        @save="toggleEditor"
        @cancel="toggleEditor"
      />
    </VModal>
  </div>
</template>

<script lang="ts">
import gql from 'graphql-tag'
import { Vue } from 'vue-property-decorator'
import Component from 'nuxt-class-component'
import VErrorMessage from '@/components/VErrorMessage.vue'
import VModal from '@/components/VModal.vue'
import VLoadingIndicator from '@/components/VLoadingIndicator.vue'
import {{ namePascalCase }}Editor from '@/components/{{ nameKebabCase }}/{{ namePascalCase }}Editor.vue'

@Component({
  name: '{%namePascalCase%}Details',
  components: { VErrorMessage, VLoadingIndicator, {{ namePascalCase }}Editor },
  apollo: {
    {{nameCamelCase}}: {
      query: gql`query {{nameCamelCase}}($id: ID!) {
        {{nameCamelCase}}: {{nameCamelCase}}(id: $id) {
          id{%for field in fields%}
          {{field.fieldNameCamelCase}}{%endfor%}
        }
      }`,

      error (error) {
        this.error = error.message
      },

      variables () {
        return {
          id: this.$props.{{nameCamelCase}}Id
        }
      }
    }
  },

  props: {
    {{nameCamelCase}}Id: [Number, String]
  }
})
export default class {{namePascalCase}}Details extends Vue {
  {{nameCamelCase}} = null
  error = null

  {{nameCamelCase}}EditorVisible = false

  toggleEditor () {
    this.{{nameCamelCase}}EditorVisible = !this.{{nameCamelCase}}EditorVisible
  }
}
</script>
