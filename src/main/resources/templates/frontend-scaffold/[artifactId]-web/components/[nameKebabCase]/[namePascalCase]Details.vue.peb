<template>
  <VLoadingIndicator v-if="$apollo.loading" />
  <VErrorMessage v-else-if="error" :message="error" />
  <VSectionLayout
    v-else
    header="{{namePluralPascalCase}}"
    :showHeader="showHeader"
    @edit="toggleEditor"
    showEdit
  >
    <VDataDetails
      :fields="fields"
      :data="{{nameCamelCase}}"
    />

    <slot />

    <VModal title="Edit {{namePascalCase}}" :visible="{{nameCamelCase}}EditorVisible">
      <{{namePascalCase}}Editor
        ref="{{nameCamelCase}}Editor"
        :id="$props.{{nameCamelCase}}Id"{%for field in fields%}{%if field.isFieldRelational%}
        :{{ field.fieldNameKebabCase }}="$props.{{ field.fieldNameCamelCase }}"{%endif%}{%endfor%}
        @save="toggleEditor"
        @cancel="toggleEditor"
      />
    </VModal>
  </VSectionLayout>
</template>

<script lang="ts">
import gql from 'graphql-tag'
import { Vue } from 'vue-property-decorator'
import { Component } from 'nuxt-property-decorator'
import VErrorMessage from '@/components/VErrorMessage.vue'
import VModal from '@/components/VModal.vue'
import VLoadingIndicator from '@/components/VLoadingIndicator.vue'
import VSectionLayout from '@/components/VSectionLayout.vue'
import VDataDetails from '@/components/VDataDetails.vue'
import {{ namePascalCase }}Editor from '@/components/{{ nameKebabCase }}/{{ namePascalCase }}Editor.vue'

@Component({
  name: '{{namePascalCase}}Details',
  components: { VErrorMessage, VLoadingIndicator, {{ namePascalCase }}Editor, VModal, VSectionLayout, VDataDetails },
  apollo: {
    {{nameCamelCase}}: {
      query: gql`query {{nameCamelCase}}($id: ID!) {
        {{nameCamelCase}}: {{nameCamelCase}}(id: $id) {
          id{%for field in fields%}
          {{field.fieldNameCamelCase}}{%endfor%}
        }
      }`,

      error (error) {
        this.error = error.message
      },

      variables () {
        return {
          id: this.$props.{{nameCamelCase}}Id
        }
      }
    }
  },

  props: {
    {{nameCamelCase}}Id: [Number, String],
    showHeader: [Boolean]
  }
})
export default class {{namePascalCase}}Details extends Vue {
  {{nameCamelCase}} = null
  error = null
  {{nameCamelCase}}EditorVisible = false
  fields = [{%for field in fields%}
    {
      key: '{{ field.fieldNameCamelCase }}',
      label: '{{ field.fieldNamePascalCase }}',
      value: (data: any) => data.{{ field.fieldNameCamelCase }},
      type: '{{ field.fieldInputType }}'
    },{%endfor%}
  ]

  toggleEditor () {
    this.{{nameCamelCase}}EditorVisible = !this.{{nameCamelCase}}EditorVisible
  }
}
</script>
