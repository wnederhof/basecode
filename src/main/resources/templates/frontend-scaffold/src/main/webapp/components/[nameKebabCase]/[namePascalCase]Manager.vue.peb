<template>
  <div>
    <{{namePascalCase}}List ref="{{nameCamelCase}}List"{%for field in fields%}{%if field.isFieldRelational%} :{{field.fieldNameKebabCase}}="{{field.fieldNameCamelCase}}"{%endif%}{%endfor%} @edit:{{nameCamelCase}}="openEditor" />
    <{%if usesBootstrapComponents%}BButton{%else%}button{%endif%} ref="openNewEditorBtn" @click="openNewEditor">New {{namePascalCase}}</{%if usesBootstrapComponents%}BButton{%else%}button{%endif%}>{%if usesBootstrapComponents%}
    <BModal
      v-model="{{nameCamelCase}}EditorVisible"
      :title="modalTitle"
      hide-footer
    >
      <{{namePascalCase}}Editor
        v-if="{{nameCamelCase}}EditorVisible"
        ref="{{nameCamelCase}}Editor"
        :id="selectedId"{%for field in fields%}{%if field.isFieldRelational%}
        :{{ field.fieldNameKebabCase }}="this.$props.{{ field.fieldNameCamelCase }}"{%endif%}{%endfor%}
        @save:{{nameCamelCase}}="closeEditor"
        @cancel:{{nameCamelCase}}="closeEditor"
      />
    </BModal>{%else%}
    <div v-if="{{nameCamelCase}}EditorVisible">
      <h2>{{ modalTitle }}</h2>
      <{{namePascalCase}}Editor
        v-if="{{nameCamelCase}}EditorVisible"
        ref="{{nameCamelCase}}Editor"
        :key="selectedId"
        :id="selectedId"{%for field in fields%}{%if field.isFieldRelational%}
        :{{ field.fieldNameKebabCase }}="this.$props.{{ field.fieldNameCamelCase }}"{%endif%}{%endfor%}
        @save:{{nameCamelCase}}="closeEditor"
        @cancel:{{nameCamelCase}}="closeEditor"
      />
    </div>{%endif%}
  </div>
</template>

<script lang="ts">
import Component from 'nuxt-class-component'
import Vue from 'vue'

@Component{%if hasRelations%}({
  props: { {%for field in fields%}{%if field.isFieldRelational%}
    {{field.fieldNameCamelCase}}: [Number, String],{%endif%}{%endfor%}
  }
}){%endif%}
export default class {{namePascalCase}}Manager extends Vue {
  {{nameCamelCase}}EditorVisible = false
  selectedId: number | null = null

  get modalTitle () {
    return this.selectedId ? 'Edit {{ namePascalCase }}' : 'New {{ namePascalCase }}'
  }

  openEditor ({{nameCamelCase}}Id: number) {
    this.{{nameCamelCase}}EditorVisible = true
    this.selectedId = {{nameCamelCase}}Id
  }

  openNewEditor () {
    this.{{nameCamelCase}}EditorVisible = true
    this.selectedId = null
  }

  closeEditor () {
    this.{{nameCamelCase}}EditorVisible = false
    this.selectedId = null
  }
}
</script>
