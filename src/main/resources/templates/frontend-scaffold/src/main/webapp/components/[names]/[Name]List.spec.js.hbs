{{=<% %>=}}import { shallowMount, createLocalVue, RouterLinkStub } from '@vue/test-utils'
import flushPromises from 'flush-promises'
import { createMockClient } from 'mock-apollo-client'
import VueApollo from 'vue-apollo'
import gql from 'graphql-tag'
import <%Name%>List from './<%Name%>List.vue'

const localVue = createLocalVue()
localVue.use(VueApollo)

describe('<%Name%>List', () => {
  let wrapper
  let mockClient
  let apolloProvider

  const createComponent = () => {
    mockClient = createMockClient()

    mockClient.setRequestHandler(gql`
      query all<%Names%> {
        <%names%>: all<%Names%> {
          id<%#each fields%>
          <%fieldName%><%/each%>
        }
      }
    `, jest.fn().mockResolvedValue({
      data: {
        <%names%>: [
          {
            id: 1,<%#each fields%>
            <%fieldName%>: 'Some <%FieldName%>',<%/each%>
          }
        ]
      }
    }))

    apolloProvider = new VueApollo({
      defaultClient: mockClient
    })

    wrapper = shallowMount(<%Name%>List, {
      localVue,
      apolloProvider,
      stubs: {
        NuxtLink: RouterLinkStub
      }
    })
  }

  afterEach(() => {
    if (wrapper) {
      wrapper.destroy()
    }
    mockClient = null
    apolloProvider = null
  })

  it('is a Vue instance', () => {
    createComponent()
    expect(wrapper.vm).toBeTruthy()
  })

  it('shows loading when fetching data', () => {
    createComponent()
    expect(wrapper.text()).toContain('Loading...')
  })

  it('contains <%name%> list', async () => {
    createComponent()
    await flushPromises()
<%#each fields%>
    expect(wrapper.text()).toContain('Some <%FieldName%>')<%/each%>
  })

  it('does not run a mutation on delete with no confirmation', async () => {
    createComponent()
    await flushPromises()
    const queryHandler = jest.fn().mockResolvedValue(false)
    global.confirm = () => false
    mockClient.setRequestHandler(gql`
      mutation delete<%Name%>ById($id: ID!) {
        delete<%Name%>ById(id: $id)
      }
    `, queryHandler)

    await wrapper.find('button').trigger('click')
    expect(queryHandler).toBeCalledTimes(0)
  })

  it('runs a mutation on delete with confirmation', async () => {
    createComponent()
    await flushPromises()
    const queryHandler = jest.fn().mockResolvedValue(true)
    global.confirm = () => true
    mockClient.setRequestHandler(gql`
      mutation delete<%Name%>ById($id: ID!) {
        delete<%Name%>ById(id: $id)
      }
    `, queryHandler)

    await wrapper.find('button').trigger('click')
    expect(queryHandler).toBeCalledTimes(1)
  })
})<%={{ }}=%>
