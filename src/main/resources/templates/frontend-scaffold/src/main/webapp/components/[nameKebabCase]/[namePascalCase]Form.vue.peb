<template>
  <div v-if="$apollo.loading">
    Loading...
  </div>
  <div v-else-if="error">
    Unable to load component. Error message: {{ error }}
  </div>
  <form
    v-else
    ref="{{nameCamelCase}}Form"
    @submit.prevent="save{{namePascalCase}}"
  >
    <input
      v-if="{{nameCamelCase}}.id"
      :id="$id('id')"
      v-model="{{nameCamelCase}}.id"
      type="hidden"
    >
{%for field in fields%}
    <div{%if field.isFieldRelational%} v-if="this.$props.{{field.fieldNamePascalCase}}"{%endif%}>
      <label :for="$id('{{field.fieldNameCamelCase}}')">{{field.fieldNamePascalCase}}</label>{%if not isFieldOfTypeText%}
      <input
        :id="$id('{{field.fieldNameCamelCase}}')"
        ref="{{field.fieldNameCamelCase}}Input"
        v-model="{{nameCamelCase}}.{{field.fieldNameCamelCase}}"
        type="{{field.fieldHtmlInputType}}"{%if not isFieldNullable%}{%if isString%}
        required{%endif%}{%endif%}
      >{%else%}
      <textarea
        :id="$id('{{field.fieldNameCamelCase}}')"
        ref="{{field.fieldNameCamelCase}}Input"
        v-model="{{nameCamelCase}}.{{field.fieldNameCamelCase}}"{%if not isFieldNullable%}{%if isString%}
        required{%endif%}{%endif%}
      ></textarea>{%endif%}
    </div>{%if field.isFieldRelational%}
    <input
      v-if="{{field.fieldNameCamelCase}}.id"
      :id="$id('{{field.fieldNameCamelCase}}')"
      v-model="{{field.fieldNameCamelCase}}.id"
      type="hidden"
    >
{%endif%}{%endfor%}
    <div>
      {%if usesBootstrapTheme%}<b-button type="submit">Save</b-button>{%else%}<button>Save</button>{%endif%}
      <{%if usesBootstrapTheme%}b-button{%else%}button{%endif%}
        ref="cancelBtn"
        type="button"
        @click="close"
      >
        Close
      </{%if usesBootstrapTheme%}b-button{%else%}button{%endif%}>
    </div>
  </form>
</template>

<script lang="ts">
import { Vue } from 'vue-property-decorator'
import Component from 'nuxt-class-component'
import gql from 'graphql-tag'

@Component({
  apollo: {
    {{nameCamelCase}}: {
      query: gql`
        query {{nameCamelCase}}($id: Int) {
          {{nameCamelCase}}: {{nameCamelCase}}(id: $id) {
            id{%for field in fields%}
            {{field.fieldNameCamelCase}}{%endfor%}
          }
        }
      `,

      error (error) {
        this.error = error.message
      },

      variables () {
        return {
          id: this.$props.id
        }
      },

      skip () {
        return !this.$props.id
      },

      result ({ data }) {
        this.{{nameCamelCase}} = Object.assign({}, data.{{nameCamelCase}})
      }
    }
  },

  props: {
    id: [Number, String]{%for field in fields%}{%if field.isFieldRelational%},
    {{field.fieldNameCamelCase}}: [Number, String]{%endif%}{%endfor%}
  }
})
export default class {{namePascalCase}}Form extends Vue {
  {{nameCamelCase}} = {
    id: null,{%for field in fields%}
    {{field.fieldNameCamelCase}}: {%if field.isFieldNullable%}''{%else%}null{%endif%},{%endfor%}
  }
  error = null

  async save{{namePascalCase}} () {
    if (this.{{nameCamelCase}}.id) {
      await this.update{{namePascalCase}}()
    } else {
      await this.create{{namePascalCase}}()
    }
  }

  private async update{{namePascalCase}}() {
    const mutation = gql`
      mutation update{{namePascalCase}}($id: ID!, $input: Update{{namePascalCase}}Input!) {
        update{{namePascalCase}}(id: $id, input: $input) {
          id{%for field in fields%}
          {{field.fieldNameCamelCase}}{%endfor%}
        }
      }
    `

    const {{nameCamelCase}}Input: any = Object.assign({}, this.{{nameCamelCase}})
    delete {{nameCamelCase}}Input.__typename

    const { id, ...input } = {{nameCamelCase}}Input

    await this.$apollo.mutate({
      mutation,
      variables: { id, input },
      update: () => {
        this.$apollo.getClient().resetStore()
      }
    })

    this.$emit('save:{{nameCamelCase}}', this.{{nameCamelCase}})
  }

  private async create{{namePascalCase}}() {
    const mutation = gql`
      mutation create{{namePascalCase}}($input: Create{{namePascalCase}}Input!) {
        create{{namePascalCase}}(input: $input) { id }
      }
    `

    const {{nameCamelCase}}Input: any = Object.assign({}, this.{{nameCamelCase}})
    delete {{nameCamelCase}}Input.id
    delete {{nameCamelCase}}Input.__typename

    await this.$apollo.mutate({
      mutation,
      variables: { input: {{nameCamelCase}}Input },
      update: () => {
        this.$apollo.getClient().resetStore()
      }
    })

    this.$emit('save:{{nameCamelCase}}', this.{{nameCamelCase}})
  }

  close () {
    this.$emit('close:{{nameCamelCase}}Form')
  }
}
</script>
