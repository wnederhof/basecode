{{=<% %>=}}<template>
  <div v-if="$apollo.loading">
    Loading...
  </div>
  <div v-else-if="error">
    Unable to load component. Error message: {{ error }}
  </div>
  <form
    v-else
    ref="<%name%>Form"
    @submit.prevent="save<%Name%>"
  >
    <input
      v-if="<%name%>.id"
      :id="$id('id')"
      v-model="<%name%>.id"
      type="hidden"
    >
<%#each fields%>
    <div>
      <label :for="$id('<%fieldName%>')"><%FieldName%></label>
      <input
        :id="$id('<%fieldName%>')"
        ref="<%fieldName%>Input"
        v-model="<%name%>.<%fieldName%>"
        type="text"
      >
    </div><%/each%>
    <div>
      <button>Save <%Name%></button>
      <button
        ref="cancelBtn"
        type="button"
        @click="close"
      >
        Close <%Name%>
      </button>
    </div>
  </form>
</template>

<script lang="ts">
import { Vue } from 'vue-property-decorator'
import Component from 'nuxt-class-component'
import gql from 'graphql-tag'

@Component({
  apollo: {
    <%name%>: {
      query: gql`
        query <%name%>($id: Int) {
          <%name%>: <%name%>(id: $id) {
            id<%#each fields%>
            <%fieldName%><%/each%>
          }
        }
      `,

      error (error) {
        this.error = error.message
      },

      variables () {
        return {
          id: this.$props.<%name%>Id
        }
      },

      skip () {
        return !this.$props.<%name%>Id
      },

      result ({ data }) {
        this.<%name%> = Object.assign({}, data.<%name%>)
      }
    }
  },

  props: { <%name%>Id: [Number, String] }
})
export default class <%Name%>Form extends Vue {
  <%name%> = { <%#each fields%><%fieldName%>: '', <%/each%>}
  error = null

  async save<%Name%> () {
    if (this.<%name%>.id) {
      await this.update<%Name%>()
    } else {
      await this.create<%Name%>()
    }
  }

  private async updateCompany() {
    const mutation = gql`
      mutation save<%Name%>($id: ID!, $<%name%>: <%Name%>Input!) {
        update<%Name%>(id: $id, <%name%>: $<%name%>) {
          id<%#each fields%>
          <%fieldName%><%/each%>
        }
      }
    `

    const <%name%>Input = Object.assign({}, this.<%name%>)
    delete <%name%>Input.__typename

    const { id, ...input } = <%name%>Input

    await this.$apollo.mutate({
      mutation,
      variables: { id, input },
      update: () => {
        this.$apollo.getClient().resetStore()
      }
    })

    this.$emit('save:<%name%>', this.<%name%>)
  }

  private async createCompany() {
    const mutation = gql`
      mutation save<%Name%>($<%name%>: <%Name%>Input!) {
        create<%Name%>(<%name%>: $<%name%>) { id }
      }
    `

    const <%name%>Input = Object.assign({}, this.<%name%>)
    delete <%name%>Input.__typename

    await this.$apollo.mutate({
      mutation,
      variables: { input: <%name%>Input },
      update: () => {
        this.$apollo.getClient().resetStore()
      }
    })

    this.$emit('save:<%name%>', this.<%name%>)
  }

  close () {
    this.$emit('close:<%name%>Form')
  }
}
</script><%={{ }}=%>
