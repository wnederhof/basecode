{{=<% %>=}}import { shallowMount, createLocalVue, Wrapper } from '@vue/test-utils'
import flushPromises from 'flush-promises'
import { createMockClient } from 'mock-apollo-client'
import VueApollo from 'vue-apollo'
import gql from 'graphql-tag'
import <%Name%>Form from './<%Name%>Form.vue'
import { MockApolloClient } from 'mock-apollo-client/dist/mockClient'

const localVue = createLocalVue()
localVue.use(VueApollo)

describe('<%Name%>Form', () => {
  let wrapper: Wrapper<any>
  let mockClient: MockApolloClient
  let apolloProvider: VueApollo

  const createComponent = (props: any) => {
    mockClient = createMockClient()

    mockClient.setRequestHandler(gql`
      query <%name%>ById($id: Int) {
        <%name%>: <%name%>ById(id: $id) {
          id<%#each fields%>
          <%fieldName%><%/each%>
        }
      }
    `, jest.fn().mockResolvedValue({
      data: {
        <%name%>: {
          id: 1<%#each fields%>,
          <%fieldName%>: 'Some <%FieldName%>'<%/each%>
        }
      }
    }))

    apolloProvider = new VueApollo({
      defaultClient: mockClient
    })

    wrapper = shallowMount(<%Name%>Form, {
      localVue,
      apolloProvider,
      propsData: props
    })
  }

  afterEach(() => {
    wrapper.destroy()
  })

  it('is a Vue instance', () => {
    createComponent({ <%name%>Id: 1 })
    expect(wrapper.vm).toBeTruthy()
  })

  it('contains <%name%> form with no data if id is not set', () => {
    createComponent({ <%name%>Id: null })<%#each fields%>
    expect((wrapper.findComponent({ ref: '<%fieldName%>-input' }).element as HTMLInputElement).value).toContain('')<%/each%>
  })

  it('shows loading when fetching data if id is set', () => {
    createComponent({ <%name%>Id: 1 })
    expect(wrapper.text()).toContain('Loading...')
  })

  it('contains <%name%> form with data if id is set', async () => {
    createComponent({ <%name%>Id: 1 })
    await flushPromises()
<%#each fields%>
    expect((wrapper.findComponent({ ref: '<%fieldName%>-input' }).element as HTMLInputElement).value).toContain('Some <%FieldName%>')<%/each%>
  })

  it('emits edit event when edit is clicked', async () => {
    createComponent({ <%name%>Id: null })
    await flushPromises()
    await wrapper.findComponent({ ref: 'cancel-btn' }).trigger('click')
    expect(wrapper.emitted().cancel).toBeTruthy()
  })

  it('runs a mutation on submit and emits save event', async () => {
    createComponent({ <%name%>Id: 1 })
    await flushPromises()
    const queryHandler = jest.fn().mockResolvedValue(true)
    mockClient.setRequestHandler(gql`
      mutation save<%Name%>($<%name%>: <%Name%>Input!) {
        save<%Name%>(<%name%>: $<%name%>) {
          id<%#each fields%>
          <%fieldName%><%/each%>
        }
      }
    `, queryHandler)

    await wrapper.findComponent({ ref: '<%name%>-form' }).trigger('submit.prevent')
    expect(queryHandler).toBeCalledTimes(1)

    await wrapper.vm.$nextTick()
    expect(wrapper.emitted().save).toBeTruthy()
  })
})<%={{ }}=%>
