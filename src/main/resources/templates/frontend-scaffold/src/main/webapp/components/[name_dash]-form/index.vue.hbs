{{=<% %>=}}<template>
  <div v-if="$apollo.loading">
    Loading...
  </div>
  <form ref="<%name%>-form" v-else @submit.prevent="save<%Name%>">
    <input v-if="<%name%>" id="id" v-model="<%name%>.id" type="hidden"><%#each fields%>
    <div>
      <label for="<%fieldName%>"><%FieldName%></label>
      <input id="<%fieldName%>" ref="<%fieldName%>-input" v-model="<%name%>.<%fieldName%>" type="text">
    </div><%/each%>
    <div>
      <button>Save <%Name%></button>
      <button ref="cancel-btn" type="button" @click="close">Close <%Name%></button>
    </div>
  </form>
</template>

<script lang="ts">
import { Vue } from 'vue-property-decorator'
import Component from 'nuxt-class-component'
import gql from 'graphql-tag'

@Component({
  apollo: {
    <%name%>: {
      query: gql`
        query <%name%>ById($id: Int) {
          <%name%>: <%name%>ById(id: $id) {
            id<%#each fields%>
            <%fieldName%><%/each%>
          }
        }`,
      variables () {
        return {
          id: this.$props.<%name%>Id
        }
      },
      skip () {
        return !this.$props.<%name%>Id
      },
      result({data}) {
        this.<%name%> = JSON.parse(JSON.stringify(data.<%name%>))
      }
    }
  },
  props: { <%name%>Id: [Number, String] }
})
export default class <%Name%>Form extends Vue {
  <%name%> = { <%#each fields%><%fieldName%>: '', <%/each%> }

  async save<%Name%> () {
    const mutation = gql`
      mutation save<%Name%>($<%name%>: <%Name%>Input!) {
        save<%Name%>(<%name%>: $<%name%>) {
          id<%#each fields%>
          <%fieldName%><%/each%>
        }
      }
    `

    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const { __typename, ...input } = this.<%name%> as any

    await this.$apollo.mutate({
      mutation,
      variables: { <%name%>: input },
      update: () => {
        this.$apollo.getClient().resetStore()
      }
    })

    this.$emit('save', this.<%name%>)
  }

  close() {
    this.$emit('cancel')
  }
}
</script><%={{ }}=%>
