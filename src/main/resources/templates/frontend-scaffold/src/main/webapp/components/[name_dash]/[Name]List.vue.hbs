{{=<% %>=}}<template>
  <div v-if="$apollo.loading">
    Loading...
  </div>
  <div v-else-if="error">
    Unable to load component. Error message: {{ error }}
  </div>
  <table v-else>
    <thead>
      <tr>
        <th>Id</th><%#each fields%>
        <th><%FieldName%></th><%/each%>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      <tr
        v-for="<%name%> in <%names%>"
        :key="<%name%>.id"
      >
        <td>{{ <%name%>.id }}</td><%#each fields%>
        <td>{{ <%name%>.<%fieldName%> }}</td><%/each%>
        <td>
          <n-link :to="'/<%names_dash%>/' + <%name%>.id">
            Show
          </n-link>
          <button
            ref="edit<%Name%>Btn"
            type="button"
            @click="edit<%Name%>(<%name%>.id)"
          >
            Edit <%Name%>
          </button>
          <button
            ref="delete<%Name%>Btn"
            type="button"
            @click="delete<%Name%>(<%name%>.id)"
          >
            Delete <%Name%>
          </button>
        </td>
      </tr>
    </tbody>
  </table>
</template>

<script lang="ts">
import { Vue } from 'vue-property-decorator'
import Component from 'nuxt-class-component'
import gql from 'graphql-tag'

@Component({
  apollo: {
    <%names%>: {
      query: gql`
        query <%names%><%#if hasRelations%>($filter: <%Name%>Filter)<%/if%> {
          <%names%>: <%names%><%#if hasRelations%>(filter: $filter)<%/if%> {
            id<%#each fields%>
            <%fieldName%><%/each%>
          }
        }
      `,

      error (error) {
        this.error = error.message
      }<%#if hasRelations%>,

      variables () {
        const <%fieldName%> = this.$props.<%fieldName%><%/if%><%/each%>
        return { filter: { <%#each fields%><%#if fieldRelationship%>, <%fieldName%><%/if%><%/each%> } }
      }<%/if>
    }
  },

  props: {
    id: [Number, String]<%#each fields%><%#if fieldRelationship%>,
    <%fieldName%>: [Number, String]<%/if%><%/each%>
  }
})
export default class <%Name%>List extends Vue {
  <%names%> = null
  error = null

  async delete<%Name%> (id: number) {
    const mutation = gql`
      mutation delete<%Name%>($id: ID!) {
        delete<%Name%>(id: $id)
      }
    `

    if (confirm('Are you sure?')) {
      await this.$apollo.mutate({
        mutation,
        variables: { id },
        update: async () => {
          await this.$apollo.getClient().resetStore()
        }
      })
    }
  }

  edit<%Name%> (id: number) {
    this.$emit('edit:<%name%>', id)
  }
}
</script><%={{ }}=%>
