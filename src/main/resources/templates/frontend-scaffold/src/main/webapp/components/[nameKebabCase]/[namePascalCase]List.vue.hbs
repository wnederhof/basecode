{{=<% %>=}}<template>
  <div v-if="$apollo.loading">
    Loading...
  </div>
  <div v-else-if="error">
    Unable to load component. Error message: {{ error }}
  </div>
  <<%#if usesBootstrapTheme%>b-table-simple fixed<%else%>table<%/if%> v-else>
    <thead>
      <tr>
        <th>Id</th><%#each fields%>
        <th v-if="!$props.<%fieldNameCamelCase%>"><%fieldNamePascalCase%></th><%/each%>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      <tr
        v-for="<%nameCamelCase%> in <%namePluralCamelCase%>"
        :key="<%nameCamelCase%>.id"
      >
        <td>{{ <%nameCamelCase%>.id }}</td><%#each fields%>
        <td v-if="!$props.<%fieldNameCamelCase%>">{{ <%nameCamelCase%>.<%fieldNameCamelCase%> }}</td><%/each%>
        <td>
          <n-link :to="'/<%namePluralKebabCase%>/' + <%nameCamelCase%>.id">
            Show
          </n-link>
          <<%#if usesBootstrapTheme%>b-button><%else%>button<%/if%>
            ref="edit<%namePascalCase%>Btn"
            type="button"
            @click="edit<%namePascalCase%>(<%nameCamelCase%>.id)"
          >
            Edit
          </<%#if usesBootstrapTheme%>b-button><%else%>button<%/if%>>
          <<%#if usesBootstrapTheme%>b-button><%else%>button<%/if%>
            ref="delete<%namePascalCase%>Btn"
            type="button"
            @click="delete<%namePascalCase%>(<%nameCamelCase%>.id)"
          >
            Delete
          </<%#if usesBootstrapTheme%>b-button><%else%>button<%/if%>>
        </td>
      </tr>
    </tbody>
  </table>
</template>

<script lang="ts">
import { Vue } from 'vue-property-decorator'
import Component from 'nuxt-class-component'
import gql from 'graphql-tag'

@Component({
  apollo: {
    <%namePluralCamelCase%>: {
      query: gql`
        query <%namePluralCamelCase%><%#if hasRelations%>($filter: <%namePascalCase%>Filter)<%/if%> {
          <%namePluralCamelCase%>: <%namePluralCamelCase%><%#if hasRelations%>(filter: $filter)<%/if%> {
            id<%#each fields%>
            <%fieldNameCamelCase%><%/each%>
          }
        }
      `,

      error (error) {
        this.error = error.message
      }<%#if hasRelations%>,

      variables () {<%#each fields%><%#if isFieldRelational%>
        const <%fieldNameCamelCase%> = this.$props.<%fieldNameCamelCase%><%/if%><%/each%>
        return { filter: { <%#each fields%><%#if isFieldRelational%><%fieldNameCamelCase%>, <%/if%><%/each%>} }
      }<%/if%>
    }
  },

  props: {
    id: [Number, String]<%#each fields%><%#if isFieldRelational%>,
    <%fieldNameCamelCase%>: [Number, String]<%/if%><%/each%>
  }
})
export default class <%namePascalCase%>List extends Vue {
  <%namePluralCamelCase%> = null
  error = null

  async delete<%namePascalCase%> (id: number) {
    const mutation = gql`
      mutation delete<%namePascalCase%>($id: ID!) {
        delete<%namePascalCase%>(id: $id)
      }
    `

    if (confirm('Are you sure?')) {
      await this.$apollo.mutate({
        mutation,
        variables: { id },
        update: async () => {
          await this.$apollo.getClient().resetStore()
        }
      })
    }
  }

  edit<%namePascalCase%> (id: number) {
    this.$emit('edit:<%nameCamelCase%>', id)
  }
}
</script><%={{ }}=%>
