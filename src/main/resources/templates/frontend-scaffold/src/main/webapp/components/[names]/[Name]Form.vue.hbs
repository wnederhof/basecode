{{=<% %>=}}<template>
  <div v-if="$apollo.loading">Loading...</div>
  <form v-else @submit.prevent="save<% Name %>">
    <input v-if="<% name %>" id="id" v-model="<% name %>.id" type="hidden" /><%#each fields%>
    <div>
      <label for="<% fieldName %>"><% FieldName %></label>
      <input id="<% fieldName %>" v-model="<% name %>.<% fieldName %>" type="text" />
    </div><%/each%>
    <div>
      <button>Save <% Name %></button>
    </div>
  </form>
</template>

<script lang="ts">
import { Vue } from "vue-property-decorator";
import Component from "nuxt-class-component";
import { SmartQuery } from "vue-apollo-decorators";
import gql from "graphql-tag";

@Component({ props: { <% name %>Id: Number } })
export default class <% Name %>Form extends Vue {
  @SmartQuery({
    query: gql`
      query <% name %>Id($id: Int) {
        <% name %>: <% name %>ById(id: $id) {
          id<%#each fields%>
          <% fieldName %><%/each%>
        }
      }
    `,
    variables() {
      return {
        id: this.$props.<% name %>Id,
      };
    },
    skip() {
      return !this.$props.<% name %>Id;
    },
  })
  <% name %> = { <%#each fields%><% fieldName %>: "", <%/each%> };

  async save<% Name %>() {
    const mutation = gql`
      mutation save<% name %>($<% name %>: <% Name %>Input!) {
        save<% Name %>(<% name %>: $<% name %>) {
          id<%#each fields%>
          <% fieldName %><%/each%>
        }
      }
    `;

    const { __typename, ...input } = this.<% name %> as any;

    await this.$apollo.mutate({
      mutation,
      variables: { <% name %>: input },
      update: () => {
        this.$apollo.getClient().resetStore();
      },
    });

    this.$emit("save", this.<% name %>);
  }
}
</script><%={{ }}=%>
