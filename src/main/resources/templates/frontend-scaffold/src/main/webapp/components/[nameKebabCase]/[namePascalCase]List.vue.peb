<template>
  <VLoadingIndicator v-if="$apollo.loading" />
  <VErrorMessage v-else-if="error" :message="error" />
  <div v-else>
    <h1{%if usesBootstrapComponents%} class="mt-5 mb-3"{%endif%}>
      List of {{namePluralPascalCase}}
    </h1>
    <div v-if="{{namePluralCamelCase}}.length === 0">No entries.</div>
    <{%if usesBootstrapComponents%}BTableSimple v-else fixed{%else%}table v-else{%endif%}>
      <thead>
        <tr>
          <th>Id</th>{%for field in fields%}
          <th{% if field.isFieldRelational %} v-if="!$props.{{field.fieldNameCamelCase}}"{% endif %}>{{field.fieldNamePascalCase}}</th>{%endfor%}
          <th>Actions</th>
        </tr>
      </thead>
      <tbody>
        <tr v-for="{{nameCamelCase}} in {{namePluralCamelCase}}" :key="{{nameCamelCase}}.id">
          <td>{{ "{{" }} {{nameCamelCase}}.id {{ "}}" }}</td>{%for field in fields%}
          <td{% if field.isFieldRelational %} v-if="!$props.{{field.fieldNameCamelCase}}"{% endif %}>{{ "{{" }} {{nameCamelCase}}.{{field.fieldNameCamelCase}} {{ "}}" }}</td>{%endfor%}
          <td>
            <NLink :to="'/{{namePluralKebabCase}}/' + {{nameCamelCase}}.id">Show</NLink>
            <{%if usesBootstrapComponents%}BButton{%else%}button{%endif%} ref="edit{{namePascalCase}}Btn" type="button" @click="edit{{namePascalCase}}({{nameCamelCase}}.id)">Edit</{%if usesBootstrapComponents%}BButton{%else%}button{%endif%}>
            <{%if usesBootstrapComponents%}BButton{%else%}button{%endif%} ref="delete{{namePascalCase}}Btn" type="button" @click="delete{{namePascalCase}}({{nameCamelCase}}.id)">Delete</{%if usesBootstrapComponents%}BButton{%else%}button{%endif%}>
          </td>
        </tr>
      </tbody>
    </{%if usesBootstrapComponents%}BTableSimple{%else%}table{%endif%}>
    <{%if usesBootstrapComponents%}BButton{%else%}button{%endif%} ref="new{{namePascalCase}}Btn" @click="new{{namePascalCase}}">New {{namePascalCase}}</{%if usesBootstrapComponents%}BButton{%else%}button{%endif%}>{%if usesBootstrapComponents%}
    <BModal
      v-model="{{nameCamelCase}}EditorVisible"
      :title="modalTitle"
      hide-footer
    >
      <{{namePascalCase}}Editor
        ref="{{nameCamelCase}}Editor"
        :id="selectedId"{%for field in fields%}{%if field.isFieldRelational%}
        :{{ field.fieldNameKebabCase }}="this.$props.{{ field.fieldNameCamelCase }}"{%endif%}{%endfor%}
        @save="closeEditor"
        @cancel="closeEditor"
      />
    </BModal>{%else%}
    <div v-if="{{nameCamelCase}}EditorVisible">
      <h2>{{ modalTitle }}</h2>
      <{{namePascalCase}}Editor
        v-if="{{nameCamelCase}}EditorVisible"
        ref="{{nameCamelCase}}Editor"
        :key="selectedId"
        :id="selectedId"{%for field in fields%}{%if field.isFieldRelational%}
        :{{ field.fieldNameKebabCase }}="this.$props.{{ field.fieldNameCamelCase }}"{%endif%}{%endfor%}
        @save="closeEditor"
        @cancel="closeEditor"
      />
    </div>{%endif%}
  </div>
</template>

<script lang="ts">
import { Vue } from 'vue-property-decorator'
import Component from 'nuxt-class-component'
import gql from 'graphql-tag'
import VErrorMessage from "~/components/VErrorMessage.vue";
import VLoadingIndicator from "~/components/VLoadingIndicator.vue";
import {{ namePascalCase }}Editor from "~/components/{{ nameCamelCase }}/{{ namePascalCase }}Editor.vue";

@Component({
  components: {  VErrorMessage, VLoadingIndicator, {{ namePascalCase }}Editor }
  apollo: {
    {{namePluralCamelCase}}: {
      query: gql`
        query {{namePluralCamelCase}}{%if hasRelations%}($filter: {{namePascalCase}}Filter){%endif%} {
          {{namePluralCamelCase}}: {{namePluralCamelCase}}{%if hasRelations%}(filter: $filter){%endif%} {
            id{%for field in fields%}
            {{field.fieldNameCamelCase}}{%endfor%}
          }
        }
      `,

      error (error) {
        this.error = error.message
      }{%if hasRelations%},

      variables () { {%for field in fields%}{%if field.isFieldRelational%}
        const {{field.fieldNameCamelCase}} = this.$props.{{field.fieldNameCamelCase}}{%endif%}{%endfor%}
        return { filter: { {%for field in fields%}{%if field.isFieldRelational%}{{field.fieldNameCamelCase}}, {%endif%}{%endfor%} } }
      }{%endif%}
    }
  },

  props: {
    id: [Number, String]{%for field in fields%}{%if field.isFieldRelational%},
    {{field.fieldNameCamelCase}}: [Number, String]{%endif%}{%endfor%}
  }
})
export default class {{namePascalCase}}List extends Vue {
  {{namePluralCamelCase}} = null
  error = null
  {{nameCamelCase}}EditorVisible = false
  selectedId: number | null = null

  get modalTitle () {
    return this.selectedId ? 'Edit {{ namePascalCase }}' : 'New {{ namePascalCase }}'
  }

  new{{namePascalCase}} () {
    this.{{nameCamelCase}}EditorVisible = true
    this.selectedId = null
  }

  edit{{namePascalCase}} (id: number) {
    this.{{nameCamelCase}}EditorVisible = true
    this.selectedId = id
  }

  closeEditor () {
    this.{{nameCamelCase}}EditorVisible = false
    this.selectedId = null
  }

  async delete{{namePascalCase}} (id: number) {
    const mutation = gql`
      mutation delete{{namePascalCase}}($id: ID!) {
        delete{{namePascalCase}}(id: $id)
      }
    `

    if (confirm('Are you sure?')) {
      await this.$apollo.mutate({
        mutation,
        variables: { id },
        update: async () => {
          await this.$apollo.getClient().resetStore()
        }
      })
    }
  }
}
</script>
