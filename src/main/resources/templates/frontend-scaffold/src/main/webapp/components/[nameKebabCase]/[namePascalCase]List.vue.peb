<template>
  <div v-if="$apollo.loading">
    Loading...
  </div>
  <div v-else-if="error">
    Unable to load component. Error message: {{ "{{" }} error {{ "}}" }}
  </div>
  <div v-else-if="{{namePluralCamelCase}}.length === 0">
    No entries.
  </div>
  <{%if usesBootstrapTheme%}BTableSimple fixed{%else%}table{%endif%} v-else>
    <thead>
      <tr>
        <th>Id</th>{%for field in fields%}
        <th{% if field.isFieldRelational %} v-if="!$props.{{field.fieldNameCamelCase}}"{% endif %}>{{field.fieldNamePascalCase}}</th>{%endfor%}
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      <tr v-for="{{nameCamelCase}} in {{namePluralCamelCase}}" :key="{{nameCamelCase}}.id">
        <td>{{ "{{" }} {{nameCamelCase}}.id {{ "}}" }}</td>{%for field in fields%}
        <td{% if field.isFieldRelational %} v-if="!$props.{{field.fieldNameCamelCase}}"{% endif %}>{{ "{{" }} {{nameCamelCase}}.{{field.fieldNameCamelCase}} {{ "}}" }}</td>{%endfor%}
        <td>
          <NLink :to="'/{{namePluralKebabCase}}/' + {{nameCamelCase}}.id">
            Show
          </NLink>
          <{%if usesBootstrapTheme%}BButton{%else%}button{%endif%} ref="edit{{namePascalCase}}Btn" type="button" @click="edit{{namePascalCase}}({{nameCamelCase}}.id)">
            Edit
          </{%if usesBootstrapTheme%}BButton{%else%}button{%endif%}>
          <{%if usesBootstrapTheme%}BButton{%else%}button{%endif%} ref="delete{{namePascalCase}}Btn" type="button" @click="delete{{namePascalCase}}({{nameCamelCase}}.id)">
            Delete
          </{%if usesBootstrapTheme%}BButton{%else%}button{%endif%}>
        </td>
      </tr>
    </tbody>
  </{%if usesBootstrapTheme%}BTableSimple{%else%}table{%endif%}>
</template>

<script lang="ts">
import { Vue } from 'vue-property-decorator'
import Component from 'nuxt-class-component'
import gql from 'graphql-tag'

@Component({
  apollo: {
    {{namePluralCamelCase}}: {
      query: gql`
        query {{namePluralCamelCase}}{%if hasRelations%}($filter: {{namePascalCase}}Filter){%endif%} {
          {{namePluralCamelCase}}: {{namePluralCamelCase}}{%if hasRelations%}(filter: $filter){%endif%} {
            id{%for field in fields%}
            {{field.fieldNameCamelCase}}{%endfor%}
          }
        }
      `,

      error (error) {
        this.error = error.message
      }{%if hasRelations%},

      variables () { {%for field in fields%}{%if field.isFieldRelational%}
        const {{field.fieldNameCamelCase}} = this.$props.{{field.fieldNameCamelCase}}{%endif%}{%endfor%}
        return { filter: { {%for field in fields%}{%if field.isFieldRelational%}{{field.fieldNameCamelCase}}, {%endif%}{%endfor%} } }
      }{%endif%}
    }
  },

  props: {
    id: [Number, String]{%for field in fields%}{%if field.isFieldRelational%},
    {{field.fieldNameCamelCase}}: [Number, String]{%endif%}{%endfor%}
  }
})
export default class {{namePascalCase}}List extends Vue {
  {{namePluralCamelCase}} = null
  error = null

  async delete{{namePascalCase}} (id: number) {
    const mutation = gql`
      mutation delete{{namePascalCase}}($id: ID!) {
        delete{{namePascalCase}}(id: $id)
      }
    `

    if (confirm('Are you sure?')) {
      await this.$apollo.mutate({
        mutation,
        variables: { id },
        update: async () => {
          await this.$apollo.getClient().resetStore()
        }
      })
    }
  }

  edit{{namePascalCase}} (id: number) {
    this.$emit('edit:{{nameCamelCase}}', id)
  }
}
</script>
