{{=<% %>=}}<template>
  <div v-if="$apollo.loading">
    Loading...
  </div>
  <div v-else-if="error">
    Unable to load component. Error message: {{ error }}
  </div>
  <form
    v-else
    ref="<%nameCamelCase%>Form"
    @submit.prevent="save<%namePascalCase%>"
  >
    <input
      v-if="<%nameCamelCase%>.id"
      :id="$id('id')"
      v-model="<%nameCamelCase%>.id"
      type="hidden"
    >
<%#each fields%>
    <div>
      <label :for="$id('<%fieldNameCamelCase%>')"><%fieldNamePascalCase%></label><%#unless isFieldOfTypeText%>
      <input
        :id="$id('<%fieldNameCamelCase%>')"
        ref="<%fieldNameCamelCase%>Input"
        v-model="<%nameCamelCase%>.<%fieldNameCamelCase%>"
        type="<%fieldHtmlInputType%>"<%#unless isFieldNullable%><%#if isString%>
        required<%/if%><%/unless%>
      ><%else%>
      <textarea
        :id="$id('<%fieldNameCamelCase%>')"
        ref="<%fieldNameCamelCase%>Input"
        v-model="<%nameCamelCase%>.<%fieldNameCamelCase%>"<%#unless isFieldNullable%><%#if isString%>
        required<%/if%><%/unless%>
      ></textarea><%/unless%>
    </div><%/each%>
    <div>
      <button>Save <%namePascalCase%></button>
      <button
        ref="cancelBtn"
        type="button"
        @click="close"
      >
        Close <%namePascalCase%>
      </button>
    </div>
  </form>
</template>

<script lang="ts">
import { Vue } from 'vue-property-decorator'
import Component from 'nuxt-class-component'
import gql from 'graphql-tag'

@Component({
  apollo: {
    <%nameCamelCase%>: {
      query: gql`
        query <%nameCamelCase%>($id: Int) {
          <%nameCamelCase%>: <%nameCamelCase%>(id: $id) {
            id<%#each fields%>
            <%fieldNameCamelCase%><%/each%>
          }
        }
      `,

      error (error) {
        this.error = error.message
      },

      variables () {
        return {
          id: this.$props.<%nameCamelCase%>Id
        }
      },

      skip () {
        return !this.$props.<%nameCamelCase%>Id
      },

      result ({ data }) {
        this.<%nameCamelCase%> = Object.assign({}, data.<%nameCamelCase%>)
      }
    }
  },

  props: { <%nameCamelCase%>Id: [Number, String] }
})
export default class <%namePascalCase%>Form extends Vue {
  <%nameCamelCase%> = {
    id: null,<%#each fields%>
    <%fieldNameCamelCase%>: <%#if isFieldNullable%>''<%else%>null<%/if%>,<%/each%>
  }
  error = null

  async save<%namePascalCase%> () {
    if (this.<%nameCamelCase%>.id) {
      await this.update<%namePascalCase%>()
    } else {
      await this.create<%namePascalCase%>()
    }
  }

  private async update<%namePascalCase%>() {
    const mutation = gql`
      mutation save<%namePascalCase%>($id: ID!, $input: Update<%namePascalCase%>Input!) {
        update<%namePascalCase%>(id: $id, input: $input) {
          id<%#each fields%>
          <%fieldNameCamelCase%><%/each%>
        }
      }
    `

    const <%nameCamelCase%>Input: any = Object.assign({}, this.<%nameCamelCase%>)
    delete <%nameCamelCase%>Input.__typename

    const { id, ...input } = <%nameCamelCase%>Input

    await this.$apollo.mutate({
      mutation,
      variables: { id, input },
      update: () => {
        this.$apollo.getClient().resetStore()
      }
    })

    this.$emit('save:<%nameCamelCase%>', this.<%nameCamelCase%>)
  }

  private async create<%namePascalCase%>() {
    const mutation = gql`
      mutation save<%namePascalCase%>($input: Create<%namePascalCase%>Input!) {
        create<%namePascalCase%>(input: $input) { id }
      }
    `

    const <%nameCamelCase%>Input: any = Object.assign({}, this.<%nameCamelCase%>)
    delete <%nameCamelCase%>Input.id
    delete <%nameCamelCase%>Input.__typename

    await this.$apollo.mutate({
      mutation,
      variables: { input: <%nameCamelCase%>Input },
      update: () => {
        this.$apollo.getClient().resetStore()
      }
    })

    this.$emit('save:<%nameCamelCase%>', this.<%nameCamelCase%>)
  }

  close () {
    this.$emit('close:<%nameCamelCase%>Form')
  }
}
</script><%={{ }}=%>
