import { shallowMount, createLocalVue, Wrapper } from '@vue/test-utils'
import flushPromises from 'flush-promises'
import VueApollo from 'vue-apollo'
import {{namePascalCase}}List from '@/components/{{nameKebabCase}}/{{namePascalCase}}List.vue'{% if usesBootstrapComponents %}
import { BootstrapVue } from 'bootstrap-vue'{% endif %}

const localVue = createLocalVue()
localVue.use(VueApollo){% if usesBootstrapComponents %}
localVue.use(BootstrapVue){% endif %}

describe('{{namePascalCase}}List', () => {
  let wrapper: Wrapper<any>

  const createComponent = () => {
    wrapper = shallowMount({{namePascalCase}}List, {
      localVue,
      propsData: { {{nameCamelCase}}Id: 1 },
      stubs: {
        {{namePascalCase}}ListTable: true,
        {{namePascalCase}}EditorForm: true,
        $id: true
      },
    })
  }

  afterEach(() => {
    wrapper.destroy()
  })

  it('opens {{nameCamelCase}} form when new is pressed', async () => {
    createComponent()
    await flushPromises()

    expect(wrapper.findComponent({ ref: '{{nameCamelCase}}EditorForm' }).exists()).toBeFalsy()
    await wrapper.findComponent({ ref: 'openNewFormBtn' }).trigger('click')
    expect(wrapper.findComponent({ ref: '{{nameCamelCase}}EditorForm' }).exists()).toBeTruthy()
  })

  it('opens {{nameCamelCase}} form when edit is pressed', async () => {
    createComponent()
    await flushPromises()

    expect(wrapper.findComponent({ ref: '{{nameCamelCase}}EditorForm' }).exists()).toBeFalsy()
    await wrapper.findComponent({ ref: '{{nameCamelCase}}ListTable' }).vm.$emit('edit:{{nameCamelCase}}', 1)
    expect(wrapper.findComponent({ ref: '{{nameCamelCase}}EditorForm' }).exists()).toBeTruthy()
  })

  it('closes when close is pressed', async () => {
    createComponent()
    await flushPromises()

    await wrapper.findComponent({ ref: '{{nameCamelCase}}ListTable' }).vm.$emit('edit:{{nameCamelCase}}', 1)
    await wrapper.findComponent({ ref: '{{nameCamelCase}}EditorForm' }).vm.$emit('cancel:{{nameCamelCase}}EditorForm')
    expect(wrapper.findComponent({ ref: '{{nameCamelCase}}EditorForm' }).exists()).toBeFalsy()
  })

  it('closes when save is pressed', async () => {
    createComponent()
    await flushPromises()

    await wrapper.findComponent({ ref: '{{nameCamelCase}}ListTable' }).vm.$emit('edit:{{nameCamelCase}}', 1)
    await wrapper.findComponent({ ref: '{{nameCamelCase}}EditorForm' }).vm.$emit('save:{{nameCamelCase}}')
    expect(wrapper.findComponent({ ref: '{{nameCamelCase}}EditorForm' }).exists()).toBeFalsy()
  })
})
