import { shallowMount, createLocalVue, RouterLinkStub, Wrapper } from '@vue/test-utils'
import flushPromises from 'flush-promises'
import { createMockClient } from 'mock-apollo-client'
import VueApollo from 'vue-apollo'
import gql from 'graphql-tag'
import {{namePascalCase}}List from '@/components/{{nameKebabCase}}/{{namePascalCase}}List.vue'
import { MockApolloClient } from 'mock-apollo-client/dist/mockClient'{% if usesBootstrapComponents %}
import { BootstrapVue } from 'bootstrap-vue'{% endif %}

const localVue = createLocalVue()
localVue.use(VueApollo){% if usesBootstrapComponents %}
localVue.use(BootstrapVue){% endif %}

describe('{{namePascalCase}}List', () => {
  let wrapper: Wrapper<any>
  let mockClient: MockApolloClient
  let apolloProvider: VueApollo

  const createComponent = () => {
    mockClient = createMockClient()

    mockClient.setRequestHandler(gql`
      query {{namePluralCamelCase}}{%if hasRelations%}($filter: {{namePascalCase}}Filter){%endif%} {
        {{namePluralCamelCase}}: {{namePluralCamelCase}}{%if hasRelations%}(filter: $filter){%endif%} {
          id{%for field in fields%}
          {{field.fieldNameCamelCase}}{%endfor%}
        }
      }
    `, jest.fn().mockResolvedValue({
      data: {
        {{namePluralCamelCase}}: [
          {
            id: 1{%for field in fields%},
            {{field.fieldNameCamelCase}}: {{field.fieldVueTypescriptTestValue}}{%endfor%}
          }
        ]
      }
    }))

    apolloProvider = new VueApollo({
      defaultClient: mockClient
    })

    wrapper = shallowMount({{namePascalCase}}List, {
      localVue,
      apolloProvider,
      stubs: {
        NLink: RouterLinkStub,
        VLoadingIndicator: true,
        VErrorMessage: true,
        {{namePascalCase}}List: true,
        {{namePascalCase}}Editor: true,
        $id: true
      },
    })
  }

  afterEach(() => {
    wrapper.destroy()
  })

  it('opens {{nameCamelCase}} form when new is pressed', async () => {
    createComponent()
    await flushPromises()

    expect(wrapper.findComponent({ ref: '{{nameCamelCase}}Editor' }).exists()).toBeFalsy()
    await wrapper.findComponent({ ref: 'new{{namePascalCase}}Btn' }).trigger('click')
    expect(wrapper.findComponent({ ref: '{{nameCamelCase}}Editor' }).exists()).toBeTruthy()
  })

  it('opens {{nameCamelCase}} form when edit is pressed', async () => {
    createComponent()
    await flushPromises()

    expect(wrapper.findComponent({ ref: '{{nameCamelCase}}Editor' }).exists()).toBeFalsy()
    await wrapper.findComponent({ ref: 'edit{{namePascalCase}}Btn' }).trigger('click')
    expect(wrapper.findComponent({ ref: '{{nameCamelCase}}Editor' }).exists()).toBeTruthy()
  })

  it('closes when close is pressed', async () => {
    createComponent()
    await flushPromises()

    await wrapper.findComponent({ ref: 'edit{{namePascalCase}}Btn' }).trigger('click')
    await wrapper.findComponent({ ref: '{{nameCamelCase}}Editor' }).vm.$emit('cancel')
    expect(wrapper.findComponent({ ref: '{{nameCamelCase}}Editor' }).exists()).toBeFalsy()
  })

  it('closes when save is pressed', async () => {
    createComponent()
    await flushPromises()

    await wrapper.findComponent({ ref: 'edit{{namePascalCase}}Btn' }).trigger('click')
    await wrapper.findComponent({ ref: '{{nameCamelCase}}Editor' }).vm.$emit('save')
    expect(wrapper.findComponent({ ref: '{{nameCamelCase}}Editor' }).exists()).toBeFalsy()
  })

  it('does not run a mutation on delete with no confirmation', async () => {
    createComponent()
    await flushPromises()
    const queryHandler = jest.fn().mockResolvedValue(false)
    global.confirm = () => false
    mockClient.setRequestHandler(gql`
      mutation delete{{namePascalCase}}($id: ID!) {
        delete{{namePascalCase}}(id: $id)
      }
    `, queryHandler)

    await wrapper.findComponent({ ref: 'delete{{namePascalCase}}Btn' }).trigger('click')
    expect(queryHandler).toBeCalledTimes(0)
  })

  it('runs a mutation on delete with confirmation', async () => {
    createComponent()
    await flushPromises()
    const queryHandler = jest.fn().mockResolvedValue(true)
    global.confirm = () => true
    mockClient.setRequestHandler(gql`
      mutation delete{{namePascalCase}}($id: ID!) {
        delete{{namePascalCase}}(id: $id)
      }
    `, queryHandler)

    await wrapper.findComponent({ ref: 'delete{{namePascalCase}}Btn' }).trigger('click')
    expect(queryHandler).toBeCalledTimes(1)
  })
})
