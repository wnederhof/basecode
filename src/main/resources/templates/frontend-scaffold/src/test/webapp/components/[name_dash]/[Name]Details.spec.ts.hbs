{{=<% %>=}}import { shallowMount, createLocalVue, Wrapper } from '@vue/test-utils'
import flushPromises from 'flush-promises'
import { createMockClient } from 'mock-apollo-client'
import VueApollo from 'vue-apollo'
import gql from 'graphql-tag'
import <%Name%>Details from '@/components/<%name_dash%>/<%Name%>Details.vue'
import { MockApolloClient } from 'mock-apollo-client/dist/mockClient'

const localVue = createLocalVue()
localVue.use(VueApollo)

describe('<%Name%>Details', () => {
  let wrapper: Wrapper<any>
  let mockClient: MockApolloClient
  let apolloProvider: VueApollo

  const createComponent = () => {
    mockClient = createMockClient()

    mockClient.setRequestHandler(gql`
      query <%name%>($id: Int) {
        <%name%>: <%name%>(id: $id) {
          id<%#each fields%>
          <%fieldNameCamelCase%><%/each%>
        }
      }
    `, jest.fn().mockResolvedValue({
      data: {
        <%name%>: {
          id: 1<%#each fields%>,
          <%fieldNameCamelCase%>: 'Some <%fieldNamePascalCase%>'<%/each%>
        }
      }
    }))

    apolloProvider = new VueApollo({
      defaultClient: mockClient
    })

    wrapper = shallowMount(<%Name%>Details, {
      localVue,
      apolloProvider,
      propsData: { <%name%>Id: 1 }
    })
  }

  afterEach(() => {
    wrapper.destroy()
  })

  it('is a Vue instance', () => {
    createComponent()
    expect(wrapper.vm).toBeTruthy()
  })

  it('shows loading when fetching data', () => {
    createComponent()
    expect(wrapper.text()).toContain('Loading...')
  })

  it('contains <%name%> details', async () => {
    createComponent()
    await flushPromises()
<%#each fields%>
    expect(wrapper.text()).toContain('Some <%fieldNamePascalCase%>')<%/each%>
  })
})<%={{ }}=%>
