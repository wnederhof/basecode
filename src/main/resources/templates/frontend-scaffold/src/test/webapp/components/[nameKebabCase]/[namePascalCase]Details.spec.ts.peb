import { shallowMount, createLocalVue, Wrapper, RouterLinkStub } from '@vue/test-utils'
import flushPromises from 'flush-promises'
import { createMockClient } from 'mock-apollo-client'
import VueApollo from 'vue-apollo'
import gql from 'graphql-tag'
import {{namePascalCase}}Details from '@/components/{{nameKebabCase}}/{{namePascalCase}}Details.vue'
import { MockApolloClient } from 'mock-apollo-client/dist/mockClient'{% if usesBootstrapComponents %}
import { BootstrapVue } from 'bootstrap-vue'{% endif %}

const localVue = createLocalVue()
localVue.use(VueApollo){% if usesBootstrapComponents %}
localVue.use(BootstrapVue){% endif %}

describe('{{namePascalCase}}Details', () => {
  let wrapper: Wrapper<any>
  let mockClient: MockApolloClient
  let apolloProvider: VueApollo

  const createComponent = () => {
    mockClient = createMockClient()

    mockClient.setRequestHandler(gql`query {{nameCamelCase}}($id: Int) {
      {{nameCamelCase}}: {{nameCamelCase}}(id: $id) {
        id{%for field in fields%}
        {{field.fieldNameCamelCase}}{%endfor%}
      }
    }`, jest.fn().mockResolvedValue({
      data: {
        {{nameCamelCase}}: {
          id: 1{%for field in fields%},
          {{field.fieldNameCamelCase}}: {{field.fieldVueTypescriptTestValue}}{%endfor%}
        }
      }
    }))

    apolloProvider = new VueApollo({
      defaultClient: mockClient
    })

    wrapper = shallowMount({{namePascalCase}}Details, {
      localVue,
      apolloProvider,
      propsData: { {{nameCamelCase}}Id: 1 },
      stubs: {
        VLoadingIndicator: true,
        VErrorMessage: true,
        NLink: RouterLinkStub,
        {{namePascalCase}}Editor: true
      },
    })
  }

  afterEach(() => {
    wrapper.destroy()
  })

  it('contains {{nameCamelCase}} details', async () => {
    createComponent()
    await flushPromises()
{%for field in fields%}
    expect(wrapper.text()).toContain({{field.fieldVueTypescriptTestValue}}){%endfor%}
  })

  it('opens the {{nameCamelCase}} form when edit is pressed', async () => {
    createComponent()
    await flushPromises()

    expect(wrapper.findComponent({ ref: '{{nameCamelCase}}Editor' }).exists()).toBeFalsy()

    await wrapper.findComponent({ ref: 'edit{{namePascalCase}}Btn' }).trigger('click')

    expect(wrapper.findComponent({ ref: '{{nameCamelCase}}Editor' }).exists()).toBeTruthy()
  })

  it('closes the {{nameCamelCase}} when close is pressed', async () => {
    createComponent()
    await flushPromises()

    await wrapper.findComponent({ ref: 'edit{{namePascalCase}}Btn' }).trigger('click')
    await wrapper.findComponent({ ref: '{{nameCamelCase}}Editor' }).vm.$emit('cancel')

    expect(wrapper.findComponent({ ref: '{{nameCamelCase}}Editor' }).exists()).toBeFalsy()
  })

  it('closes the {{nameCamelCase}} when save is pressed', async () => {
    createComponent()
    await flushPromises()

    await wrapper.findComponent({ ref: 'edit{{namePascalCase}}Btn' }).trigger('click')
    await wrapper.findComponent({ ref: '{{nameCamelCase}}Editor' }).vm.$emit('save')

    expect(wrapper.findComponent({ ref: '{{nameCamelCase}}Editor' }).exists()).toBeFalsy()
  })
})
