{{=<% %>=}}import { shallowMount, createLocalVue, Wrapper } from '@vue/test-utils'
import flushPromises from 'flush-promises'
import VueApollo from 'vue-apollo'
import <%Name%>Manager from '@/components/<%name_dash%>/<%Name%>Manager.vue'

const localVue = createLocalVue()
localVue.use(VueApollo)

describe('<%Name%>Manager', () => {
  let wrapper: Wrapper<any>

  const createComponent = () => {
    wrapper = shallowMount(<%Name%>Manager, {
      localVue,
      propsData: { <%name%>Id: 1 },
      stubs: {
        <%Name%>List: true,
        <%Name%>Form: true,
        $id: true
      }
    })
  }

  afterEach(() => {
    wrapper.destroy()
  })

  it('is a Vue instance', () => {
    createComponent()
    expect(wrapper.vm).toBeTruthy()
  })

  it('opens <%name%> form when new is pressed', async () => {
    createComponent()
    await flushPromises()

    expect(wrapper.findComponent({ ref: 'new<%Name%>Header' }).exists()).toBeFalsy()
    expect(wrapper.findComponent({ ref: 'edit<%Name%>Header' }).exists()).toBeFalsy()
    expect(wrapper.findComponent({ ref: '<%name%>Form' }).exists()).toBeFalsy()

    await wrapper.findComponent({ ref: 'openNewFormBtn' }).trigger('click')

    expect(wrapper.findComponent({ ref: 'new<%Name%>Header' }).exists()).toBeTruthy()
    expect(wrapper.findComponent({ ref: 'edit<%Name%>Header' }).exists()).toBeFalsy()
    expect(wrapper.findComponent({ ref: '<%name%>Form' }).exists()).toBeTruthy()
  })

  it('opens <%name%> form when edit is pressed', async () => {
    createComponent()
    await flushPromises()

    expect(wrapper.findComponent({ ref: 'new<%Name%>Header' }).exists()).toBeFalsy()
    expect(wrapper.findComponent({ ref: 'edit<%Name%>Header' }).exists()).toBeFalsy()
    expect(wrapper.findComponent({ ref: '<%name%>Form' }).exists()).toBeFalsy()

    await wrapper.findComponent({ ref: '<%name%>List' }).vm.$emit('edit:<%name%>', 1)

    expect(wrapper.findComponent({ ref: 'new<%Name%>Header' }).exists()).toBeFalsy()
    expect(wrapper.findComponent({ ref: 'edit<%Name%>Header' }).exists()).toBeTruthy()
    expect(wrapper.findComponent({ ref: '<%name%>Form' }).exists()).toBeTruthy()
  })

  it('closes when close is pressed', async () => {
    createComponent()
    await flushPromises()

    await wrapper.findComponent({ ref: '<%name%>List' }).vm.$emit('edit:<%name%>', 1)
    await wrapper.findComponent({ ref: '<%name%>Form' }).vm.$emit('close:<%name%>Form')

    expect(wrapper.findComponent({ ref: 'new<%Name%>Header' }).exists()).toBeFalsy()
    expect(wrapper.findComponent({ ref: 'edit<%Name%>Header' }).exists()).toBeFalsy()
    expect(wrapper.findComponent({ ref: '<%name%>Form' }).exists()).toBeFalsy()
  })

  it('closes when save is pressed', async () => {
    createComponent()
    await flushPromises()

    await wrapper.findComponent({ ref: '<%name%>List' }).vm.$emit('edit:<%name%>', 1)
    await wrapper.findComponent({ ref: '<%name%>Form' }).vm.$emit('save:<%name%>')

    expect(wrapper.findComponent({ ref: 'new<%Name%>Header' }).exists()).toBeFalsy()
    expect(wrapper.findComponent({ ref: 'edit<%Name%>Header' }).exists()).toBeFalsy()
    expect(wrapper.findComponent({ ref: '<%name%>Form' }).exists()).toBeFalsy()
  })
})<%={{ }}=%>
