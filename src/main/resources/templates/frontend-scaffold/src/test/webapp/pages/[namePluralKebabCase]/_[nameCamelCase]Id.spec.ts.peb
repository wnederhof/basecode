import { shallowMount, createLocalVue, RouterLinkStub, Wrapper } from '@vue/test-utils'
import flushPromises from 'flush-promises'
import Show{{namePascalCase}}Page from '@/pages/{{namePluralKebabCase}}/_{{nameCamelCase}}Id.vue'{% if usesBootstrapComponents %}
import { BootstrapVue } from 'bootstrap-vue'{% endif %}

const localVue = createLocalVue(){% if usesBootstrapComponents %}
localVue.use(BootstrapVue){% endif %}

describe('Show{{namePascalCase}}Page', () => {
  let wrapper: Wrapper<any>

  const push = jest.fn()
  const $route = { params: { {{nameCamelCase}}Id: 1 } }
  const $router = { push }

  const createComponent = () => {
    wrapper = shallowMount(Show{{namePascalCase}}Page, {
      localVue,
      stubs: {
        NLink: RouterLinkStub,
        {{namePascalCase}}Details: true
      },
      mocks: {
        $route,
        $router
      }
    })
  }

  afterEach(() => {
    wrapper.destroy()
  })

  it('opens {{nameCamelCase}} form when edit is pressed', async () => {
    createComponent()
    await flushPromises()

    expect(wrapper.findComponent({ ref: '{{nameCamelCase}}Form' }).exists()).toBeFalsy()

    await wrapper.findComponent({ ref: 'edit{{namePascalCase}}Btn' }).trigger('click')

    expect(wrapper.findComponent({ ref: '{{nameCamelCase}}Form' }).exists()).toBeTruthy()
  })

  it('closes when close is pressed', async () => {
    createComponent()
    await flushPromises()

    await wrapper.findComponent({ ref: 'edit{{namePascalCase}}Btn' }).trigger('click')
    await wrapper.findComponent({ ref: '{{nameCamelCase}}Form' }).vm.$emit('cancel:{{nameCamelCase}}Form')

    expect(wrapper.findComponent({ ref: '{{nameCamelCase}}Form' }).exists()).toBeFalsy()
  })

  it('closes when save is pressed', async () => {
    createComponent()
    await flushPromises()

    await wrapper.findComponent({ ref: 'edit{{namePascalCase}}Btn' }).trigger('click')
    await wrapper.findComponent({ ref: '{{nameCamelCase}}Form' }).vm.$emit('save:{{nameCamelCase}}')

    expect(wrapper.findComponent({ ref: '{{nameCamelCase}}Form' }).exists()).toBeFalsy()
  })
})
