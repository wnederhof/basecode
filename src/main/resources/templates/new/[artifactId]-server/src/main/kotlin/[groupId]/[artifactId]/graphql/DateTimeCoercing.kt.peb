package {{ groupId }}.{{ artifactId }}.graphql

import graphql.language.StringValue
import graphql.schema.Coercing
import graphql.schema.CoercingParseLiteralException
import graphql.schema.CoercingParseValueException
import graphql.schema.CoercingSerializeException
import org.springframework.stereotype.Component
import java.time.LocalDateTime
import java.time.format.DateTimeParseException

@Component
class DateTimeCoercing : Coercing<LocalDateTime, String> {

    override fun serialize(dataFetcherResult: Any): String {
        if (dataFetcherResult !is LocalDateTime) {
            throw CoercingSerializeException("Expected a LocalDateTime object.")
        }
        return "$dataFetcherResult"
    }

    override fun parseValue(input: Any): LocalDateTime {
        try {
            if (input !is String) {
                throw CoercingParseValueException("Expected a String.")
            }
            return LocalDateTime.parse(input)
        } catch (e: DateTimeParseException) {
            throw CoercingParseValueException(String.format("Not a valid datetime: '%s'.", input), e)
        }
    }

    override fun parseLiteral(input: Any): LocalDateTime {
        if (input !is StringValue) {
            throw CoercingParseLiteralException("Expected a StringValue.")
        }
        try {
            return LocalDateTime.parse(input.value)
        } catch (e: DateTimeParseException) {
            throw CoercingParseLiteralException(e)
        }
    }

}
