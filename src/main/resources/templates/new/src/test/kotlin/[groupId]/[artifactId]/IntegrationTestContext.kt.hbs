package {{ groupId }}.{{ artifactId }}

import org.junit.jupiter.api.extension.ExtendWith
import org.springframework.boot.test.context.SpringBootTest
import org.springframework.test.context.DynamicPropertyRegistry
import org.springframework.test.context.DynamicPropertySource
import org.springframework.test.context.junit.jupiter.SpringExtension
import org.testcontainers.containers.PostgreSQLContainer
import org.testcontainers.junit.jupiter.Container
import org.testcontainers.junit.jupiter.Testcontainers
import javax.transaction.Transactional

@ExtendWith(SpringExtension::class)
@SpringBootTest
@Testcontainers
@Transactional // Rolls back transaction after each test.
abstract class IntegrationTestContext {

    companion object {
        @JvmStatic
        @Container // Create a PostgreSQL container for our Integration Tests.
        val postgres = PostgreSQLContainer<Nothing>("postgres:12-alpine").apply {
            withDatabaseName("test")
            withUsername("postgres")
            withPassword("postgres")
        }

        @JvmStatic
        @DynamicPropertySource
        fun databaseProperties(registry: DynamicPropertyRegistry) {
            registry.add("spring.datasource.url") { postgres.jdbcUrl }
            registry.add("spring.datasource.username") { postgres.username }
            registry.add("spring.datasource.password") { postgres.password }
        }
    }
}