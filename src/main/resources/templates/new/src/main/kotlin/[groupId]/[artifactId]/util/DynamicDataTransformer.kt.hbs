package {{ groupId }}.{{ artifactId }}.util

import kotlin.reflect.full.declaredMemberProperties
import kotlin.reflect.full.primaryConstructor

object DynamicDataTransformer {

    inline fun <reified Orig : Any, reified Other : Any> Orig.withPropertyValuesOf(other: Other): Orig {
        val otherPropByName = Other::class.declaredMemberProperties.associateBy { it.name }
        val originalPropByName = Orig::class.declaredMemberProperties.associateBy { it.name }
        val originalPrimaryConstructor = Orig::class.primaryConstructor!!
        val args = originalPrimaryConstructor.parameters.associateWith { origParam ->
            val otherProp = otherPropByName[origParam.name]
            val originalProp = originalPropByName[origParam.name]
            otherProp?.get(other) ?: originalProp?.get(this)
        }
        return originalPrimaryConstructor.callBy(args)
    }

    inline fun <reified Orig : Any> Orig.withClearedProperties(propertyNames: Collection<String>): Orig {
        val originalPrimaryConstructor = Orig::class.primaryConstructor!!
        val originalPropByName = Orig::class.declaredMemberProperties.associateBy { it.name }
        val args = originalPrimaryConstructor.parameters.associateWith { origParam ->
            val originalProp = originalPropByName[origParam.name]
            if (originalProp?.name in propertyNames ?: listOf()) {
                null
            } else {
                originalProp?.get(this)
            }
        }
        return originalPrimaryConstructor.callBy(args)
    }

}
