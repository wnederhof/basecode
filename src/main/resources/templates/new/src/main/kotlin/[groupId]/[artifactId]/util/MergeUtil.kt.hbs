package {{ groupId }}.{{ artifactId }}.util

import kotlin.reflect.full.declaredMemberProperties
import kotlin.reflect.full.primaryConstructor

object MergeUtil {

    /**
     * Merge every non-null value in other into original. Other may contain nullify params, which will nullify
     * the fields in the original.
     *
     * For example:
     *
     * SomeDataClass(x = "x", y = "y") mergeWithNullify SomeDataClassPatch(x = "y", y = null, nullifyY = true)
     *
     * yields:
     *
     * SomeDataClass(x = "y", y = null)
     */
    inline infix fun <reified Orig : Any, reified Other : Any> Orig.mergeWithNullify(other: Other): Orig {
        val originalPropByName = Other::class.declaredMemberProperties.associateBy { it.name }
        val otherPropByName = Orig::class.declaredMemberProperties.associateBy { it.name }
        val originalPrimaryConstructor = Orig::class.primaryConstructor!!

        val args = originalPrimaryConstructor.parameters.associateWith { origParam ->
            val originalProp = originalPropByName[origParam.name]
            val otherProp = otherPropByName[origParam.name]
            val propertyName = origParam.name!!
            val capitalizedFirstLetterName = (propertyName.toUpperCase()[0] + propertyName.substring(1))
            val nullifyPropertyName = "nullify$capitalizedFirstLetterName"
            val shouldNullify = originalPropByName[nullifyPropertyName]?.get(other) == true

            if (shouldNullify) null else originalProp?.get(other) ?: otherProp?.get(this)
        }
        return originalPrimaryConstructor.callBy(args)
    }

}
