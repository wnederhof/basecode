package {{ groupId }}.{{ artifactId }}.{{ names_lowercase }}

import {{ groupId }}.{{ artifactId }}.{{ names_lowercase }}.{{ Name }}Event.*{{#each fields}}{{#if fieldRelationship}}
import {{ groupId }}.{{ artifactId }}.{{ fieldTypes_lowercase }}.{{ FieldType }}Service{{/if}}{{/each}}
import org.springframework.context.ApplicationEventPublisher
import org.springframework.data.repository.findByIdOrNull
import org.springframework.stereotype.Service
import org.springframework.transaction.annotation.Transactional

@Service
@Transactional
class {{ Name }}Service(
    private val {{ name }}Repository: {{ Name }}Repository,{{#each fields}}{{#if fieldRelationship}}
    private val {{ fieldType }}Service: {{ FieldType }}Service,{{/if}}{{/each}}
    private val applicationEventPublisher: ApplicationEventPublisher
) {

    fun findAll(filter: {{ Name }}Filter? = null): Iterable<{{ Name }}> {
        if (filter != null && hasMultipleFilters(filter)) {
            error("Using multiple filters is not supported.")
        }

        if (filter?.id != null) {
            return listOfNotNull({{ name }}Repository.findByIdOrNull(filter.id))
        }
{{#each fields as |f|}}{{#if fieldRelationship}}
        if (filter?.{{ fieldName }} != null) {
            return {{ name }}Repository.findBy{{ FieldName }}(filter.{{ fieldName }})
        }
{{/if}}{{/each}}
        return {{ name }}Repository.findAll()
    }

    private fun hasMultipleFilters(filter: {{ Name }}Filter): Boolean {
        val filterCount = listOfNotNull(
            filter.id{{#each fields as |f|}}{{#if fieldRelationship}},
            filter.{{fieldName}}{{/if}}{{/each}}
        )

        return filterCount.size > 1
    }

{{#each fields as |f|}}{{#if fieldRelationship}}    fun findBy{{ FieldName }}({{ fieldName }}: Int): List<{{ Name }}> {
        return {{ name }}Repository.findBy{{ FieldName }}({{ fieldName }})
    }

    fun deleteBy{{ FieldName }}({{ fieldName }}: Int) {
        {{ name }}Repository.findBy{{ FieldName }}({{ fieldName }})
            .forEach({{ name }}Repository::delete)
    }
{{/if}}{{/each}}
    fun findById(id: Int): {{ Name }}? {
        return {{ name }}Repository.findByIdOrNull(id)
    }

    fun save({{ name }}: {{ Name }}): {{ Name }} { {{#each fields}}{{#if fieldRelationship}}
        requireNotNull({{ fieldType }}Service.findById({{ name }}.{{ fieldName }}))
{{/if}}{{/each}}
        applicationEventPublisher.publishEvent(Before{{ Name }}SavedEvent(this, {{ name }}))
        val saved{{ Name }} = {{ name }}Repository.save({{ name }})
        applicationEventPublisher.publishEvent(After{{ Name }}SavedEvent(this, saved{{ Name }}))

        return saved{{ Name }}
    }

    fun deleteById(id: Int) {
        applicationEventPublisher.publishEvent(Before{{ Name }}DeletedEvent(this, id))
        {{ name }}Repository.deleteById(id)
        applicationEventPublisher.publishEvent(After{{ Name }}DeletedEvent(this, id))
    }

}
