package {{ groupId }}.{{ artifactId }}.{{ names }}

import {{ groupId }}.{{ artifactId }}.{{ names }}.{{ Name }}Event.Before{{ Name }}SavedEvent
{{#each fields}}{{#if fieldRelationship}}
import {{ groupId }}.{{ artifactId }}.{{ fieldTypes }}.{{ FieldType }}Event.Before{{ FieldType }}DeletedEvent
import {{ groupId }}.{{ artifactId }}.{{ fieldTypes }}.{{ FieldType }}Service
{{/if}}{{/each}}
import org.springframework.context.event.EventListener
import org.springframework.core.annotation.Order
import org.springframework.stereotype.Component

@Component
class {{ Name }}Listener(
        private val {{ name }}Service: {{ Name }}Service{{#each fields}}{{#if fieldRelationship}},
        private val {{ fieldType }}Service: {{ FieldType }}Service{{/if}}{{/each}}
) {

    @EventListener
    @Order(VALIDATION_PRECEDENCE)
    fun onBefore{{ Name }}SavedEvent(event: Before{{ Name }}SavedEvent) {
{{#each fields}}{{#if fieldRelationship}}
        requireNotNull({{ fieldType }}Service.findById(event.entity.{{ fieldName }}))
{{/if}}{{/each}}
    }
{{#each fields}}{{#if fieldRelationship}}
    @EventListener
    fun onBefore{{ FieldType }}DeletedEvent(event: Before{{ FieldType }}DeletedEvent) {
        {{ name }}Service.deleteBy{{ FieldName }}(event.id)
    }
{{/if}}{{/each}}
    companion object {
        const val VALIDATION_PRECEDENCE = 1000
    }

}