package {{ groupId }}.{{ artifactId }}.{{ names }}

import {{ groupId }}.{{ artifactId }}.{{ names }}.{{ Name }}Event.*
import org.springframework.context.ApplicationEventPublisher
import org.springframework.data.repository.findByIdOrNull
import org.springframework.stereotype.Service
import org.springframework.transaction.annotation.Transactional;

@Service
@Transactional
class {{ Name }}Service(
        private val {{ name }}Repository: {{ Name }}Repository,
        private val applicationEventPublisher: ApplicationEventPublisher
) {
    fun findAll(): List<{{ Name }}> {
        return {{ name }}Repository.findAll().toList()
    }

    fun findById(id: Int): {{ Name }}? {
        return {{ name }}Repository.findByIdOrNull(id)
    }

    fun save({{ name }}: {{ Name }}): {{ Name }} {
        if ({{ name }}.id == null) {
            return create({{ name }})
        }
        return update({{ name }})
    }

    private fun create({{ name }}: {{ Name }}): {{ Name }} {
        val saved{{ Name }} = {{ name }}Repository.save({{ name }})
        applicationEventPublisher.publishEvent({{ Name }}CreatedEvent(this, saved{{ Name }}))
        return saved{{ Name }}
    }

    private fun update({{ name }}: {{ Name }}): {{ Name }} {
        if ({{ name }}Repository.findById({{ name }}.id!!).isEmpty) {
            error("{{ Name }} ${ {{ name }}.id } does not exist.")
        }

        val saved{{ Name }} = {{ name }}Repository.save({{ name }})
        applicationEventPublisher.publishEvent({{ Name }}UpdatedEvent(this, saved{{ Name }}))
        return saved{{ Name }}
    }

    fun deleteById(id: Int) {
        if ({{ name }}Repository.findById(id).isEmpty) {
            error("{{ Name }} ${id} does not exist.")
        }

        applicationEventPublisher.publishEvent({{ Name }}AwaitingDeletionEvent(this, id))
        {{ name }}Repository.deleteById(id)
        applicationEventPublisher.publishEvent({{ Name }}DeletedEvent(this, id))
    }
}