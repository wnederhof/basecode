package {{ groupId }}.{{ artifactId }}.{{ names }}

import {{ groupId }}.{{ artifactId }}.{{ names }}.{{ Name }}Event.*
import org.springframework.context.ApplicationEventPublisher
import org.springframework.data.repository.findByIdOrNull
import org.springframework.stereotype.Service
import org.springframework.transaction.annotation.Transactional;

@Service
@Transactional
class {{ Name }}Service(
        private val {{ name }}Repository: {{ Name }}Repository,
        private val applicationEventPublisher: ApplicationEventPublisher
) {
    fun findAll(): Iterable<{{ Name }}> {
        return {{ name }}Repository.findAll()
    }

    fun findById(id: Int): {{ Name }}? {
        return {{ name }}Repository.findByIdOrNull(id)
    }

    fun save({{ name }}: {{ Name }}): {{ Name }} {
        applicationEventPublisher.publishEvent(Before{{ Name }}SavedEvent(this, {{ name }}))
        val saved{{ Name }} = {{ name }}Repository.save({{ name }})
        applicationEventPublisher.publishEvent(After{{ Name }}SavedEvent(this, saved{{ Name }}))
        return saved{{ Name }}
    }

    fun deleteById(id: Int) {
        applicationEventPublisher.publishEvent(Before{{ Name }}DeletedEvent(this, id))
        {{ name }}Repository.deleteById(id)
        applicationEventPublisher.publishEvent(After{{ Name }}DeletedEvent(this, id))
    }
}