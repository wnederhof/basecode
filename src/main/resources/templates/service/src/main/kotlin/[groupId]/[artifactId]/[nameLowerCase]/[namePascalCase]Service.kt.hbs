package {{ groupId }}.{{ artifactId }}.{{ nameLowerCase }}

import {{ groupId }}.{{ artifactId }}.{{ nameLowerCase }}.{{ namePascalCase }}.Update{{ namePascalCase }}Input
import {{ groupId }}.{{ artifactId }}.{{ nameLowerCase }}.{{ namePascalCase }}.Create{{ namePascalCase }}Input{{#if hasRelations}}
import {{ groupId }}.{{ artifactId }}.{{ nameLowerCase }}.{{ namePascalCase }}.{{ namePascalCase }}FilterInput{{/if}}
import {{ groupId }}.{{ artifactId }}.{{ nameLowerCase }}.{{ namePascalCase }}Event.*{{#each fields}}{{#if isFieldRelational}}
import {{ groupId }}.{{ artifactId }}.{{ fieldTypeLowerCase }}.{{ fieldTypePascalCase }}Service{{/if}}{{/each}}
import org.springframework.context.ApplicationEventPublisher
import org.springframework.data.repository.findByIdOrNull
import org.springframework.stereotype.Service
import org.springframework.transaction.annotation.Transactional

@Service
@Transactional
class {{ namePascalCase }}Service(
    private val {{ nameCamelCase }}Repository: {{ namePascalCase }}Repository,{{#each fields}}{{#if isFieldRelational}}
    private val {{ fieldTypeCamelCase }}Service: {{ fieldTypePascalCase }}Service,{{/if}}{{/each}}
    private val publisher: ApplicationEventPublisher,
) {

    fun findById(id: Int): {{ namePascalCase }}? {
        return {{ nameCamelCase }}Repository.findByIdOrNull(id)
    }

    fun findAll({{#if hasRelations}}filterInput: {{ namePascalCase }}FilterInput? = null{{/if}}): Iterable<{{ namePascalCase }}> { {{#each fields as |f|}}{{#if isFieldRelational}}
        if (filterInput?.{{ fieldNameCamelCase }} != null) {
            return {{ nameCamelCase }}Repository.findBy{{ fieldNamePascalCase }}(filterInput.{{ fieldNameCamelCase }})
        }
{{/if}}{{/each}}
        return {{ nameCamelCase }}Repository.findAll()
    }
{{#each fields as |f|}}{{#if isFieldRelational}}
    fun findBy{{ fieldNamePascalCase }}({{ fieldNameCamelCase }}: Int): List<{{ namePascalCase }}> {
        return {{ nameCamelCase }}Repository.findBy{{ fieldNamePascalCase }}({{ fieldNameCamelCase }})
    }
{{/if}}{{/each}}
    fun create(input: Create{{ namePascalCase }}Input): {{ namePascalCase }} { {{#each fields}}{{#if isFieldRelational}}
        requireNotNull({{ fieldTypeCamelCase }}Service.findById(input.{{ fieldNameCamelCase }}))
{{/if}}{{/each}}
        var {{ nameCamelCase }} = {{ namePascalCase }}.newInstance(input)
        {{ nameCamelCase }} = {{ nameCamelCase }}Repository.save({{ nameCamelCase }})
        publisher.publishEvent({{ namePascalCase }}CreateEvent(this, {{ nameCamelCase }}))
        return {{ nameCamelCase }}
    }
{{#each fields as |f|}}{{#if isFieldRelational}}
    fun deleteBy{{ fieldNamePascalCase }}({{ fieldNameCamelCase }}: Int) {
        {{ nameCamelCase }}Repository.findBy{{ fieldNamePascalCase }}({{ fieldNameCamelCase }})
            .forEach({{ nameCamelCase }}Repository::delete)
    }
{{/if}}{{/each}}
    fun update(id: Int, input: Update{{ namePascalCase }}Input): {{ namePascalCase }}? { {{#each fields}}{{#if isFieldRelational}}
        if (input.{{ fieldNameCamelCase }} != null) {
            requireNotNull({{ fieldTypeCamelCase }}Service.findById(input.{{ fieldNameCamelCase }}))
        }
{{/if}}{{/each}}
        var {{ nameCamelCase }} = {{ nameCamelCase }}Repository.findByIdOrNull(id) ?: return null
        {{ nameCamelCase }} = {{ nameCamelCase }}.withUpdate(input)
        {{ nameCamelCase }} = {{ nameCamelCase }}Repository.save({{ nameCamelCase }})
        publisher.publishEvent({{ namePascalCase }}UpdateEvent(this, {{ nameCamelCase }}))
        return {{ nameCamelCase }}
    }

    fun deleteById(id: Int): Boolean {
        val {{ nameCamelCase }} = {{ nameCamelCase }}Repository.findByIdOrNull(id) ?: return false
        {{ nameCamelCase }}Repository.deleteById(id)
        publisher.publishEvent({{ namePascalCase }}DeleteEvent(this, {{ nameCamelCase }}))
        return true
    }

}
