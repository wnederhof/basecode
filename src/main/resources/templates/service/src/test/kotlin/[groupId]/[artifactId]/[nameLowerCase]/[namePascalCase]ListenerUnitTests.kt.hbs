{{#if hasRelations}}package {{ groupId }}.{{ artifactId }}.{{ nameLowerCase }}

{{#each fields as |f|}}{{#if isFieldRelational}}import {{ groupId }}.{{ artifactId }}.{{ fieldTypeLowerCase }}.{{ fieldTypePascalCase }}Event.{{ fieldTypePascalCase }}DeleteEvent
{{/if}}{{/each}}import com.nhaarman.mockitokotlin2.verify
import org.junit.jupiter.api.Test
{{#each fields as |f|}}{{#if isFieldRelational}}import {{ groupId }}.{{ artifactId }}.{{ fieldTypeLowerCase }}.{{ fieldTypePascalCase }}Fixtures.{{ fieldTypeScreamingSnakeCase }}_FIXTURE_WITH_ID_1
{{/if}}{{/each}}import org.junit.jupiter.api.extension.ExtendWith
import org.mockito.InjectMocks{{#if hasRelations}}
import org.mockito.Mock{{/if}}
import org.mockito.junit.jupiter.MockitoExtension

@ExtendWith(MockitoExtension::class)
internal class {{ namePascalCase }}ListenerUnitTests{{#if hasRelations}}{

    @Mock
    private lateinit var {{ nameCamelCase }}Service: {{ namePascalCase }}Service

    @InjectMocks
    private lateinit var {{ nameCamelCase }}Listener: {{ namePascalCase }}Listener
{{#each fields as |f|}}{{#if isFieldRelational}}
    @Test
    fun `When {{ fieldTypePascalCase }}DeleteEvent is triggered, related {{ namePluralPascalCase }} are deleted`() {
        {{ nameCamelCase }}Listener.onEvent({{ fieldTypePascalCase }}DeleteEvent(this, {{ fieldTypePascalCase }}_FIXTURE_WITH_ID_1))

        verify({{ nameCamelCase }}Service).deleteBy{{ fieldNamePascalCase }}({{ fieldTypePascalCase }}_FIXTURE_WITH_ID_1.id!!)
    }
{{/if}}{{/each}}
}{{/if}}{{/if}}
