package {{ groupId }}.{{ artifactId }}.{{ nameLowerCase }}

import {{ groupId }}.{{ artifactId }}.IntegrationTestContext
import {{ groupId }}.{{ artifactId }}.{{ nameLowerCase }}.{{ namePascalCase }}Fixtures.CREATE_{{ nameScreamingSnakeCase }}_FIXTURE_1{{#each fields as |f|}}{{#if isFieldRelational}}
import {{ groupId }}.{{ artifactId }}.{{ fieldTypeLowerCase }}.{{ fieldTypePascalCase }}Fixtures.{{ fieldTypeScreamingSnakeCase }}_FIXTURE_1
import {{ groupId }}.{{ artifactId }}.{{ fieldTypeLowerCase }}.{{ fieldTypePascalCase }}Repository
import {{ groupId }}.{{ artifactId }}.{{ fieldTypeLowerCase }}.{{ fieldTypePascalCase }}Service{{/if}}{{/each}}
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test{{#if hasRelations}}
import org.junit.jupiter.api.assertThrows{{/if}}
import org.springframework.beans.factory.annotation.Autowired

class {{ namePascalCase }}IntegrationTests : IntegrationTestContext() {

    @Autowired
    private lateinit var {{ nameCamelCase }}Service: {{ namePascalCase }}Service
{{#each fields as |f|}}{{#if isFieldRelational}}
    @Autowired
    private lateinit var {{ fieldTypeCamelCase }}Service: {{ fieldTypePascalCase }}Service

    @Autowired
    private lateinit var {{ fieldTypeCamelCase }}Repository: {{ fieldTypePascalCase }}Repository
{{/if}}{{/each}}{{# if hasRelations }}
    @Test
    fun `{{ namePascalCase }}s cannot be created if related entities do not exist`() {
        assertThrows<RuntimeException> {
            {{ nameCamelCase }}Service.create(CREATE_{{ nameScreamingSnakeCase }}_FIXTURE_1)
        }
        assertThat({{ nameCamelCase }}Service.findAll()).isEmpty()
    }
{{/if}}
    @Test
    fun `{{ namePascalCase }}s can be created, fetched and destroyed`() { {{#each fields as |f|}}{{#if isFieldRelational}}
        val {{ fieldTypeCamelCase }} = {{ fieldTypeCamelCase }}Repository.create({{ fieldTypeScreamingSnakeCase }}_FIXTURE_1)
{{/if}}{{/each}}
        val {{ nameCamelCase }} = {{ nameCamelCase }}Service.create(CREATE_{{ nameScreamingSnakeCase }}_FIXTURE_1{{#if hasRelations}}.copy({{#each fields as |f|}}{{#if isFieldRelational}}
            {{ fieldNameCamelCase }} = {{ fieldTypeCamelCase }}.id!!,{{/if}}{{/each}}
        ){{/if}})

        assertThat({{ nameCamelCase }}Service.findAll()).isNotEmpty
        assertThat({{ nameCamelCase }}Service.findById({{ nameCamelCase }}.id!!)).isNotNull
{{#each fields}}{{#if isFieldRelational}}
        assertThat({{ nameCamelCase }}Service.findAll({{ namePascalCase }}.{{ namePascalCase }}FilterInput({{ fieldNameCamelCase }} = {{ fieldTypeCamelCase }}.id!!))).isNotNull
        assertThat({{ nameCamelCase }}Service.findBy{{ fieldNamePascalCase }}({{ fieldTypeCamelCase }}.id!!)).isNotNull
{{/if}}{{/each}}
        {{ nameCamelCase }}Service.deleteById({{ nameCamelCase }}.id!!)

        assertThat({{ nameCamelCase }}Service.findAll()).isEmpty()
    }
{{#each fields as |f|}}{{#if isFieldRelational}}
    @Test
    fun `{{ namePascalCase }}s are deleted when related {{ fieldTypePascalCases }} are deleted`() {
{{#each fields as |f|}}{{#if isFieldRelational}}        val {{ fieldTypeCamelCase }} = {{ fieldTypeCamelCase }}Repository.create({{ fieldTypeScreamingSnakeCase }}_FIXTURE_1)
{{/if}}{{/each}}
        val {{ nameCamelCase }} = {{ nameCamelCase }}Service.create({{ nameScreamingSnakeCase }}_FIXTURE_1.copy({{#each fields as |f|}}{{#if isFieldRelational}}
            {{ fieldNameCamelCase }} = {{ fieldTypeCamelCase }}.id!!,{{/if}}{{/each}}
        ))

        {{ fieldTypeCamelCase }}Service.deleteById({{ nameCamelCase }}.{{ fieldNameCamelCase }})

        assertThat({{ nameCamelCase }}Service.findAll()).isEmpty()
    }
{{/if}}{{/each}}
}
