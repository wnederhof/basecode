package {{ groupId }}.{{ artifactId }}.{{ name_lowercase }}

import {{ groupId }}.{{ artifactId }}.IntegrationTestContext
import {{ groupId }}.{{ artifactId }}.{{ name_lowercase }}.{{ Name }}Fixtures.CREATE_{{ NAME }}_FIXTURE_1{{#each fields as |f|}}{{#if fieldRelationship}}
import {{ groupId }}.{{ artifactId }}.{{ fieldType_lowercase }}.{{ FieldType }}Fixtures.{{ FIELD_TYPE }}_FIXTURE_1
import {{ groupId }}.{{ artifactId }}.{{ fieldType_lowercase }}.{{ FieldType }}Repository
import {{ groupId }}.{{ artifactId }}.{{ fieldType_lowercase }}.{{ FieldType }}Service{{/if}}{{/each}}
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test{{#if hasRelations}}
import org.junit.jupiter.api.assertThrows{{/if}}
import org.springframework.beans.factory.annotation.Autowired

class {{ Name }}IntegrationTests : IntegrationTestContext() {

    @Autowired
    private lateinit var {{ name }}Service: {{ Name }}Service
{{#each fields as |f|}}{{#if fieldRelationship}}
    @Autowired
    private lateinit var {{ fieldType }}Service: {{ FieldType }}Service

    @Autowired
    private lateinit var {{ fieldType }}Repository: {{ FieldType }}Repository
{{/if}}{{/each}}{{# if hasRelations }}
    @Test
    fun `{{ Name }}s cannot be created if related entities do not exist`() {
        assertThrows<RuntimeException> {
            {{ name }}Service.create(CREATE_{{ NAME }}_FIXTURE_1)
        }
        assertThat({{ name }}Service.findAll()).isEmpty()
    }
{{/if}}
    @Test
    fun `{{ Name }}s can be created, fetched and destroyed`() { {{#each fields as |f|}}{{#if fieldRelationship}}
        val {{ fieldType }} = {{ fieldType }}Repository.create({{ FIELD_TYPE }}_FIXTURE_1)
{{/if}}{{/each}}
        val {{ name }} = {{ name }}Service.create(CREATE_{{ NAME }}_FIXTURE_1{{#if hasRelations}}.copy({{#each fields as |f|}}{{#if fieldRelationship}}
            {{ fieldName }} = {{ fieldType }}.id!!,{{/if}}{{/each}}
        ){{/if}})

        assertThat({{ name }}Service.findAll()).isNotEmpty
        assertThat({{ name }}Service.findById({{ name }}.id!!)).isNotNull
{{#each fields}}{{#if fieldRelationship}}
        assertThat({{ name }}Service.findAll({{ Name }}.{{ Name }}FilterInput({{ fieldName }} = {{ fieldType }}.id!!))).isNotNull
        assertThat({{ name }}Service.findBy{{ FieldName }}({{ fieldType }}.id!!)).isNotNull
{{/if}}{{/each}}
        {{ name }}Service.deleteById({{ name }}.id!!)

        assertThat({{ name }}Service.findAll()).isEmpty()
    }
{{#each fields as |f|}}{{#if fieldRelationship}}
    @Test
    fun `{{ Name }}s are deleted when related {{ FieldTypes }} are deleted`() {
{{#each fields as |f|}}{{#if fieldRelationship}}        val {{ fieldType }} = {{ fieldType }}Repository.create({{ FIELD_TYPE }}_FIXTURE_1)
{{/if}}{{/each}}
        val {{ name }} = {{ name }}Service.create({{ NAME }}_FIXTURE_1.copy({{#each fields as |f|}}{{#if fieldRelationship}}
            {{ fieldName }} = {{ fieldType }}.id!!,{{/if}}{{/each}}
        ))

        {{ fieldType }}Service.deleteById({{ name }}.{{ fieldName }})

        assertThat({{ name }}Service.findAll()).isEmpty()
    }
{{/if}}{{/each}}
}
