package {{ groupId }}.{{ artifactId }}.{{ nameLowerCase }}

import {{ groupId }}.{{ artifactId }}.util.MergeUtil.mergeWithNullify
import org.springframework.data.annotation.*
import org.springframework.data.relational.core.mapping.Table
import java.time.LocalDate
import java.time.LocalDateTime

@Table("{{ namePluralSnakeCase }}")
data class {{ namePascalCase }}(
    @Id
    val id: Int? = null{{#each fields }},
    val {{ fieldNameCamelCase }}: {{ fieldKotlinType }}{{/each}},

    @CreatedDate
    val createdAt: LocalDateTime? = null,

    @LastModifiedDate
    val updatedAt: LocalDateTime? = null
) {

    constructor(input: Create{{ namePascalCase }}Input) : this({{#each fields }}
        {{fieldNameCamelCase}} = input.{{fieldNameCamelCase}},{{/each}}
    )

    fun merge(update{{ namePascalCase }}Input: Update{{ namePascalCase }}Input): {{ namePascalCase }} {
        return this mergeWithNullify update{{ namePascalCase }}Input
    }

    data class Create{{ namePascalCase }}Input({{#each fields}}
        val {{ fieldNameCamelCase }}: {{ fieldKotlinType }},{{/each}}
    )

    data class Update{{ namePascalCase }}Input({{#each fields}}
        val {{ fieldNameCamelCase }}: {{ fieldKotlinType }},{{/each}}{{#each fields}}{{#if isFieldNullable}}
        val nullify{{ fieldNamePascalCase }}: Boolean? = null,{{/if}}{{/each}}
    )
{{#if hasRelations}}
    data class {{ namePascalCase }}FilterInput({{#each fields }}{{#if isFieldRelational}}
        val {{ fieldNameCamelCase }}: {{ fieldKotlinTypeNotNullable }}? = null,{{/if}}{{/each}}
    )
{{/if}}
}
