package {{ groupId }}.{{ artifactId }}.{{ nameLowerCase }}

import org.springframework.data.annotation.*
import org.springframework.data.relational.core.mapping.Table
import java.time.LocalDate
import java.time.LocalDateTime

@Table("{{ namePluralSnakeCase }}")
data class {{ namePascalCase }}(
    @Id
    val id: Int? = null{{#each fields }},
    val {{ fieldNameCamelCase }}: {{ fieldKotlinType }}{{/each}},

    @CreatedDate
    val createdAt: LocalDateTime? = null,

    @LastModifiedDate
    val updatedAt: LocalDateTime? = null
) {

    fun update(input: Update{{ namePascalCase }}Input) = copy({{#each fields }}
        {{fieldNameCamelCase}} = input.{{fieldNameCamelCase}},{{/each}}
    )

    companion object {
        fun create(input: Create{{ namePascalCase }}Input) = {{ namePascalCase }}({{#each fields }}
            {{fieldNameCamelCase}} = input.{{fieldNameCamelCase}},{{/each}}
        )
    }

    data class Create{{ namePascalCase }}Input({{#each fields}}
        val {{ fieldNameCamelCase }}: {{ fieldKotlinType }},{{/each}}
    )

    data class Update{{ namePascalCase }}Input({{#each fields}}
        val {{ fieldNameCamelCase }}: {{ fieldKotlinTypeNotNullable }}?,{{/each}}
    )
{{#if hasRelations}}
    data class {{ namePascalCase }}FilterInput({{#each fields }}{{#if isFieldRelational}}
        val {{ fieldNameCamelCase }}: {{ fieldKotlinTypeNotNullable }}? = null,{{/if}}{{/each}}
    )
{{/if}}
}
